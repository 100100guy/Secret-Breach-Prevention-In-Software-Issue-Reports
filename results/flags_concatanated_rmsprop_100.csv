Unnamed: 0,Issue ID,Issue Body,Candidate String,Repolink
0,,,,https://github.com/microsoft/api-guidelines
0,1014.0,"I have uploaded a video to YouTube using this api in firebase cloud function, but the response i get in the call back doesn't contains the video id. 

Code for uploading video 

```js
var yt = google.youtube('v3');
yt.videos.insert({
  part: 'status,snippet',
  resource: {
    snippet: {
      title: ""title"",
      description: ""description""
    },
    status: {
      privacyStatus: 'public'
    }
  },
  media: {
    body: fs.createReadStream(file)
  }
}, function (error, data) {
  console.log(util.inspect(data, false, null));
  console.log(error);
});
```

the logged response is like 

```
{ status: 200,
  statusText: 'OK', 
  headers:  
   { 'x-guploader-uploadid': 'AEnB2UqicLz-FhD6KLtuvX_sZYeYQWuXoTM4FFusI6yCSGGlIdxKu3-EIneHhG04CYPqum1Uz8ISVmwIlzZqHrBJ2w-wOmbb6t5hEqOUrPnfRxirEd2tHfM',
 etag: '""_gJQceDMxJ8gP-8T2HLXUoURK8c/-WggxUHM10yHZDXznWuNSxlnSYU""',
 vary: 'Origin, X-Origin',
 'x-goog-correlation-id': 'zaYeqX5ngEo',
 'content-type': 'application/json; charset=UTF-8',
 'cache-control': 'no-cache, no-store, max-age=0, must-revalidate',
 pragma: 'no-cache',
 expires: 'Mon, 01 Jan 1990 00:00:00 GMT',
 date: 'Wed, 21 Feb 2018 15:19:39 GMT',
 'content-length': '975',
 server: 'UploadServer',
 'alt-svc': 'hq="":443""; ma=2592000; quic=51303431; quic=51303339; quic=51303338; quic=51303337; quic=51303335,quic="":443""; ma=2592000; v=""41,39,38,37,35""',
 connection: 'close' },
  config: 
   { adapter: [Function: httpAdapter],
     transformRequest: { '0': [Function: transformRequest] },
     transformResponse: { '0': [Function: transformResponse] },
     timeout: 0,
     xsrfCookieName: 'XSRF-TOKEN', 
```

Why its not working giving  a video resource in the response body.

",AEnB2UqicLz-FhD6KLtuvX_sZYeYQWuXoTM4FFusI6yCSGGlIdxKu3-EIneHhG04CYPqum1Uz8ISVmwIlzZqHrBJ2w-wOmbb6t5hEqOUrPnfRxirEd2tHfM,https://github.com/googleapis/google-api-nodejs-client
1,530.0,"I am trying to integrate Google drive resumable file upload/update with my application. But when i update the file, file is updating in encoded format it is not taking the actual content. Encoded format is working for multiplepart uploadType but same content is not working for Resumable upload. Please find the below details

Step 1 : Start the resumable session

```js
function uploadFile(fileData) {

    var accessToken = 'ya29.nwI5Em6UnYGHvVzVx7lBk5tD-xzFl4_JG3_c-_t4FJ3owll_8i_rL5M17LFV6VlF7QE';

    const boundary = '-------314159265358979323846';
    const delimiter = ""\r\n--"" + boundary + ""\r\n"";
    const close_delim = ""\r\n--"" + boundary + ""--"";

   var contentType = fileData.type || 'application/octet-stream';
   var metadata = {
            'name': fileData.name,
            'mimeType': contentType,
            'Content-Type': contentType,
            'Content-Length': fileData.size
        };

   var request = gapi.client.request({
        'path' : 'upload/drive/v3/files',
        'method' : 'POST',
        'params' : {'uploadType':'resumable'},
        'headers' : {
          'X-Upload-Content-Type' : fileData.type,
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': 'Bearer ' + accessToken,
        },
        'body' : metadata
    });

   request.execute(function(resp, raw_resp) {
      var locationUrl =   JSON.parse(raw_resp).gapiRequest.data.headers.location;
      console.log(locationUrl);
      uploadToLocationUrl(locationUrl, fileData);
   });
}
```

Upto here it's fine I am getting Location Url and then calling a function to upload the file.

Step 2 : Resumable session initiation request

```js
     function uploadToLocationUrl(locationUrl, fileData)
       {
            var reader = new FileReader();
            reader.readAsBinaryString(fileData);
            reader.onload = function (e) {
            var contentType = fileData.type || 'application/octet-stream';
            var metadata = {
                'name': fileData.name,
                'mimeType': contentType,
                'Content-Type': contentType,
                'Content-Length': fileData.size
            };

              var base64Data = btoa(reader.result);
              var multipartRequestBody =
                  delimiter +
                  'Content-Type: application/json\r\n\r\n' +
                  JSON.stringify(metadata) +
                  delimiter +
                  'Content-Type: ' + contentType + '\r\n' +
                  'Content-Transfer-Encoding: base64\r\n' +
                  '\r\n' +
                  base64Data +
                  close_delim;

           var requestPost = gapi.client.request({
                'path' : locationUrl,
                'method' : 'PUT',
                'headers' : {
                  'X-Upload-Content-Length' : fileData.size
                },
                'body' : multipartRequestBody
              });
            console.log(requestPost);

            requestPost.execute(function(resp, raw_resp) {
              console.log(resp);
            });
         }
}
```

Result : Updated file in google drive

```
---------314159265358979323846
Content-Type: application/json

{""name"":""api.txt"",""mimeType"":""text/plain""}
---------314159265358979323846
Content-Type: text/plain
Content-Transfer-Encoding: base64

MSkgTmVlZCBhbiBhcGkgd2hpY2ggd2lsbCByZXR1cm4gYWxsIGxlYWRzIGVtYWlsIGlkLg0KMikgTmVlZCBhbiBhcGkgdG8gY29udmVydCBtdWx0aXBsZSBjb250YWN0IGludG8gbGVhZC4NCjMpIE5lZWQgYW4gYXBpIGZvciBnb29nbGUgc2lnbiBpbi4vLyBkb24ndCBkaXNjdXNzIGFib3V0IHRoaXMgb25lIG5vdywgZmlyc3Qgd2Ugd2lsbCBkaXNjdXNzIGFib3V0IHRoaXMgQVBJLg==
---------314159265358979323846--
```

Thank you.
",MSkgTmVlZCBhbiBhcGkgd2hpY2ggd2lsbCByZXR1cm4gYWxsIGxlYWRzIGVtYWlsIGlkLg0KM,https://github.com/googleapis/google-api-nodejs-client
2,530.0,"I am trying to integrate Google drive resumable file upload/update with my application. But when i update the file, file is updating in encoded format it is not taking the actual content. Encoded format is working for multiplepart uploadType but same content is not working for Resumable upload. Please find the below details

Step 1 : Start the resumable session

```js
function uploadFile(fileData) {

    var accessToken = 'ya29.nwI5Em6UnYGHvVzVx7lBk5tD-xzFl4_JG3_c-_t4FJ3owll_8i_rL5M17LFV6VlF7QE';

    const boundary = '-------314159265358979323846';
    const delimiter = ""\r\n--"" + boundary + ""\r\n"";
    const close_delim = ""\r\n--"" + boundary + ""--"";

   var contentType = fileData.type || 'application/octet-stream';
   var metadata = {
            'name': fileData.name,
            'mimeType': contentType,
            'Content-Type': contentType,
            'Content-Length': fileData.size
        };

   var request = gapi.client.request({
        'path' : 'upload/drive/v3/files',
        'method' : 'POST',
        'params' : {'uploadType':'resumable'},
        'headers' : {
          'X-Upload-Content-Type' : fileData.type,
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': 'Bearer ' + accessToken,
        },
        'body' : metadata
    });

   request.execute(function(resp, raw_resp) {
      var locationUrl =   JSON.parse(raw_resp).gapiRequest.data.headers.location;
      console.log(locationUrl);
      uploadToLocationUrl(locationUrl, fileData);
   });
}
```

Upto here it's fine I am getting Location Url and then calling a function to upload the file.

Step 2 : Resumable session initiation request

```js
     function uploadToLocationUrl(locationUrl, fileData)
       {
            var reader = new FileReader();
            reader.readAsBinaryString(fileData);
            reader.onload = function (e) {
            var contentType = fileData.type || 'application/octet-stream';
            var metadata = {
                'name': fileData.name,
                'mimeType': contentType,
                'Content-Type': contentType,
                'Content-Length': fileData.size
            };

              var base64Data = btoa(reader.result);
              var multipartRequestBody =
                  delimiter +
                  'Content-Type: application/json\r\n\r\n' +
                  JSON.stringify(metadata) +
                  delimiter +
                  'Content-Type: ' + contentType + '\r\n' +
                  'Content-Transfer-Encoding: base64\r\n' +
                  '\r\n' +
                  base64Data +
                  close_delim;

           var requestPost = gapi.client.request({
                'path' : locationUrl,
                'method' : 'PUT',
                'headers' : {
                  'X-Upload-Content-Length' : fileData.size
                },
                'body' : multipartRequestBody
              });
            console.log(requestPost);

            requestPost.execute(function(resp, raw_resp) {
              console.log(resp);
            });
         }
}
```

Result : Updated file in google drive

```
---------314159265358979323846
Content-Type: application/json

{""name"":""api.txt"",""mimeType"":""text/plain""}
---------314159265358979323846
Content-Type: text/plain
Content-Transfer-Encoding: base64

MSkgTmVlZCBhbiBhcGkgd2hpY2ggd2lsbCByZXR1cm4gYWxsIGxlYWRzIGVtYWlsIGlkLg0KMikgTmVlZCBhbiBhcGkgdG8gY29udmVydCBtdWx0aXBsZSBjb250YWN0IGludG8gbGVhZC4NCjMpIE5lZWQgYW4gYXBpIGZvciBnb29nbGUgc2lnbiBpbi4vLyBkb24ndCBkaXNjdXNzIGFib3V0IHRoaXMgb25lIG5vdywgZmlyc3Qgd2Ugd2lsbCBkaXNjdXNzIGFib3V0IHRoaXMgQVBJLg==
---------314159265358979323846--
```

Thank you.
",MSkgTmVlZCBhbiBhcGkgd2hpY2ggd2lsbCByZXR1cm4gYWxsIGxlYWRzIGVtYWlsIGlkLg0KMikgTmVlZCBhbiBhcGkgdG8gY29udmVydCBtdWx0aXBsZSBjb250YWN0IGludG8gbGVhZC4NCjMpIE5lZWQgYW4gYXBpIGZvciBnb29nbGUgc2lnbiBpbi4vLyBkb24ndCBkaXNjdXNzIGFib3V0IHRoaXMgb25lIG5vdywgZmlyc3Qgd2Ugd2lsbCBkaXNjdXNzIGFib3V0IHRoaXMgQVBJLg,https://github.com/googleapis/google-api-nodejs-client
3,530.0,"I am trying to integrate Google drive resumable file upload/update with my application. But when i update the file, file is updating in encoded format it is not taking the actual content. Encoded format is working for multiplepart uploadType but same content is not working for Resumable upload. Please find the below details

Step 1 : Start the resumable session

```js
function uploadFile(fileData) {

    var accessToken = 'ya29.nwI5Em6UnYGHvVzVx7lBk5tD-xzFl4_JG3_c-_t4FJ3owll_8i_rL5M17LFV6VlF7QE';

    const boundary = '-------314159265358979323846';
    const delimiter = ""\r\n--"" + boundary + ""\r\n"";
    const close_delim = ""\r\n--"" + boundary + ""--"";

   var contentType = fileData.type || 'application/octet-stream';
   var metadata = {
            'name': fileData.name,
            'mimeType': contentType,
            'Content-Type': contentType,
            'Content-Length': fileData.size
        };

   var request = gapi.client.request({
        'path' : 'upload/drive/v3/files',
        'method' : 'POST',
        'params' : {'uploadType':'resumable'},
        'headers' : {
          'X-Upload-Content-Type' : fileData.type,
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': 'Bearer ' + accessToken,
        },
        'body' : metadata
    });

   request.execute(function(resp, raw_resp) {
      var locationUrl =   JSON.parse(raw_resp).gapiRequest.data.headers.location;
      console.log(locationUrl);
      uploadToLocationUrl(locationUrl, fileData);
   });
}
```

Upto here it's fine I am getting Location Url and then calling a function to upload the file.

Step 2 : Resumable session initiation request

```js
     function uploadToLocationUrl(locationUrl, fileData)
       {
            var reader = new FileReader();
            reader.readAsBinaryString(fileData);
            reader.onload = function (e) {
            var contentType = fileData.type || 'application/octet-stream';
            var metadata = {
                'name': fileData.name,
                'mimeType': contentType,
                'Content-Type': contentType,
                'Content-Length': fileData.size
            };

              var base64Data = btoa(reader.result);
              var multipartRequestBody =
                  delimiter +
                  'Content-Type: application/json\r\n\r\n' +
                  JSON.stringify(metadata) +
                  delimiter +
                  'Content-Type: ' + contentType + '\r\n' +
                  'Content-Transfer-Encoding: base64\r\n' +
                  '\r\n' +
                  base64Data +
                  close_delim;

           var requestPost = gapi.client.request({
                'path' : locationUrl,
                'method' : 'PUT',
                'headers' : {
                  'X-Upload-Content-Length' : fileData.size
                },
                'body' : multipartRequestBody
              });
            console.log(requestPost);

            requestPost.execute(function(resp, raw_resp) {
              console.log(resp);
            });
         }
}
```

Result : Updated file in google drive

```
---------314159265358979323846
Content-Type: application/json

{""name"":""api.txt"",""mimeType"":""text/plain""}
---------314159265358979323846
Content-Type: text/plain
Content-Transfer-Encoding: base64

MSkgTmVlZCBhbiBhcGkgd2hpY2ggd2lsbCByZXR1cm4gYWxsIGxlYWRzIGVtYWlsIGlkLg0KMikgTmVlZCBhbiBhcGkgdG8gY29udmVydCBtdWx0aXBsZSBjb250YWN0IGludG8gbGVhZC4NCjMpIE5lZWQgYW4gYXBpIGZvciBnb29nbGUgc2lnbiBpbi4vLyBkb24ndCBkaXNjdXNzIGFib3V0IHRoaXMgb25lIG5vdywgZmlyc3Qgd2Ugd2lsbCBkaXNjdXNzIGFib3V0IHRoaXMgQVBJLg==
---------314159265358979323846--
```

Thank you.
",_t4FJ3owll_8i_rL5M17LFV6VlF7QE,https://github.com/googleapis/google-api-nodejs-client
0,15336.0,"### Area

oidc

### Describe the bug

On my Dev server if I'm trying to authenicate an existing user with empty password (the user exists but the password is incorrect) I'm getting a weird error, server shows me `500 Internal Server Error`.

### Version

20.0.0

### Expected behavior

401 Unauthorized

### Actual behavior

500 Internal Server Error

### How to Reproduce?

Basically if I'm trying to do something like this (use correct client credentials in Basic Authorization):
```
curl -v --location --request POST 'http://192.168.99.104:8180/realms/quiz/protocol/openid-connect/token' \
--header 'Authorization: Basic cXVpei1zZXJ2aWNlOjdjNzk1MzlkLTBkYTktNDk0YS05OWIyLTVkZjdlN2M2NTBhZg==' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'client_id=quiz-service' \
--data-urlencode 'username=quiz_user' \
--data-urlencode 'password=' \
--data-urlencode 'grant_type=password'
```
I'm getting this:
```
< HTTP/1.1 500 Internal Server Error
< Referrer-Policy: no-referrer
< X-Frame-Options: SAMEORIGIN
< Strict-Transport-Security: max-age=31536000; includeSubDomains
< Cache-Control: no-store
< X-Content-Type-Options: nosniff
< Pragma: no-cache
< X-XSS-Protection: 1; mode=block
< Content-Type: application/json
< content-length: 25
<
{""error"":""unknown_error""}
```

### Anything else?

Stack Trace from console log:
```
keycloak_1  | 2022-11-03 22:06:40,520 ERROR [org.keycloak.services.error.KeycloakErrorHandler] (executor-thread-0) Uncaught server error: java.lang.RuntimeException: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:116)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.verify(Pbkdf2PasswordHashProvider.java:92)
keycloak_1  |   at org.keycloak.credential.PasswordCredentialProvider.isValid(PasswordCredentialProvider.java:177)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$validate$11(LegacyUserCredentialManager.java:255)
keycloak_1  |   at java.base/java.util.Collection.removeIf(Collection.java:544)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.validate(LegacyUserCredentialManager.java:255)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$isValid$0(LegacyUserCredentialManager.java:76)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)
keycloak_1  |   at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1693)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.isValid(LegacyUserCredentialManager.java:76)
keycloak_1  |   at org.keycloak.models.SubjectCredentialManager.isValid(SubjectCredentialManager.java:45)
keycloak_1  |   at org.keycloak.authentication.authenticators.directgrant.ValidatePassword.authenticate(ValidatePassword.java:47)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processSingleFlowExecutionModel(DefaultAuthenticationFlow.java:446)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processFlow(DefaultAuthenticationFlow.java:250)
keycloak_1  |   at org.keycloak.authentication.AuthenticationProcessor.authenticateOnly(AuthenticationProcessor.java:1017)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.resourceOwnerPasswordCredentialsGrant(TokenEndpoint.java:627)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.processGrantRequest(TokenEndpoint.java:208)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
keycloak_1  |   at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
keycloak_1  |   at java.base/java.lang.reflect.Method.invoke(Method.java:566)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:170)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:130)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.internalInvokeOnTarget(ResourceMethodInvoker.java:660)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTargetAfterFilter(ResourceMethodInvoker.java:524)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.lambda$invokeOnTarget$2(ResourceMethodInvoker.java:474)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:476)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:434)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:192)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:152)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:183)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:141)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:32)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:492)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$invoke$4(SynchronousDispatcher.java:261)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$preprocess$0(SynchronousDispatcher.java:161)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.preprocess(SynchronousDispatcher.java:164)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:247)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.RequestDispatcher.service(RequestDispatcher.java:73)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.dispatch(VertxRequestHandler.java:151)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:82)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:42)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:84)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:71)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:430)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:408)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at org.keycloak.quarkus.runtime.integration.web.QuarkusRequestFilter.lambda$createBlockingHandler$0(QuarkusRequestFilter.java:82)
keycloak_1  |   at io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:564)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2449)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1478)
keycloak_1  |   at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)
keycloak_1  |   at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)
keycloak_1  |   at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
keycloak_1  |   at java.base/java.lang.Thread.run(Thread.java:829)
keycloak_1  | Caused by: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2.engineGenerateSecret(Unknown Source)
keycloak_1  |   at java.base/javax.crypto.SecretKeyFactory.generateSecret(SecretKeyFactory.java:338)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:111)
keycloak_1  |   ... 72 more
```",cXVpei1zZXJ2aWNlOjdjNzk1MzlkLTBkYTktNDk0YS05OWIyLTVkZjdlN2M2NTBhZg,https://github.com/keycloak/keycloak
1,15336.0,"### Area

oidc

### Describe the bug

On my Dev server if I'm trying to authenicate an existing user with empty password (the user exists but the password is incorrect) I'm getting a weird error, server shows me `500 Internal Server Error`.

### Version

20.0.0

### Expected behavior

401 Unauthorized

### Actual behavior

500 Internal Server Error

### How to Reproduce?

Basically if I'm trying to do something like this (use correct client credentials in Basic Authorization):
```
curl -v --location --request POST 'http://192.168.99.104:8180/realms/quiz/protocol/openid-connect/token' \
--header 'Authorization: Basic cXVpei1zZXJ2aWNlOjdjNzk1MzlkLTBkYTktNDk0YS05OWIyLTVkZjdlN2M2NTBhZg==' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'client_id=quiz-service' \
--data-urlencode 'username=quiz_user' \
--data-urlencode 'password=' \
--data-urlencode 'grant_type=password'
```
I'm getting this:
```
< HTTP/1.1 500 Internal Server Error
< Referrer-Policy: no-referrer
< X-Frame-Options: SAMEORIGIN
< Strict-Transport-Security: max-age=31536000; includeSubDomains
< Cache-Control: no-store
< X-Content-Type-Options: nosniff
< Pragma: no-cache
< X-XSS-Protection: 1; mode=block
< Content-Type: application/json
< content-length: 25
<
{""error"":""unknown_error""}
```

### Anything else?

Stack Trace from console log:
```
keycloak_1  | 2022-11-03 22:06:40,520 ERROR [org.keycloak.services.error.KeycloakErrorHandler] (executor-thread-0) Uncaught server error: java.lang.RuntimeException: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:116)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.verify(Pbkdf2PasswordHashProvider.java:92)
keycloak_1  |   at org.keycloak.credential.PasswordCredentialProvider.isValid(PasswordCredentialProvider.java:177)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$validate$11(LegacyUserCredentialManager.java:255)
keycloak_1  |   at java.base/java.util.Collection.removeIf(Collection.java:544)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.validate(LegacyUserCredentialManager.java:255)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$isValid$0(LegacyUserCredentialManager.java:76)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)
keycloak_1  |   at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1693)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.isValid(LegacyUserCredentialManager.java:76)
keycloak_1  |   at org.keycloak.models.SubjectCredentialManager.isValid(SubjectCredentialManager.java:45)
keycloak_1  |   at org.keycloak.authentication.authenticators.directgrant.ValidatePassword.authenticate(ValidatePassword.java:47)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processSingleFlowExecutionModel(DefaultAuthenticationFlow.java:446)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processFlow(DefaultAuthenticationFlow.java:250)
keycloak_1  |   at org.keycloak.authentication.AuthenticationProcessor.authenticateOnly(AuthenticationProcessor.java:1017)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.resourceOwnerPasswordCredentialsGrant(TokenEndpoint.java:627)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.processGrantRequest(TokenEndpoint.java:208)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
keycloak_1  |   at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
keycloak_1  |   at java.base/java.lang.reflect.Method.invoke(Method.java:566)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:170)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:130)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.internalInvokeOnTarget(ResourceMethodInvoker.java:660)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTargetAfterFilter(ResourceMethodInvoker.java:524)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.lambda$invokeOnTarget$2(ResourceMethodInvoker.java:474)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:476)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:434)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:192)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:152)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:183)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:141)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:32)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:492)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$invoke$4(SynchronousDispatcher.java:261)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$preprocess$0(SynchronousDispatcher.java:161)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.preprocess(SynchronousDispatcher.java:164)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:247)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.RequestDispatcher.service(RequestDispatcher.java:73)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.dispatch(VertxRequestHandler.java:151)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:82)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:42)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:84)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:71)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:430)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:408)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at org.keycloak.quarkus.runtime.integration.web.QuarkusRequestFilter.lambda$createBlockingHandler$0(QuarkusRequestFilter.java:82)
keycloak_1  |   at io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:564)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2449)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1478)
keycloak_1  |   at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)
keycloak_1  |   at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)
keycloak_1  |   at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
keycloak_1  |   at java.base/java.lang.Thread.run(Thread.java:829)
keycloak_1  | Caused by: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2.engineGenerateSecret(Unknown Source)
keycloak_1  |   at java.base/javax.crypto.SecretKeyFactory.generateSecret(SecretKeyFactory.java:338)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:111)
keycloak_1  |   ... 72 more
```",createBlockingHandler$0(:82,https://github.com/keycloak/keycloak
2,15336.0,"### Area

oidc

### Describe the bug

On my Dev server if I'm trying to authenicate an existing user with empty password (the user exists but the password is incorrect) I'm getting a weird error, server shows me `500 Internal Server Error`.

### Version

20.0.0

### Expected behavior

401 Unauthorized

### Actual behavior

500 Internal Server Error

### How to Reproduce?

Basically if I'm trying to do something like this (use correct client credentials in Basic Authorization):
```
curl -v --location --request POST 'http://192.168.99.104:8180/realms/quiz/protocol/openid-connect/token' \
--header 'Authorization: Basic cXVpei1zZXJ2aWNlOjdjNzk1MzlkLTBkYTktNDk0YS05OWIyLTVkZjdlN2M2NTBhZg==' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'client_id=quiz-service' \
--data-urlencode 'username=quiz_user' \
--data-urlencode 'password=' \
--data-urlencode 'grant_type=password'
```
I'm getting this:
```
< HTTP/1.1 500 Internal Server Error
< Referrer-Policy: no-referrer
< X-Frame-Options: SAMEORIGIN
< Strict-Transport-Security: max-age=31536000; includeSubDomains
< Cache-Control: no-store
< X-Content-Type-Options: nosniff
< Pragma: no-cache
< X-XSS-Protection: 1; mode=block
< Content-Type: application/json
< content-length: 25
<
{""error"":""unknown_error""}
```

### Anything else?

Stack Trace from console log:
```
keycloak_1  | 2022-11-03 22:06:40,520 ERROR [org.keycloak.services.error.KeycloakErrorHandler] (executor-thread-0) Uncaught server error: java.lang.RuntimeException: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:116)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.verify(Pbkdf2PasswordHashProvider.java:92)
keycloak_1  |   at org.keycloak.credential.PasswordCredentialProvider.isValid(PasswordCredentialProvider.java:177)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$validate$11(LegacyUserCredentialManager.java:255)
keycloak_1  |   at java.base/java.util.Collection.removeIf(Collection.java:544)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.validate(LegacyUserCredentialManager.java:255)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$isValid$0(LegacyUserCredentialManager.java:76)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)
keycloak_1  |   at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1693)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.isValid(LegacyUserCredentialManager.java:76)
keycloak_1  |   at org.keycloak.models.SubjectCredentialManager.isValid(SubjectCredentialManager.java:45)
keycloak_1  |   at org.keycloak.authentication.authenticators.directgrant.ValidatePassword.authenticate(ValidatePassword.java:47)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processSingleFlowExecutionModel(DefaultAuthenticationFlow.java:446)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processFlow(DefaultAuthenticationFlow.java:250)
keycloak_1  |   at org.keycloak.authentication.AuthenticationProcessor.authenticateOnly(AuthenticationProcessor.java:1017)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.resourceOwnerPasswordCredentialsGrant(TokenEndpoint.java:627)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.processGrantRequest(TokenEndpoint.java:208)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
keycloak_1  |   at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
keycloak_1  |   at java.base/java.lang.reflect.Method.invoke(Method.java:566)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:170)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:130)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.internalInvokeOnTarget(ResourceMethodInvoker.java:660)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTargetAfterFilter(ResourceMethodInvoker.java:524)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.lambda$invokeOnTarget$2(ResourceMethodInvoker.java:474)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:476)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:434)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:192)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:152)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:183)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:141)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:32)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:492)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$invoke$4(SynchronousDispatcher.java:261)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$preprocess$0(SynchronousDispatcher.java:161)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.preprocess(SynchronousDispatcher.java:164)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:247)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.RequestDispatcher.service(RequestDispatcher.java:73)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.dispatch(VertxRequestHandler.java:151)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:82)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:42)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:84)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:71)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:430)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:408)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at org.keycloak.quarkus.runtime.integration.web.QuarkusRequestFilter.lambda$createBlockingHandler$0(QuarkusRequestFilter.java:82)
keycloak_1  |   at io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:564)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2449)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1478)
keycloak_1  |   at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)
keycloak_1  |   at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)
keycloak_1  |   at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
keycloak_1  |   at java.base/java.lang.Thread.run(Thread.java:829)
keycloak_1  | Caused by: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2.engineGenerateSecret(Unknown Source)
keycloak_1  |   at java.base/javax.crypto.SecretKeyFactory.generateSecret(SecretKeyFactory.java:338)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:111)
keycloak_1  |   ... 72 more
```",validate$11(:255,https://github.com/keycloak/keycloak
3,15336.0,"### Area

oidc

### Describe the bug

On my Dev server if I'm trying to authenicate an existing user with empty password (the user exists but the password is incorrect) I'm getting a weird error, server shows me `500 Internal Server Error`.

### Version

20.0.0

### Expected behavior

401 Unauthorized

### Actual behavior

500 Internal Server Error

### How to Reproduce?

Basically if I'm trying to do something like this (use correct client credentials in Basic Authorization):
```
curl -v --location --request POST 'http://192.168.99.104:8180/realms/quiz/protocol/openid-connect/token' \
--header 'Authorization: Basic cXVpei1zZXJ2aWNlOjdjNzk1MzlkLTBkYTktNDk0YS05OWIyLTVkZjdlN2M2NTBhZg==' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'client_id=quiz-service' \
--data-urlencode 'username=quiz_user' \
--data-urlencode 'password=' \
--data-urlencode 'grant_type=password'
```
I'm getting this:
```
< HTTP/1.1 500 Internal Server Error
< Referrer-Policy: no-referrer
< X-Frame-Options: SAMEORIGIN
< Strict-Transport-Security: max-age=31536000; includeSubDomains
< Cache-Control: no-store
< X-Content-Type-Options: nosniff
< Pragma: no-cache
< X-XSS-Protection: 1; mode=block
< Content-Type: application/json
< content-length: 25
<
{""error"":""unknown_error""}
```

### Anything else?

Stack Trace from console log:
```
keycloak_1  | 2022-11-03 22:06:40,520 ERROR [org.keycloak.services.error.KeycloakErrorHandler] (executor-thread-0) Uncaught server error: java.lang.RuntimeException: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:116)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.verify(Pbkdf2PasswordHashProvider.java:92)
keycloak_1  |   at org.keycloak.credential.PasswordCredentialProvider.isValid(PasswordCredentialProvider.java:177)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$validate$11(LegacyUserCredentialManager.java:255)
keycloak_1  |   at java.base/java.util.Collection.removeIf(Collection.java:544)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.validate(LegacyUserCredentialManager.java:255)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$isValid$0(LegacyUserCredentialManager.java:76)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)
keycloak_1  |   at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1693)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.isValid(LegacyUserCredentialManager.java:76)
keycloak_1  |   at org.keycloak.models.SubjectCredentialManager.isValid(SubjectCredentialManager.java:45)
keycloak_1  |   at org.keycloak.authentication.authenticators.directgrant.ValidatePassword.authenticate(ValidatePassword.java:47)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processSingleFlowExecutionModel(DefaultAuthenticationFlow.java:446)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processFlow(DefaultAuthenticationFlow.java:250)
keycloak_1  |   at org.keycloak.authentication.AuthenticationProcessor.authenticateOnly(AuthenticationProcessor.java:1017)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.resourceOwnerPasswordCredentialsGrant(TokenEndpoint.java:627)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.processGrantRequest(TokenEndpoint.java:208)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
keycloak_1  |   at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
keycloak_1  |   at java.base/java.lang.reflect.Method.invoke(Method.java:566)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:170)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:130)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.internalInvokeOnTarget(ResourceMethodInvoker.java:660)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTargetAfterFilter(ResourceMethodInvoker.java:524)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.lambda$invokeOnTarget$2(ResourceMethodInvoker.java:474)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:476)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:434)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:192)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:152)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:183)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:141)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:32)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:492)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$invoke$4(SynchronousDispatcher.java:261)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$preprocess$0(SynchronousDispatcher.java:161)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.preprocess(SynchronousDispatcher.java:164)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:247)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.RequestDispatcher.service(RequestDispatcher.java:73)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.dispatch(VertxRequestHandler.java:151)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:82)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:42)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:84)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:71)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:430)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:408)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at org.keycloak.quarkus.runtime.integration.web.QuarkusRequestFilter.lambda$createBlockingHandler$0(QuarkusRequestFilter.java:82)
keycloak_1  |   at io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:564)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2449)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1478)
keycloak_1  |   at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)
keycloak_1  |   at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)
keycloak_1  |   at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
keycloak_1  |   at java.base/java.lang.Thread.run(Thread.java:829)
keycloak_1  | Caused by: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2.engineGenerateSecret(Unknown Source)
keycloak_1  |   at java.base/javax.crypto.SecretKeyFactory.generateSecret(SecretKeyFactory.java:338)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:111)
keycloak_1  |   ... 72 more
```",invokeOnTarget$2(:474,https://github.com/keycloak/keycloak
4,15336.0,"### Area

oidc

### Describe the bug

On my Dev server if I'm trying to authenicate an existing user with empty password (the user exists but the password is incorrect) I'm getting a weird error, server shows me `500 Internal Server Error`.

### Version

20.0.0

### Expected behavior

401 Unauthorized

### Actual behavior

500 Internal Server Error

### How to Reproduce?

Basically if I'm trying to do something like this (use correct client credentials in Basic Authorization):
```
curl -v --location --request POST 'http://192.168.99.104:8180/realms/quiz/protocol/openid-connect/token' \
--header 'Authorization: Basic cXVpei1zZXJ2aWNlOjdjNzk1MzlkLTBkYTktNDk0YS05OWIyLTVkZjdlN2M2NTBhZg==' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'client_id=quiz-service' \
--data-urlencode 'username=quiz_user' \
--data-urlencode 'password=' \
--data-urlencode 'grant_type=password'
```
I'm getting this:
```
< HTTP/1.1 500 Internal Server Error
< Referrer-Policy: no-referrer
< X-Frame-Options: SAMEORIGIN
< Strict-Transport-Security: max-age=31536000; includeSubDomains
< Cache-Control: no-store
< X-Content-Type-Options: nosniff
< Pragma: no-cache
< X-XSS-Protection: 1; mode=block
< Content-Type: application/json
< content-length: 25
<
{""error"":""unknown_error""}
```

### Anything else?

Stack Trace from console log:
```
keycloak_1  | 2022-11-03 22:06:40,520 ERROR [org.keycloak.services.error.KeycloakErrorHandler] (executor-thread-0) Uncaught server error: java.lang.RuntimeException: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:116)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.verify(Pbkdf2PasswordHashProvider.java:92)
keycloak_1  |   at org.keycloak.credential.PasswordCredentialProvider.isValid(PasswordCredentialProvider.java:177)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$validate$11(LegacyUserCredentialManager.java:255)
keycloak_1  |   at java.base/java.util.Collection.removeIf(Collection.java:544)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.validate(LegacyUserCredentialManager.java:255)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$isValid$0(LegacyUserCredentialManager.java:76)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)
keycloak_1  |   at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1693)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.isValid(LegacyUserCredentialManager.java:76)
keycloak_1  |   at org.keycloak.models.SubjectCredentialManager.isValid(SubjectCredentialManager.java:45)
keycloak_1  |   at org.keycloak.authentication.authenticators.directgrant.ValidatePassword.authenticate(ValidatePassword.java:47)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processSingleFlowExecutionModel(DefaultAuthenticationFlow.java:446)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processFlow(DefaultAuthenticationFlow.java:250)
keycloak_1  |   at org.keycloak.authentication.AuthenticationProcessor.authenticateOnly(AuthenticationProcessor.java:1017)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.resourceOwnerPasswordCredentialsGrant(TokenEndpoint.java:627)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.processGrantRequest(TokenEndpoint.java:208)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
keycloak_1  |   at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
keycloak_1  |   at java.base/java.lang.reflect.Method.invoke(Method.java:566)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:170)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:130)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.internalInvokeOnTarget(ResourceMethodInvoker.java:660)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTargetAfterFilter(ResourceMethodInvoker.java:524)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.lambda$invokeOnTarget$2(ResourceMethodInvoker.java:474)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:476)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:434)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:192)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:152)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:183)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:141)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:32)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:492)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$invoke$4(SynchronousDispatcher.java:261)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$preprocess$0(SynchronousDispatcher.java:161)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.preprocess(SynchronousDispatcher.java:164)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:247)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.RequestDispatcher.service(RequestDispatcher.java:73)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.dispatch(VertxRequestHandler.java:151)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:82)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:42)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:84)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:71)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:430)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:408)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at org.keycloak.quarkus.runtime.integration.web.QuarkusRequestFilter.lambda$createBlockingHandler$0(QuarkusRequestFilter.java:82)
keycloak_1  |   at io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:564)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2449)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1478)
keycloak_1  |   at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)
keycloak_1  |   at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)
keycloak_1  |   at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
keycloak_1  |   at java.base/java.lang.Thread.run(Thread.java:829)
keycloak_1  | Caused by: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2.engineGenerateSecret(Unknown Source)
keycloak_1  |   at java.base/javax.crypto.SecretKeyFactory.generateSecret(SecretKeyFactory.java:338)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:111)
keycloak_1  |   ... 72 more
```",preprocess$0(:161,https://github.com/keycloak/keycloak
5,15336.0,"### Area

oidc

### Describe the bug

On my Dev server if I'm trying to authenicate an existing user with empty password (the user exists but the password is incorrect) I'm getting a weird error, server shows me `500 Internal Server Error`.

### Version

20.0.0

### Expected behavior

401 Unauthorized

### Actual behavior

500 Internal Server Error

### How to Reproduce?

Basically if I'm trying to do something like this (use correct client credentials in Basic Authorization):
```
curl -v --location --request POST 'http://192.168.99.104:8180/realms/quiz/protocol/openid-connect/token' \
--header 'Authorization: Basic cXVpei1zZXJ2aWNlOjdjNzk1MzlkLTBkYTktNDk0YS05OWIyLTVkZjdlN2M2NTBhZg==' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'client_id=quiz-service' \
--data-urlencode 'username=quiz_user' \
--data-urlencode 'password=' \
--data-urlencode 'grant_type=password'
```
I'm getting this:
```
< HTTP/1.1 500 Internal Server Error
< Referrer-Policy: no-referrer
< X-Frame-Options: SAMEORIGIN
< Strict-Transport-Security: max-age=31536000; includeSubDomains
< Cache-Control: no-store
< X-Content-Type-Options: nosniff
< Pragma: no-cache
< X-XSS-Protection: 1; mode=block
< Content-Type: application/json
< content-length: 25
<
{""error"":""unknown_error""}
```

### Anything else?

Stack Trace from console log:
```
keycloak_1  | 2022-11-03 22:06:40,520 ERROR [org.keycloak.services.error.KeycloakErrorHandler] (executor-thread-0) Uncaught server error: java.lang.RuntimeException: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:116)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.verify(Pbkdf2PasswordHashProvider.java:92)
keycloak_1  |   at org.keycloak.credential.PasswordCredentialProvider.isValid(PasswordCredentialProvider.java:177)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$validate$11(LegacyUserCredentialManager.java:255)
keycloak_1  |   at java.base/java.util.Collection.removeIf(Collection.java:544)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.validate(LegacyUserCredentialManager.java:255)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$isValid$0(LegacyUserCredentialManager.java:76)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)
keycloak_1  |   at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1693)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.isValid(LegacyUserCredentialManager.java:76)
keycloak_1  |   at org.keycloak.models.SubjectCredentialManager.isValid(SubjectCredentialManager.java:45)
keycloak_1  |   at org.keycloak.authentication.authenticators.directgrant.ValidatePassword.authenticate(ValidatePassword.java:47)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processSingleFlowExecutionModel(DefaultAuthenticationFlow.java:446)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processFlow(DefaultAuthenticationFlow.java:250)
keycloak_1  |   at org.keycloak.authentication.AuthenticationProcessor.authenticateOnly(AuthenticationProcessor.java:1017)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.resourceOwnerPasswordCredentialsGrant(TokenEndpoint.java:627)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.processGrantRequest(TokenEndpoint.java:208)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
keycloak_1  |   at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
keycloak_1  |   at java.base/java.lang.reflect.Method.invoke(Method.java:566)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:170)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:130)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.internalInvokeOnTarget(ResourceMethodInvoker.java:660)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTargetAfterFilter(ResourceMethodInvoker.java:524)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.lambda$invokeOnTarget$2(ResourceMethodInvoker.java:474)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:476)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:434)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:192)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:152)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:183)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:141)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:32)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:492)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$invoke$4(SynchronousDispatcher.java:261)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$preprocess$0(SynchronousDispatcher.java:161)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.preprocess(SynchronousDispatcher.java:164)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:247)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.RequestDispatcher.service(RequestDispatcher.java:73)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.dispatch(VertxRequestHandler.java:151)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:82)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:42)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:84)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:71)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:430)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:408)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at org.keycloak.quarkus.runtime.integration.web.QuarkusRequestFilter.lambda$createBlockingHandler$0(QuarkusRequestFilter.java:82)
keycloak_1  |   at io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:564)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2449)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1478)
keycloak_1  |   at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)
keycloak_1  |   at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)
keycloak_1  |   at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
keycloak_1  |   at java.base/java.lang.Thread.run(Thread.java:829)
keycloak_1  | Caused by: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2.engineGenerateSecret(Unknown Source)
keycloak_1  |   at java.base/javax.crypto.SecretKeyFactory.generateSecret(SecretKeyFactory.java:338)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:111)
keycloak_1  |   ... 72 more
```",grant_type=password,https://github.com/keycloak/keycloak
6,15336.0,"### Area

oidc

### Describe the bug

On my Dev server if I'm trying to authenicate an existing user with empty password (the user exists but the password is incorrect) I'm getting a weird error, server shows me `500 Internal Server Error`.

### Version

20.0.0

### Expected behavior

401 Unauthorized

### Actual behavior

500 Internal Server Error

### How to Reproduce?

Basically if I'm trying to do something like this (use correct client credentials in Basic Authorization):
```
curl -v --location --request POST 'http://192.168.99.104:8180/realms/quiz/protocol/openid-connect/token' \
--header 'Authorization: Basic cXVpei1zZXJ2aWNlOjdjNzk1MzlkLTBkYTktNDk0YS05OWIyLTVkZjdlN2M2NTBhZg==' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'client_id=quiz-service' \
--data-urlencode 'username=quiz_user' \
--data-urlencode 'password=' \
--data-urlencode 'grant_type=password'
```
I'm getting this:
```
< HTTP/1.1 500 Internal Server Error
< Referrer-Policy: no-referrer
< X-Frame-Options: SAMEORIGIN
< Strict-Transport-Security: max-age=31536000; includeSubDomains
< Cache-Control: no-store
< X-Content-Type-Options: nosniff
< Pragma: no-cache
< X-XSS-Protection: 1; mode=block
< Content-Type: application/json
< content-length: 25
<
{""error"":""unknown_error""}
```

### Anything else?

Stack Trace from console log:
```
keycloak_1  | 2022-11-03 22:06:40,520 ERROR [org.keycloak.services.error.KeycloakErrorHandler] (executor-thread-0) Uncaught server error: java.lang.RuntimeException: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:116)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.verify(Pbkdf2PasswordHashProvider.java:92)
keycloak_1  |   at org.keycloak.credential.PasswordCredentialProvider.isValid(PasswordCredentialProvider.java:177)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$validate$11(LegacyUserCredentialManager.java:255)
keycloak_1  |   at java.base/java.util.Collection.removeIf(Collection.java:544)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.validate(LegacyUserCredentialManager.java:255)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$isValid$0(LegacyUserCredentialManager.java:76)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)
keycloak_1  |   at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1693)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.isValid(LegacyUserCredentialManager.java:76)
keycloak_1  |   at org.keycloak.models.SubjectCredentialManager.isValid(SubjectCredentialManager.java:45)
keycloak_1  |   at org.keycloak.authentication.authenticators.directgrant.ValidatePassword.authenticate(ValidatePassword.java:47)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processSingleFlowExecutionModel(DefaultAuthenticationFlow.java:446)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processFlow(DefaultAuthenticationFlow.java:250)
keycloak_1  |   at org.keycloak.authentication.AuthenticationProcessor.authenticateOnly(AuthenticationProcessor.java:1017)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.resourceOwnerPasswordCredentialsGrant(TokenEndpoint.java:627)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.processGrantRequest(TokenEndpoint.java:208)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
keycloak_1  |   at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
keycloak_1  |   at java.base/java.lang.reflect.Method.invoke(Method.java:566)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:170)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:130)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.internalInvokeOnTarget(ResourceMethodInvoker.java:660)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTargetAfterFilter(ResourceMethodInvoker.java:524)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.lambda$invokeOnTarget$2(ResourceMethodInvoker.java:474)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:476)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:434)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:192)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:152)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:183)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:141)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:32)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:492)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$invoke$4(SynchronousDispatcher.java:261)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$preprocess$0(SynchronousDispatcher.java:161)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.preprocess(SynchronousDispatcher.java:164)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:247)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.RequestDispatcher.service(RequestDispatcher.java:73)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.dispatch(VertxRequestHandler.java:151)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:82)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:42)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:84)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:71)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:430)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:408)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at org.keycloak.quarkus.runtime.integration.web.QuarkusRequestFilter.lambda$createBlockingHandler$0(QuarkusRequestFilter.java:82)
keycloak_1  |   at io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:564)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2449)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1478)
keycloak_1  |   at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)
keycloak_1  |   at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)
keycloak_1  |   at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
keycloak_1  |   at java.base/java.lang.Thread.run(Thread.java:829)
keycloak_1  | Caused by: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2.engineGenerateSecret(Unknown Source)
keycloak_1  |   at java.base/javax.crypto.SecretKeyFactory.generateSecret(SecretKeyFactory.java:338)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:111)
keycloak_1  |   ... 72 more
```",password,https://github.com/keycloak/keycloak
7,15336.0,"### Area

oidc

### Describe the bug

On my Dev server if I'm trying to authenicate an existing user with empty password (the user exists but the password is incorrect) I'm getting a weird error, server shows me `500 Internal Server Error`.

### Version

20.0.0

### Expected behavior

401 Unauthorized

### Actual behavior

500 Internal Server Error

### How to Reproduce?

Basically if I'm trying to do something like this (use correct client credentials in Basic Authorization):
```
curl -v --location --request POST 'http://192.168.99.104:8180/realms/quiz/protocol/openid-connect/token' \
--header 'Authorization: Basic cXVpei1zZXJ2aWNlOjdjNzk1MzlkLTBkYTktNDk0YS05OWIyLTVkZjdlN2M2NTBhZg==' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'client_id=quiz-service' \
--data-urlencode 'username=quiz_user' \
--data-urlencode 'password=' \
--data-urlencode 'grant_type=password'
```
I'm getting this:
```
< HTTP/1.1 500 Internal Server Error
< Referrer-Policy: no-referrer
< X-Frame-Options: SAMEORIGIN
< Strict-Transport-Security: max-age=31536000; includeSubDomains
< Cache-Control: no-store
< X-Content-Type-Options: nosniff
< Pragma: no-cache
< X-XSS-Protection: 1; mode=block
< Content-Type: application/json
< content-length: 25
<
{""error"":""unknown_error""}
```

### Anything else?

Stack Trace from console log:
```
keycloak_1  | 2022-11-03 22:06:40,520 ERROR [org.keycloak.services.error.KeycloakErrorHandler] (executor-thread-0) Uncaught server error: java.lang.RuntimeException: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:116)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.verify(Pbkdf2PasswordHashProvider.java:92)
keycloak_1  |   at org.keycloak.credential.PasswordCredentialProvider.isValid(PasswordCredentialProvider.java:177)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$validate$11(LegacyUserCredentialManager.java:255)
keycloak_1  |   at java.base/java.util.Collection.removeIf(Collection.java:544)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.validate(LegacyUserCredentialManager.java:255)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$isValid$0(LegacyUserCredentialManager.java:76)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)
keycloak_1  |   at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1693)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.isValid(LegacyUserCredentialManager.java:76)
keycloak_1  |   at org.keycloak.models.SubjectCredentialManager.isValid(SubjectCredentialManager.java:45)
keycloak_1  |   at org.keycloak.authentication.authenticators.directgrant.ValidatePassword.authenticate(ValidatePassword.java:47)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processSingleFlowExecutionModel(DefaultAuthenticationFlow.java:446)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processFlow(DefaultAuthenticationFlow.java:250)
keycloak_1  |   at org.keycloak.authentication.AuthenticationProcessor.authenticateOnly(AuthenticationProcessor.java:1017)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.resourceOwnerPasswordCredentialsGrant(TokenEndpoint.java:627)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.processGrantRequest(TokenEndpoint.java:208)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
keycloak_1  |   at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
keycloak_1  |   at java.base/java.lang.reflect.Method.invoke(Method.java:566)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:170)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:130)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.internalInvokeOnTarget(ResourceMethodInvoker.java:660)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTargetAfterFilter(ResourceMethodInvoker.java:524)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.lambda$invokeOnTarget$2(ResourceMethodInvoker.java:474)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:476)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:434)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:192)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:152)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:183)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:141)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:32)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:492)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$invoke$4(SynchronousDispatcher.java:261)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$preprocess$0(SynchronousDispatcher.java:161)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.preprocess(SynchronousDispatcher.java:164)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:247)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.RequestDispatcher.service(RequestDispatcher.java:73)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.dispatch(VertxRequestHandler.java:151)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:82)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:42)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:84)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:71)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:430)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:408)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at org.keycloak.quarkus.runtime.integration.web.QuarkusRequestFilter.lambda$createBlockingHandler$0(QuarkusRequestFilter.java:82)
keycloak_1  |   at io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:564)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2449)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1478)
keycloak_1  |   at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)
keycloak_1  |   at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)
keycloak_1  |   at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
keycloak_1  |   at java.base/java.lang.Thread.run(Thread.java:829)
keycloak_1  | Caused by: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2.engineGenerateSecret(Unknown Source)
keycloak_1  |   at java.base/javax.crypto.SecretKeyFactory.generateSecret(SecretKeyFactory.java:338)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:111)
keycloak_1  |   ... 72 more
```",incorrect,https://github.com/keycloak/keycloak
8,15336.0,"### Area

oidc

### Describe the bug

On my Dev server if I'm trying to authenicate an existing user with empty password (the user exists but the password is incorrect) I'm getting a weird error, server shows me `500 Internal Server Error`.

### Version

20.0.0

### Expected behavior

401 Unauthorized

### Actual behavior

500 Internal Server Error

### How to Reproduce?

Basically if I'm trying to do something like this (use correct client credentials in Basic Authorization):
```
curl -v --location --request POST 'http://192.168.99.104:8180/realms/quiz/protocol/openid-connect/token' \
--header 'Authorization: Basic cXVpei1zZXJ2aWNlOjdjNzk1MzlkLTBkYTktNDk0YS05OWIyLTVkZjdlN2M2NTBhZg==' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'client_id=quiz-service' \
--data-urlencode 'username=quiz_user' \
--data-urlencode 'password=' \
--data-urlencode 'grant_type=password'
```
I'm getting this:
```
< HTTP/1.1 500 Internal Server Error
< Referrer-Policy: no-referrer
< X-Frame-Options: SAMEORIGIN
< Strict-Transport-Security: max-age=31536000; includeSubDomains
< Cache-Control: no-store
< X-Content-Type-Options: nosniff
< Pragma: no-cache
< X-XSS-Protection: 1; mode=block
< Content-Type: application/json
< content-length: 25
<
{""error"":""unknown_error""}
```

### Anything else?

Stack Trace from console log:
```
keycloak_1  | 2022-11-03 22:06:40,520 ERROR [org.keycloak.services.error.KeycloakErrorHandler] (executor-thread-0) Uncaught server error: java.lang.RuntimeException: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:116)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.verify(Pbkdf2PasswordHashProvider.java:92)
keycloak_1  |   at org.keycloak.credential.PasswordCredentialProvider.isValid(PasswordCredentialProvider.java:177)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$validate$11(LegacyUserCredentialManager.java:255)
keycloak_1  |   at java.base/java.util.Collection.removeIf(Collection.java:544)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.validate(LegacyUserCredentialManager.java:255)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.lambda$isValid$0(LegacyUserCredentialManager.java:76)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)
keycloak_1  |   at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1693)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
keycloak_1  |   at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
keycloak_1  |   at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
keycloak_1  |   at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
keycloak_1  |   at org.keycloak.credential.LegacyUserCredentialManager.isValid(LegacyUserCredentialManager.java:76)
keycloak_1  |   at org.keycloak.models.SubjectCredentialManager.isValid(SubjectCredentialManager.java:45)
keycloak_1  |   at org.keycloak.authentication.authenticators.directgrant.ValidatePassword.authenticate(ValidatePassword.java:47)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processSingleFlowExecutionModel(DefaultAuthenticationFlow.java:446)
keycloak_1  |   at org.keycloak.authentication.DefaultAuthenticationFlow.processFlow(DefaultAuthenticationFlow.java:250)
keycloak_1  |   at org.keycloak.authentication.AuthenticationProcessor.authenticateOnly(AuthenticationProcessor.java:1017)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.resourceOwnerPasswordCredentialsGrant(TokenEndpoint.java:627)
keycloak_1  |   at org.keycloak.protocol.oidc.endpoints.TokenEndpoint.processGrantRequest(TokenEndpoint.java:208)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
keycloak_1  |   at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
keycloak_1  |   at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
keycloak_1  |   at java.base/java.lang.reflect.Method.invoke(Method.java:566)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:170)
keycloak_1  |   at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:130)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.internalInvokeOnTarget(ResourceMethodInvoker.java:660)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTargetAfterFilter(ResourceMethodInvoker.java:524)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.lambda$invokeOnTarget$2(ResourceMethodInvoker.java:474)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:476)
keycloak_1  |   at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:434)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:192)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:152)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invokeOnTargetObject(ResourceLocatorInvoker.java:183)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:141)
keycloak_1  |   at org.jboss.resteasy.core.ResourceLocatorInvoker.invoke(ResourceLocatorInvoker.java:32)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:492)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$invoke$4(SynchronousDispatcher.java:261)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.lambda$preprocess$0(SynchronousDispatcher.java:161)
keycloak_1  |   at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:364)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.preprocess(SynchronousDispatcher.java:164)
keycloak_1  |   at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:247)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.RequestDispatcher.service(RequestDispatcher.java:73)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.dispatch(VertxRequestHandler.java:151)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:82)
keycloak_1  |   at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.handle(VertxRequestHandler.java:42)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:84)
keycloak_1  |   at io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:71)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:430)
keycloak_1  |   at io.quarkus.vertx.http.runtime.VertxHttpRecorder$6.handle(VertxHttpRecorder.java:408)
keycloak_1  |   at io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:173)
keycloak_1  |   at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:140)
keycloak_1  |   at org.keycloak.quarkus.runtime.integration.web.QuarkusRequestFilter.lambda$createBlockingHandler$0(QuarkusRequestFilter.java:82)
keycloak_1  |   at io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:564)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2449)
keycloak_1  |   at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1478)
keycloak_1  |   at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)
keycloak_1  |   at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)
keycloak_1  |   at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
keycloak_1  |   at java.base/java.lang.Thread.run(Thread.java:829)
keycloak_1  | Caused by: java.lang.IllegalArgumentException: password empty
keycloak_1  |   at org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2.engineGenerateSecret(Unknown Source)
keycloak_1  |   at java.base/javax.crypto.SecretKeyFactory.generateSecret(SecretKeyFactory.java:338)
keycloak_1  |   at org.keycloak.credential.hash.Pbkdf2PasswordHashProvider.encodedCredential(Pbkdf2PasswordHashProvider.java:111)
keycloak_1  |   ... 72 more
```",keycloak,https://github.com/keycloak/keycloak
9,12438.0,"### Describe the bug

I have followed directions according to the guide (https://www.keycloak.org/docs/latest/securing_apps/#direct-naked-impersonation), but still cannot get it to work. After researching, seems like others can't get it to work neither (https://keycloak.discourse.group/t/direct-naked-impersonation/6887/3) and unfortunately I wasn't able to find a possible solution. 

Details about my Keycloak installation:

Version: 18
Installed using containers (AWS ECS) and using this guide: https://www.keycloak.org/server/containers
SSL enabled
token-exchange and admin-fine-grained-authz features enabled

Example request:
```
curl --location --request POST 'https://example_domain.com/realms/my-realm/protocol/openid-connect/token' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'grant_type=urn:ietf:params:oauth:grant-type:token-exchange' \
--data-urlencode 'client_id=my-client' \
--data-urlencode 'client_secret=iXwJB01N5u0WcTEMMcGA1KvUWm5VA9HN' \
--data-urlencode 'requested_subject=test_user'
```

Example response:
```
403
{
    ""error"": ""access_denied"",
    ""error_description"": ""Client not allowed to exchange""
}
```

Has anybody experienced the same or know if there's anything else to configure or may it be a bug?

### Version

18

### Expected behavior

_No response_

### Actual behavior

_No response_

### How to Reproduce?

_No response_

### Anything else?

_No response_",client_id=my-client,https://github.com/keycloak/keycloak
10,12438.0,"### Describe the bug

I have followed directions according to the guide (https://www.keycloak.org/docs/latest/securing_apps/#direct-naked-impersonation), but still cannot get it to work. After researching, seems like others can't get it to work neither (https://keycloak.discourse.group/t/direct-naked-impersonation/6887/3) and unfortunately I wasn't able to find a possible solution. 

Details about my Keycloak installation:

Version: 18
Installed using containers (AWS ECS) and using this guide: https://www.keycloak.org/server/containers
SSL enabled
token-exchange and admin-fine-grained-authz features enabled

Example request:
```
curl --location --request POST 'https://example_domain.com/realms/my-realm/protocol/openid-connect/token' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'grant_type=urn:ietf:params:oauth:grant-type:token-exchange' \
--data-urlencode 'client_id=my-client' \
--data-urlencode 'client_secret=iXwJB01N5u0WcTEMMcGA1KvUWm5VA9HN' \
--data-urlencode 'requested_subject=test_user'
```

Example response:
```
403
{
    ""error"": ""access_denied"",
    ""error_description"": ""Client not allowed to exchange""
}
```

Has anybody experienced the same or know if there's anything else to configure or may it be a bug?

### Version

18

### Expected behavior

_No response_

### Actual behavior

_No response_

### How to Reproduce?

_No response_

### Anything else?

_No response_",fine-grained-authz,https://github.com/keycloak/keycloak
11,12438.0,"### Describe the bug

I have followed directions according to the guide (https://www.keycloak.org/docs/latest/securing_apps/#direct-naked-impersonation), but still cannot get it to work. After researching, seems like others can't get it to work neither (https://keycloak.discourse.group/t/direct-naked-impersonation/6887/3) and unfortunately I wasn't able to find a possible solution. 

Details about my Keycloak installation:

Version: 18
Installed using containers (AWS ECS) and using this guide: https://www.keycloak.org/server/containers
SSL enabled
token-exchange and admin-fine-grained-authz features enabled

Example request:
```
curl --location --request POST 'https://example_domain.com/realms/my-realm/protocol/openid-connect/token' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'grant_type=urn:ietf:params:oauth:grant-type:token-exchange' \
--data-urlencode 'client_id=my-client' \
--data-urlencode 'client_secret=iXwJB01N5u0WcTEMMcGA1KvUWm5VA9HN' \
--data-urlencode 'requested_subject=test_user'
```

Example response:
```
403
{
    ""error"": ""access_denied"",
    ""error_description"": ""Client not allowed to exchange""
}
```

Has anybody experienced the same or know if there's anything else to configure or may it be a bug?

### Version

18

### Expected behavior

_No response_

### Actual behavior

_No response_

### How to Reproduce?

_No response_

### Anything else?

_No response_",iXwJB01N5u0WcTEMMcGA1KvUWm5VA9HN,https://github.com/keycloak/keycloak
12,12162.0,"### Describe the bug

OIDC client authentication uses different error messages in the case when client does not exists and/or in the case when client is disabled and/or in the case when client is enabled, but bad client credentials are used. This allows ""client enumeration"" and also error messages returned are not 100% aligned with the OAuth2/OIDC specifications, so will be good to fix this IMO .

### Current behaviour

I am sending this request:
```
curl -d ""client_id=account1"" -d client_secret=wDVOYAWe8R0LxkVGe1MOI5PcuVyWlZ14 -d ""username=admin"" -d ""password=admin"" -d ""grant_type=password"" ""http://localhost:8081/auth/realms/master/protocol/openid-connect/token""
```

1. In case the client `account1` does not exists, the response is:
```
{""error"":""invalid_client"",""error_description"":""Invalid client credentials""}
```

2. In case the client `account1` exists, but the client secret is incorrect, the response is:
```
{""error"":""unauthorized_client"",""error_description"":""Invalid client secret""}
```

3. In case the client `account1` exists, but is disabled, the response is:
```
{""error"":""unauthorized_client"",""error_description"":""Invalid client credentials""}
```

### OAuth2 specification

I've checked the OAuth2 specification https://datatracker.ietf.org/doc/html/rfc6749#section-5.2 . According to the specification, the error ""unauthorized_client"" should be returned just when client is not authorized for the specified grant type. It should be never returned when client authentication failed (which is what we are doing right now).

### Fix suggestion

I suggest to change the logic like this:

- client_id parameter missing: Return error ""invalid_request"" . This is ok per OAuth2 specification. Same applies when request is otherwise malformed (EG. Contains multiple client authentication methods)

For all the other cases below, we can return the generic error to hide the reason:
```
{""error"":""invalid_client"",""error_description"":""Invalid client or Invalid client credentials""} 
 ```

However we should differentiate the cases below in the error event, which is thrown to event SPI. The cases are:

- Case when ""client_id"" points to non-existing client
- Case when ""client_secret"" is missing as parameter and ""Authorization"" header is missing as well
- Case when client exists, but is disabled
- Case when client secret is invalid
- Case when client uses different client authentication than the default ""Client secret"", but invalid client credentials are provided

When refactoring this, we should check that the ""framework"", which triggers client authentication, checks that client is enabled or not. Right now, I see that there is check in the client authenticator itself - https://github.com/keycloak/keycloak/blob/18.0.0/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java#L113-L115 , which is likely not very great as in the case when there is alternative client authentication method and the ""Client Authenticator implementation"" forget to check the client enablement status, it might be possible to authenticate with disabled client, which is incorrect.

### Version

18.0.0
",wDVOYAWe8R0LxkVGe1MOI5PcuVyWlZ14,https://github.com/keycloak/keycloak
13,12162.0,"### Describe the bug

OIDC client authentication uses different error messages in the case when client does not exists and/or in the case when client is disabled and/or in the case when client is enabled, but bad client credentials are used. This allows ""client enumeration"" and also error messages returned are not 100% aligned with the OAuth2/OIDC specifications, so will be good to fix this IMO .

### Current behaviour

I am sending this request:
```
curl -d ""client_id=account1"" -d client_secret=wDVOYAWe8R0LxkVGe1MOI5PcuVyWlZ14 -d ""username=admin"" -d ""password=admin"" -d ""grant_type=password"" ""http://localhost:8081/auth/realms/master/protocol/openid-connect/token""
```

1. In case the client `account1` does not exists, the response is:
```
{""error"":""invalid_client"",""error_description"":""Invalid client credentials""}
```

2. In case the client `account1` exists, but the client secret is incorrect, the response is:
```
{""error"":""unauthorized_client"",""error_description"":""Invalid client secret""}
```

3. In case the client `account1` exists, but is disabled, the response is:
```
{""error"":""unauthorized_client"",""error_description"":""Invalid client credentials""}
```

### OAuth2 specification

I've checked the OAuth2 specification https://datatracker.ietf.org/doc/html/rfc6749#section-5.2 . According to the specification, the error ""unauthorized_client"" should be returned just when client is not authorized for the specified grant type. It should be never returned when client authentication failed (which is what we are doing right now).

### Fix suggestion

I suggest to change the logic like this:

- client_id parameter missing: Return error ""invalid_request"" . This is ok per OAuth2 specification. Same applies when request is otherwise malformed (EG. Contains multiple client authentication methods)

For all the other cases below, we can return the generic error to hide the reason:
```
{""error"":""invalid_client"",""error_description"":""Invalid client or Invalid client credentials""} 
 ```

However we should differentiate the cases below in the error event, which is thrown to event SPI. The cases are:

- Case when ""client_id"" points to non-existing client
- Case when ""client_secret"" is missing as parameter and ""Authorization"" header is missing as well
- Case when client exists, but is disabled
- Case when client secret is invalid
- Case when client uses different client authentication than the default ""Client secret"", but invalid client credentials are provided

When refactoring this, we should check that the ""framework"", which triggers client authentication, checks that client is enabled or not. Right now, I see that there is check in the client authenticator itself - https://github.com/keycloak/keycloak/blob/18.0.0/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java#L113-L115 , which is likely not very great as in the case when there is alternative client authentication method and the ""Client Authenticator implementation"" forget to check the client enablement status, it might be possible to authenticate with disabled client, which is incorrect.

### Version

18.0.0
",grant_type=password,https://github.com/keycloak/keycloak
14,12162.0,"### Describe the bug

OIDC client authentication uses different error messages in the case when client does not exists and/or in the case when client is disabled and/or in the case when client is enabled, but bad client credentials are used. This allows ""client enumeration"" and also error messages returned are not 100% aligned with the OAuth2/OIDC specifications, so will be good to fix this IMO .

### Current behaviour

I am sending this request:
```
curl -d ""client_id=account1"" -d client_secret=wDVOYAWe8R0LxkVGe1MOI5PcuVyWlZ14 -d ""username=admin"" -d ""password=admin"" -d ""grant_type=password"" ""http://localhost:8081/auth/realms/master/protocol/openid-connect/token""
```

1. In case the client `account1` does not exists, the response is:
```
{""error"":""invalid_client"",""error_description"":""Invalid client credentials""}
```

2. In case the client `account1` exists, but the client secret is incorrect, the response is:
```
{""error"":""unauthorized_client"",""error_description"":""Invalid client secret""}
```

3. In case the client `account1` exists, but is disabled, the response is:
```
{""error"":""unauthorized_client"",""error_description"":""Invalid client credentials""}
```

### OAuth2 specification

I've checked the OAuth2 specification https://datatracker.ietf.org/doc/html/rfc6749#section-5.2 . According to the specification, the error ""unauthorized_client"" should be returned just when client is not authorized for the specified grant type. It should be never returned when client authentication failed (which is what we are doing right now).

### Fix suggestion

I suggest to change the logic like this:

- client_id parameter missing: Return error ""invalid_request"" . This is ok per OAuth2 specification. Same applies when request is otherwise malformed (EG. Contains multiple client authentication methods)

For all the other cases below, we can return the generic error to hide the reason:
```
{""error"":""invalid_client"",""error_description"":""Invalid client or Invalid client credentials""} 
 ```

However we should differentiate the cases below in the error event, which is thrown to event SPI. The cases are:

- Case when ""client_id"" points to non-existing client
- Case when ""client_secret"" is missing as parameter and ""Authorization"" header is missing as well
- Case when client exists, but is disabled
- Case when client secret is invalid
- Case when client uses different client authentication than the default ""Client secret"", but invalid client credentials are provided

When refactoring this, we should check that the ""framework"", which triggers client authentication, checks that client is enabled or not. Right now, I see that there is check in the client authenticator itself - https://github.com/keycloak/keycloak/blob/18.0.0/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java#L113-L115 , which is likely not very great as in the case when there is alternative client authentication method and the ""Client Authenticator implementation"" forget to check the client enablement status, it might be possible to authenticate with disabled client, which is incorrect.

### Version

18.0.0
","error:unauthorized_client,error_description:Invalid",https://github.com/keycloak/keycloak
15,12162.0,"### Describe the bug

OIDC client authentication uses different error messages in the case when client does not exists and/or in the case when client is disabled and/or in the case when client is enabled, but bad client credentials are used. This allows ""client enumeration"" and also error messages returned are not 100% aligned with the OAuth2/OIDC specifications, so will be good to fix this IMO .

### Current behaviour

I am sending this request:
```
curl -d ""client_id=account1"" -d client_secret=wDVOYAWe8R0LxkVGe1MOI5PcuVyWlZ14 -d ""username=admin"" -d ""password=admin"" -d ""grant_type=password"" ""http://localhost:8081/auth/realms/master/protocol/openid-connect/token""
```

1. In case the client `account1` does not exists, the response is:
```
{""error"":""invalid_client"",""error_description"":""Invalid client credentials""}
```

2. In case the client `account1` exists, but the client secret is incorrect, the response is:
```
{""error"":""unauthorized_client"",""error_description"":""Invalid client secret""}
```

3. In case the client `account1` exists, but is disabled, the response is:
```
{""error"":""unauthorized_client"",""error_description"":""Invalid client credentials""}
```

### OAuth2 specification

I've checked the OAuth2 specification https://datatracker.ietf.org/doc/html/rfc6749#section-5.2 . According to the specification, the error ""unauthorized_client"" should be returned just when client is not authorized for the specified grant type. It should be never returned when client authentication failed (which is what we are doing right now).

### Fix suggestion

I suggest to change the logic like this:

- client_id parameter missing: Return error ""invalid_request"" . This is ok per OAuth2 specification. Same applies when request is otherwise malformed (EG. Contains multiple client authentication methods)

For all the other cases below, we can return the generic error to hide the reason:
```
{""error"":""invalid_client"",""error_description"":""Invalid client or Invalid client credentials""} 
 ```

However we should differentiate the cases below in the error event, which is thrown to event SPI. The cases are:

- Case when ""client_id"" points to non-existing client
- Case when ""client_secret"" is missing as parameter and ""Authorization"" header is missing as well
- Case when client exists, but is disabled
- Case when client secret is invalid
- Case when client uses different client authentication than the default ""Client secret"", but invalid client credentials are provided

When refactoring this, we should check that the ""framework"", which triggers client authentication, checks that client is enabled or not. Right now, I see that there is check in the client authenticator itself - https://github.com/keycloak/keycloak/blob/18.0.0/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java#L113-L115 , which is likely not very great as in the case when there is alternative client authentication method and the ""Client Authenticator implementation"" forget to check the client enablement status, it might be possible to authenticate with disabled client, which is incorrect.

### Version

18.0.0
",password,https://github.com/keycloak/keycloak
16,12141.0,"### Describe the bug

We are configuring a IdentityProvider in Keycloak with PKCE enabled and PKCE method ""SH256"". In the token request Keycloak sends the parameter ""code_challenge_method"" although it's non-standard.  The Identity-Provider we configure cancels the request because the request body contains a non-standard parameter. For security reasons all requests with non-standard parameters are blocked.

Specs: 
- https://openid.net/specs/openid-connect-core-1_0.html#TokenRequest
- https://datatracker.ietf.org/doc/html/rfc7636#section-6.1


Can the parameter ""code_challenge_method"" be removed in one of the next keycloak versions?

### Version

18.0.0

### Expected behavior

Token Request should not contain parameter ""code_challenge_method""

 ```
 POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW

grant_type=authorization_code
&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
&code_verifier=random_code_verifier
```

### Actual behavior

Token Request contains parameter ""code_challenge_method""

 ```
 POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW

grant_type=authorization_code
&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
&code_verifier=random_code_verifier
&code_challenge_method=S256
```

### How to Reproduce?

_No response_

### Anything else?

_No response_",code_challenge_method,https://github.com/keycloak/keycloak
17,11897.0,"### Describe the bug

Hi,

Before version 13.0.0 a client registration through the API returned the client-secret in the response. Now, while not documented, the secret is no longer part of the registration response. The JSON field in question is called ""secret"". As you can imagine, this breaks client automatisation and forces changes to the API consumer code.

 

Can, preferably, the previous behaviour be restored? If it's not a bug, the change should be documented and certainly included in the release notes.

curl command:

 ```
curl -sSL -X POST -H 'Content-Type:application/json' -H ""Authorization: bearer $INIT_TOKEN"" \
-d ""{ \""clientId\"": \""$CLIENT_ID\"", \""serviceAccountsEnabled\"": true, \""redirectUris\"": [\""https://localhost/\""]}"" \
$KEYCLOAK_REGISTRATION_URL | jq
 ```

output in 12.0.4:

 
```json
{
  ""id"": ""4e1dd8d9-aeab-4a9f-94db-45aad46dc2d4"",
  ""clientId"": ""rapi_ccis"",
  ""surrogateAuthRequired"": false,
  ""enabled"": true,
  ""alwaysDisplayInConsole"": false,
  ""clientAuthenticatorType"": ""client-secret"",
  ""secret"": ""ca42e775-75a3-4eb4-ac91-56eb1991dee8"",
  ""registrationAccessToken"": ""eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJjZWJmNTJhNy04MmRlLTQ4OTEtYmZmZC1lNmE2MDI4ZGI4ZWUifQ.eyJleHAiOjAsImlhdCI6MTYyMTgxNjEwMSwianRpIjoiMzRhZTA5YmMtNmI2MC00ODUzLThhMjUtNmFkZWQxNDUyMjJhIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL21hc3RlciIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9tYXN0ZXIiLCJ0eXAiOiJSZWdpc3RyYXRpb25BY2Nlc3NUb2tlbiIsInJlZ2lzdHJhdGlvbl9hdXRoIjoiYXV0aGVudGljYXRlZCJ9.eyRQXCXZLo1rMIc34asoD-i9VDYtF5mniZSezc6Kjxg"",
  ""redirectUris"": [
    ""https://localhost/""
  ],
  ""webOrigins"": [
    ""https://localhost""
  ],
  ""notBefore"": 0,
  ""bearerOnly"": false,
  ""consentRequired"": false,
  ""standardFlowEnabled"": true,
  ""implicitFlowEnabled"": false,
  ""directAccessGrantsEnabled"": false,
  ""serviceAccountsEnabled"": true,
  ""publicClient"": false,
  ""frontchannelLogout"": false,
  ""protocol"": ""openid-connect"",
  ""attributes"": {},
  ""authenticationFlowBindingOverrides"": {},
  ""fullScopeAllowed"": true,
  ""nodeReRegistrationTimeout"": -1,
  ""defaultClientScopes"": [
    ""web-origins"",
    ""role_list"",
    ""roles"",
    ""profile"",
    ""email""
  ],
  ""optionalClientScopes"": [
    ""address"",
    ""phone"",
    ""openid"",
    ""offline_access"",
    ""microprofile-jwt"",
  ]
}
```

output in 13.0.0:

```json
{
  ""id"": ""80672982-e3a5-4f9c-a213-f401e5d68127"",
  ""clientId"": ""rapi_ccis"",
  ""surrogateAuthRequired"": false,
  ""enabled"": true,
  ""alwaysDisplayInConsole"": false,
  ""clientAuthenticatorType"": ""client-secret"",
  ""registrationAccessToken"": ""eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIwZmI3NjA1Zi01Y2Y3LTQwODItYjcwYy04NWVjNTVjNTZlYWUifQ.eyJleHAiOjAsImlhdCI6MTYyMTgxNjM2OSwianRpIjoiZDI3YTJmMGItNjY3NS00YWRhLWJiYWQtZmZmYWQ2YTU0YTIwIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL21hc3RlciIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9tYXN0ZXIiLCJ0eXAiOiJSZWdpc3RyYXRpb25BY2Nlc3NUb2tlbiIsInJlZ2lzdHJhdGlvbl9hdXRoIjoiYXV0aGVudGljYXRlZCJ9.DE2Tx0Z94EC72R4d8hTdAQwbdKXJ9NqV5kYdq1rY8qM"",
  ""redirectUris"": [
    ""https://localhost/""
  ],
  ""webOrigins"": [
    ""https://localhost""
  ],
  ""notBefore"": 0,
  ""bearerOnly"": false,
  ""consentRequired"": false,
  ""standardFlowEnabled"": true,
  ""implicitFlowEnabled"": false,
  ""directAccessGrantsEnabled"": false,
  ""serviceAccountsEnabled"": true,
  ""publicClient"": false,
  ""frontchannelLogout"": false,
  ""protocol"": ""openid-connect"",
  ""attributes"": {},
  ""authenticationFlowBindingOverrides"": {},
  ""fullScopeAllowed"": true,
  ""nodeReRegistrationTimeout"": -1,
  ""defaultClientScopes"": [
    ""web-origins"",
    ""roles"",
    ""profile"",
    ""email""
  ],
  ""optionalClientScopes"": [
    ""address"",
    ""phone"",
    ""openid"",
    ""offline_access"",
    ""microprofile-jwt"",
  ]
}
```

Thank you.

### Version

 13.0.0

### Expected behavior

_No response_

### Actual behavior

_No response_

### How to Reproduce?

_No response_

### Anything else?

https://issues.redhat.com/browse/KEYCLOAK-18257",ca42e775-75a3-4eb4-ac91-56eb1991dee8,https://github.com/keycloak/keycloak
18,11897.0,"### Describe the bug

Hi,

Before version 13.0.0 a client registration through the API returned the client-secret in the response. Now, while not documented, the secret is no longer part of the registration response. The JSON field in question is called ""secret"". As you can imagine, this breaks client automatisation and forces changes to the API consumer code.

 

Can, preferably, the previous behaviour be restored? If it's not a bug, the change should be documented and certainly included in the release notes.

curl command:

 ```
curl -sSL -X POST -H 'Content-Type:application/json' -H ""Authorization: bearer $INIT_TOKEN"" \
-d ""{ \""clientId\"": \""$CLIENT_ID\"", \""serviceAccountsEnabled\"": true, \""redirectUris\"": [\""https://localhost/\""]}"" \
$KEYCLOAK_REGISTRATION_URL | jq
 ```

output in 12.0.4:

 
```json
{
  ""id"": ""4e1dd8d9-aeab-4a9f-94db-45aad46dc2d4"",
  ""clientId"": ""rapi_ccis"",
  ""surrogateAuthRequired"": false,
  ""enabled"": true,
  ""alwaysDisplayInConsole"": false,
  ""clientAuthenticatorType"": ""client-secret"",
  ""secret"": ""ca42e775-75a3-4eb4-ac91-56eb1991dee8"",
  ""registrationAccessToken"": ""eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJjZWJmNTJhNy04MmRlLTQ4OTEtYmZmZC1lNmE2MDI4ZGI4ZWUifQ.eyJleHAiOjAsImlhdCI6MTYyMTgxNjEwMSwianRpIjoiMzRhZTA5YmMtNmI2MC00ODUzLThhMjUtNmFkZWQxNDUyMjJhIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL21hc3RlciIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9tYXN0ZXIiLCJ0eXAiOiJSZWdpc3RyYXRpb25BY2Nlc3NUb2tlbiIsInJlZ2lzdHJhdGlvbl9hdXRoIjoiYXV0aGVudGljYXRlZCJ9.eyRQXCXZLo1rMIc34asoD-i9VDYtF5mniZSezc6Kjxg"",
  ""redirectUris"": [
    ""https://localhost/""
  ],
  ""webOrigins"": [
    ""https://localhost""
  ],
  ""notBefore"": 0,
  ""bearerOnly"": false,
  ""consentRequired"": false,
  ""standardFlowEnabled"": true,
  ""implicitFlowEnabled"": false,
  ""directAccessGrantsEnabled"": false,
  ""serviceAccountsEnabled"": true,
  ""publicClient"": false,
  ""frontchannelLogout"": false,
  ""protocol"": ""openid-connect"",
  ""attributes"": {},
  ""authenticationFlowBindingOverrides"": {},
  ""fullScopeAllowed"": true,
  ""nodeReRegistrationTimeout"": -1,
  ""defaultClientScopes"": [
    ""web-origins"",
    ""role_list"",
    ""roles"",
    ""profile"",
    ""email""
  ],
  ""optionalClientScopes"": [
    ""address"",
    ""phone"",
    ""openid"",
    ""offline_access"",
    ""microprofile-jwt"",
  ]
}
```

output in 13.0.0:

```json
{
  ""id"": ""80672982-e3a5-4f9c-a213-f401e5d68127"",
  ""clientId"": ""rapi_ccis"",
  ""surrogateAuthRequired"": false,
  ""enabled"": true,
  ""alwaysDisplayInConsole"": false,
  ""clientAuthenticatorType"": ""client-secret"",
  ""registrationAccessToken"": ""eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIwZmI3NjA1Zi01Y2Y3LTQwODItYjcwYy04NWVjNTVjNTZlYWUifQ.eyJleHAiOjAsImlhdCI6MTYyMTgxNjM2OSwianRpIjoiZDI3YTJmMGItNjY3NS00YWRhLWJiYWQtZmZmYWQ2YTU0YTIwIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL21hc3RlciIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9tYXN0ZXIiLCJ0eXAiOiJSZWdpc3RyYXRpb25BY2Nlc3NUb2tlbiIsInJlZ2lzdHJhdGlvbl9hdXRoIjoiYXV0aGVudGljYXRlZCJ9.DE2Tx0Z94EC72R4d8hTdAQwbdKXJ9NqV5kYdq1rY8qM"",
  ""redirectUris"": [
    ""https://localhost/""
  ],
  ""webOrigins"": [
    ""https://localhost""
  ],
  ""notBefore"": 0,
  ""bearerOnly"": false,
  ""consentRequired"": false,
  ""standardFlowEnabled"": true,
  ""implicitFlowEnabled"": false,
  ""directAccessGrantsEnabled"": false,
  ""serviceAccountsEnabled"": true,
  ""publicClient"": false,
  ""frontchannelLogout"": false,
  ""protocol"": ""openid-connect"",
  ""attributes"": {},
  ""authenticationFlowBindingOverrides"": {},
  ""fullScopeAllowed"": true,
  ""nodeReRegistrationTimeout"": -1,
  ""defaultClientScopes"": [
    ""web-origins"",
    ""roles"",
    ""profile"",
    ""email""
  ],
  ""optionalClientScopes"": [
    ""address"",
    ""phone"",
    ""openid"",
    ""offline_access"",
    ""microprofile-jwt"",
  ]
}
```

Thank you.

### Version

 13.0.0

### Expected behavior

_No response_

### Actual behavior

_No response_

### How to Reproduce?

_No response_

### Anything else?

https://issues.redhat.com/browse/KEYCLOAK-18257",serviceAccountsEnabled,https://github.com/keycloak/keycloak
19,11897.0,"### Describe the bug

Hi,

Before version 13.0.0 a client registration through the API returned the client-secret in the response. Now, while not documented, the secret is no longer part of the registration response. The JSON field in question is called ""secret"". As you can imagine, this breaks client automatisation and forces changes to the API consumer code.

 

Can, preferably, the previous behaviour be restored? If it's not a bug, the change should be documented and certainly included in the release notes.

curl command:

 ```
curl -sSL -X POST -H 'Content-Type:application/json' -H ""Authorization: bearer $INIT_TOKEN"" \
-d ""{ \""clientId\"": \""$CLIENT_ID\"", \""serviceAccountsEnabled\"": true, \""redirectUris\"": [\""https://localhost/\""]}"" \
$KEYCLOAK_REGISTRATION_URL | jq
 ```

output in 12.0.4:

 
```json
{
  ""id"": ""4e1dd8d9-aeab-4a9f-94db-45aad46dc2d4"",
  ""clientId"": ""rapi_ccis"",
  ""surrogateAuthRequired"": false,
  ""enabled"": true,
  ""alwaysDisplayInConsole"": false,
  ""clientAuthenticatorType"": ""client-secret"",
  ""secret"": ""ca42e775-75a3-4eb4-ac91-56eb1991dee8"",
  ""registrationAccessToken"": ""eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJjZWJmNTJhNy04MmRlLTQ4OTEtYmZmZC1lNmE2MDI4ZGI4ZWUifQ.eyJleHAiOjAsImlhdCI6MTYyMTgxNjEwMSwianRpIjoiMzRhZTA5YmMtNmI2MC00ODUzLThhMjUtNmFkZWQxNDUyMjJhIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL21hc3RlciIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9tYXN0ZXIiLCJ0eXAiOiJSZWdpc3RyYXRpb25BY2Nlc3NUb2tlbiIsInJlZ2lzdHJhdGlvbl9hdXRoIjoiYXV0aGVudGljYXRlZCJ9.eyRQXCXZLo1rMIc34asoD-i9VDYtF5mniZSezc6Kjxg"",
  ""redirectUris"": [
    ""https://localhost/""
  ],
  ""webOrigins"": [
    ""https://localhost""
  ],
  ""notBefore"": 0,
  ""bearerOnly"": false,
  ""consentRequired"": false,
  ""standardFlowEnabled"": true,
  ""implicitFlowEnabled"": false,
  ""directAccessGrantsEnabled"": false,
  ""serviceAccountsEnabled"": true,
  ""publicClient"": false,
  ""frontchannelLogout"": false,
  ""protocol"": ""openid-connect"",
  ""attributes"": {},
  ""authenticationFlowBindingOverrides"": {},
  ""fullScopeAllowed"": true,
  ""nodeReRegistrationTimeout"": -1,
  ""defaultClientScopes"": [
    ""web-origins"",
    ""role_list"",
    ""roles"",
    ""profile"",
    ""email""
  ],
  ""optionalClientScopes"": [
    ""address"",
    ""phone"",
    ""openid"",
    ""offline_access"",
    ""microprofile-jwt"",
  ]
}
```

output in 13.0.0:

```json
{
  ""id"": ""80672982-e3a5-4f9c-a213-f401e5d68127"",
  ""clientId"": ""rapi_ccis"",
  ""surrogateAuthRequired"": false,
  ""enabled"": true,
  ""alwaysDisplayInConsole"": false,
  ""clientAuthenticatorType"": ""client-secret"",
  ""registrationAccessToken"": ""eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIwZmI3NjA1Zi01Y2Y3LTQwODItYjcwYy04NWVjNTVjNTZlYWUifQ.eyJleHAiOjAsImlhdCI6MTYyMTgxNjM2OSwianRpIjoiZDI3YTJmMGItNjY3NS00YWRhLWJiYWQtZmZmYWQ2YTU0YTIwIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL21hc3RlciIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9tYXN0ZXIiLCJ0eXAiOiJSZWdpc3RyYXRpb25BY2Nlc3NUb2tlbiIsInJlZ2lzdHJhdGlvbl9hdXRoIjoiYXV0aGVudGljYXRlZCJ9.DE2Tx0Z94EC72R4d8hTdAQwbdKXJ9NqV5kYdq1rY8qM"",
  ""redirectUris"": [
    ""https://localhost/""
  ],
  ""webOrigins"": [
    ""https://localhost""
  ],
  ""notBefore"": 0,
  ""bearerOnly"": false,
  ""consentRequired"": false,
  ""standardFlowEnabled"": true,
  ""implicitFlowEnabled"": false,
  ""directAccessGrantsEnabled"": false,
  ""serviceAccountsEnabled"": true,
  ""publicClient"": false,
  ""frontchannelLogout"": false,
  ""protocol"": ""openid-connect"",
  ""attributes"": {},
  ""authenticationFlowBindingOverrides"": {},
  ""fullScopeAllowed"": true,
  ""nodeReRegistrationTimeout"": -1,
  ""defaultClientScopes"": [
    ""web-origins"",
    ""roles"",
    ""profile"",
    ""email""
  ],
  ""optionalClientScopes"": [
    ""address"",
    ""phone"",
    ""openid"",
    ""offline_access"",
    ""microprofile-jwt"",
  ]
}
```

Thank you.

### Version

 13.0.0

### Expected behavior

_No response_

### Actual behavior

_No response_

### How to Reproduce?

_No response_

### Anything else?

https://issues.redhat.com/browse/KEYCLOAK-18257",i9VDYtF5mniZSezc6Kjxg,https://github.com/keycloak/keycloak
20,11897.0,"### Describe the bug

Hi,

Before version 13.0.0 a client registration through the API returned the client-secret in the response. Now, while not documented, the secret is no longer part of the registration response. The JSON field in question is called ""secret"". As you can imagine, this breaks client automatisation and forces changes to the API consumer code.

 

Can, preferably, the previous behaviour be restored? If it's not a bug, the change should be documented and certainly included in the release notes.

curl command:

 ```
curl -sSL -X POST -H 'Content-Type:application/json' -H ""Authorization: bearer $INIT_TOKEN"" \
-d ""{ \""clientId\"": \""$CLIENT_ID\"", \""serviceAccountsEnabled\"": true, \""redirectUris\"": [\""https://localhost/\""]}"" \
$KEYCLOAK_REGISTRATION_URL | jq
 ```

output in 12.0.4:

 
```json
{
  ""id"": ""4e1dd8d9-aeab-4a9f-94db-45aad46dc2d4"",
  ""clientId"": ""rapi_ccis"",
  ""surrogateAuthRequired"": false,
  ""enabled"": true,
  ""alwaysDisplayInConsole"": false,
  ""clientAuthenticatorType"": ""client-secret"",
  ""secret"": ""ca42e775-75a3-4eb4-ac91-56eb1991dee8"",
  ""registrationAccessToken"": ""eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJjZWJmNTJhNy04MmRlLTQ4OTEtYmZmZC1lNmE2MDI4ZGI4ZWUifQ.eyJleHAiOjAsImlhdCI6MTYyMTgxNjEwMSwianRpIjoiMzRhZTA5YmMtNmI2MC00ODUzLThhMjUtNmFkZWQxNDUyMjJhIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL21hc3RlciIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9tYXN0ZXIiLCJ0eXAiOiJSZWdpc3RyYXRpb25BY2Nlc3NUb2tlbiIsInJlZ2lzdHJhdGlvbl9hdXRoIjoiYXV0aGVudGljYXRlZCJ9.eyRQXCXZLo1rMIc34asoD-i9VDYtF5mniZSezc6Kjxg"",
  ""redirectUris"": [
    ""https://localhost/""
  ],
  ""webOrigins"": [
    ""https://localhost""
  ],
  ""notBefore"": 0,
  ""bearerOnly"": false,
  ""consentRequired"": false,
  ""standardFlowEnabled"": true,
  ""implicitFlowEnabled"": false,
  ""directAccessGrantsEnabled"": false,
  ""serviceAccountsEnabled"": true,
  ""publicClient"": false,
  ""frontchannelLogout"": false,
  ""protocol"": ""openid-connect"",
  ""attributes"": {},
  ""authenticationFlowBindingOverrides"": {},
  ""fullScopeAllowed"": true,
  ""nodeReRegistrationTimeout"": -1,
  ""defaultClientScopes"": [
    ""web-origins"",
    ""role_list"",
    ""roles"",
    ""profile"",
    ""email""
  ],
  ""optionalClientScopes"": [
    ""address"",
    ""phone"",
    ""openid"",
    ""offline_access"",
    ""microprofile-jwt"",
  ]
}
```

output in 13.0.0:

```json
{
  ""id"": ""80672982-e3a5-4f9c-a213-f401e5d68127"",
  ""clientId"": ""rapi_ccis"",
  ""surrogateAuthRequired"": false,
  ""enabled"": true,
  ""alwaysDisplayInConsole"": false,
  ""clientAuthenticatorType"": ""client-secret"",
  ""registrationAccessToken"": ""eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIwZmI3NjA1Zi01Y2Y3LTQwODItYjcwYy04NWVjNTVjNTZlYWUifQ.eyJleHAiOjAsImlhdCI6MTYyMTgxNjM2OSwianRpIjoiZDI3YTJmMGItNjY3NS00YWRhLWJiYWQtZmZmYWQ2YTU0YTIwIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL21hc3RlciIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9tYXN0ZXIiLCJ0eXAiOiJSZWdpc3RyYXRpb25BY2Nlc3NUb2tlbiIsInJlZ2lzdHJhdGlvbl9hdXRoIjoiYXV0aGVudGljYXRlZCJ9.DE2Tx0Z94EC72R4d8hTdAQwbdKXJ9NqV5kYdq1rY8qM"",
  ""redirectUris"": [
    ""https://localhost/""
  ],
  ""webOrigins"": [
    ""https://localhost""
  ],
  ""notBefore"": 0,
  ""bearerOnly"": false,
  ""consentRequired"": false,
  ""standardFlowEnabled"": true,
  ""implicitFlowEnabled"": false,
  ""directAccessGrantsEnabled"": false,
  ""serviceAccountsEnabled"": true,
  ""publicClient"": false,
  ""frontchannelLogout"": false,
  ""protocol"": ""openid-connect"",
  ""attributes"": {},
  ""authenticationFlowBindingOverrides"": {},
  ""fullScopeAllowed"": true,
  ""nodeReRegistrationTimeout"": -1,
  ""defaultClientScopes"": [
    ""web-origins"",
    ""roles"",
    ""profile"",
    ""email""
  ],
  ""optionalClientScopes"": [
    ""address"",
    ""phone"",
    ""openid"",
    ""offline_access"",
    ""microprofile-jwt"",
  ]
}
```

Thank you.

### Version

 13.0.0

### Expected behavior

_No response_

### Actual behavior

_No response_

### How to Reproduce?

_No response_

### Anything else?

https://issues.redhat.com/browse/KEYCLOAK-18257",ac91-56eb1991dee8,https://github.com/keycloak/keycloak
21,11897.0,"### Describe the bug

Hi,

Before version 13.0.0 a client registration through the API returned the client-secret in the response. Now, while not documented, the secret is no longer part of the registration response. The JSON field in question is called ""secret"". As you can imagine, this breaks client automatisation and forces changes to the API consumer code.

 

Can, preferably, the previous behaviour be restored? If it's not a bug, the change should be documented and certainly included in the release notes.

curl command:

 ```
curl -sSL -X POST -H 'Content-Type:application/json' -H ""Authorization: bearer $INIT_TOKEN"" \
-d ""{ \""clientId\"": \""$CLIENT_ID\"", \""serviceAccountsEnabled\"": true, \""redirectUris\"": [\""https://localhost/\""]}"" \
$KEYCLOAK_REGISTRATION_URL | jq
 ```

output in 12.0.4:

 
```json
{
  ""id"": ""4e1dd8d9-aeab-4a9f-94db-45aad46dc2d4"",
  ""clientId"": ""rapi_ccis"",
  ""surrogateAuthRequired"": false,
  ""enabled"": true,
  ""alwaysDisplayInConsole"": false,
  ""clientAuthenticatorType"": ""client-secret"",
  ""secret"": ""ca42e775-75a3-4eb4-ac91-56eb1991dee8"",
  ""registrationAccessToken"": ""eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJjZWJmNTJhNy04MmRlLTQ4OTEtYmZmZC1lNmE2MDI4ZGI4ZWUifQ.eyJleHAiOjAsImlhdCI6MTYyMTgxNjEwMSwianRpIjoiMzRhZTA5YmMtNmI2MC00ODUzLThhMjUtNmFkZWQxNDUyMjJhIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL21hc3RlciIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9tYXN0ZXIiLCJ0eXAiOiJSZWdpc3RyYXRpb25BY2Nlc3NUb2tlbiIsInJlZ2lzdHJhdGlvbl9hdXRoIjoiYXV0aGVudGljYXRlZCJ9.eyRQXCXZLo1rMIc34asoD-i9VDYtF5mniZSezc6Kjxg"",
  ""redirectUris"": [
    ""https://localhost/""
  ],
  ""webOrigins"": [
    ""https://localhost""
  ],
  ""notBefore"": 0,
  ""bearerOnly"": false,
  ""consentRequired"": false,
  ""standardFlowEnabled"": true,
  ""implicitFlowEnabled"": false,
  ""directAccessGrantsEnabled"": false,
  ""serviceAccountsEnabled"": true,
  ""publicClient"": false,
  ""frontchannelLogout"": false,
  ""protocol"": ""openid-connect"",
  ""attributes"": {},
  ""authenticationFlowBindingOverrides"": {},
  ""fullScopeAllowed"": true,
  ""nodeReRegistrationTimeout"": -1,
  ""defaultClientScopes"": [
    ""web-origins"",
    ""role_list"",
    ""roles"",
    ""profile"",
    ""email""
  ],
  ""optionalClientScopes"": [
    ""address"",
    ""phone"",
    ""openid"",
    ""offline_access"",
    ""microprofile-jwt"",
  ]
}
```

output in 13.0.0:

```json
{
  ""id"": ""80672982-e3a5-4f9c-a213-f401e5d68127"",
  ""clientId"": ""rapi_ccis"",
  ""surrogateAuthRequired"": false,
  ""enabled"": true,
  ""alwaysDisplayInConsole"": false,
  ""clientAuthenticatorType"": ""client-secret"",
  ""registrationAccessToken"": ""eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIwZmI3NjA1Zi01Y2Y3LTQwODItYjcwYy04NWVjNTVjNTZlYWUifQ.eyJleHAiOjAsImlhdCI6MTYyMTgxNjM2OSwianRpIjoiZDI3YTJmMGItNjY3NS00YWRhLWJiYWQtZmZmYWQ2YTU0YTIwIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL21hc3RlciIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9tYXN0ZXIiLCJ0eXAiOiJSZWdpc3RyYXRpb25BY2Nlc3NUb2tlbiIsInJlZ2lzdHJhdGlvbl9hdXRoIjoiYXV0aGVudGljYXRlZCJ9.DE2Tx0Z94EC72R4d8hTdAQwbdKXJ9NqV5kYdq1rY8qM"",
  ""redirectUris"": [
    ""https://localhost/""
  ],
  ""webOrigins"": [
    ""https://localhost""
  ],
  ""notBefore"": 0,
  ""bearerOnly"": false,
  ""consentRequired"": false,
  ""standardFlowEnabled"": true,
  ""implicitFlowEnabled"": false,
  ""directAccessGrantsEnabled"": false,
  ""serviceAccountsEnabled"": true,
  ""publicClient"": false,
  ""frontchannelLogout"": false,
  ""protocol"": ""openid-connect"",
  ""attributes"": {},
  ""authenticationFlowBindingOverrides"": {},
  ""fullScopeAllowed"": true,
  ""nodeReRegistrationTimeout"": -1,
  ""defaultClientScopes"": [
    ""web-origins"",
    ""roles"",
    ""profile"",
    ""email""
  ],
  ""optionalClientScopes"": [
    ""address"",
    ""phone"",
    ""openid"",
    ""offline_access"",
    ""microprofile-jwt"",
  ]
}
```

Thank you.

### Version

 13.0.0

### Expected behavior

_No response_

### Actual behavior

_No response_

### How to Reproduce?

_No response_

### Anything else?

https://issues.redhat.com/browse/KEYCLOAK-18257",registrationAccessToken,https://github.com/keycloak/keycloak
22,11284.0,"### Describe the bug

The policy endpoint returns error response when a user who was used in a policy got deleted from the realm (see reproduce steps for more details)

This issue is critical as the user management is not under control of a resource server. It's realm administrator's task. Once it happens, the resource server is no longer able to manage policies anymore.  

### Version

17.0.1

### Expected behavior

At minimal, deleting users should not affect the policy endpoint. The list policy endpoint should still work. Ideally, when a user is deleted, all policies should be updated to reflect the changes.

### Actual behavior

When a user used in a policy was deleted from the realm, list all policy endpoint stop working. It returned unknown error response. 

### How to Reproduce?

1) create a test realm
	login to Administration Console, Add realm ""Test""
	
2) add test client
	select the ""Test"" realm, go to ""Clients"" -> ""Create"" and select the attached client json file ""bug-test"" (see Anything else), and ""Save"".
	
3) add a user ""testuser""
	go to ""Users"", add a user ""testuser""
	
4) register a protected resource
	get a client token (replace hostname:port in the curl requests)
	$curl --location --request POST 'http://hostname:port/auth/realms/Test/protocol/openid-connect/token' \
       --header 'Content-Type: application/x-www-form-urlencoded' \
       --data-urlencode 'grant_type=client_credentials' \
       --data-urlencode 'client_id=bug-test' \
       --data-urlencode 'client_secret=KlCEOISCILLXARITyE09zfo9wnOxAlci'
	   
	register a protected resource ""test-protected-resource"" (replace the <access_token> in the request with the one got above)
	curl --location --request POST 'http://hostname:port/auth/realms/Test/authz/protection/resource_set' \
       --header 'Content-Type: application/json' \
       --header 'Authorization: Bearer <access_token>' \
       --data-raw '{
           ""name"": ""test-protected-resource"",
           ""ownerManagedAccess"": true,
           ""scopes"": [""read"", ""write""]
       }'
	   
	write down the resource id (_id property in the response).
	
5) add an UMA policy
	add an UMA policy with the user ""testuser"" to the resource created above (replace the <resource_id>)
	curl --location --request POST 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy/<resource_id>' \
       --header 'Authorization: Bearer <access token>' \
       --header 'Content-Type: application/json' \
       --data-raw '{
               ""name"": ""test-policy"",
               ""decisionStrategy"": ""AFFIRMATIVE"",
               ""scopes"": [""read""],
               ""users"": [""testuser""]
       }'
	write down the policy id (id property in the response).
	
6) query policy
	search all policies
	curl --location --request GET 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy' \
		--header 'Authorization: Bearer <access token>'
	
	you should see one policy in response.
	
7) reproduce the bug by deleteing the user ""testuser"" from Administration Console
	login to Administration Console, go to ""Users"", and delete the user ""testuser"" in ""Test"" realm.
	search all policies again,
	
	curl --location --request GET 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy' \
		--header 'Authorization: Bearer <access token>'

	you will get an error response ""{""error"":""unknown_error""}"". keycloak server log shows a NullPointerException thrown.
	

### Anything else?

bug-test.json

```
{
    ""clientId"": ""bug-test"",
	""secret"": ""KlCEOISCILLXARITyE09zfo9wnOxAlci"",
    ""enabled"": true,
    ""clientAuthenticatorType"": ""client-secret"",
    ""redirectUris"": [
        ""*""
    ],
    ""serviceAccountsEnabled"": true,
    ""authorizationServicesEnabled"": true,
	""authorizationSettings"": {
      ""allowRemoteResourceManagement"": true,
      ""decisionStrategy"": ""AFFIRMATIVE""
	},
    ""publicClient"": false,
    ""protocol"": ""openid-connect""
}
```

A quick fix could be:

```
 .../policy/provider/permission/UMAPolicyProviderFactory.java        | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java b/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
index 51107ae8a2..db0daec628 100644
--- a/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
+++ b/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
@@ -33,6 +33,7 @@ import org.keycloak.models.KeycloakSession;
 import org.keycloak.models.KeycloakSessionFactory;
 import org.keycloak.models.RealmModel;
 import org.keycloak.models.RoleModel;
+import org.keycloak.models.UserModel;
 import org.keycloak.models.utils.KeycloakModelUtils;
 import org.keycloak.models.utils.ModelToRepresentation;
 import org.keycloak.models.utils.RepresentationToModel;
@@ -349,7 +350,10 @@ public class UMAPolicyProviderFactory implements PolicyProviderFactory<UmaPermis
                 UserPolicyRepresentation rep = UserPolicyRepresentation.class.cast(associatedRep);
 
                 for (String user : rep.getUsers()) {
-                    representation.addUser(authorization.getKeycloakSession().users().getUserById(realm, user).getUsername());
+                    UserModel userModel = authorization.getKeycloakSession().users().getUserById(realm, user);
+                    if (userModel != null) {
+                        representation.addUser(userModel.getUsername());
+                    }
                 }
             }
         }
```",client_id=bug-test,https://github.com/keycloak/keycloak
23,11284.0,"### Describe the bug

The policy endpoint returns error response when a user who was used in a policy got deleted from the realm (see reproduce steps for more details)

This issue is critical as the user management is not under control of a resource server. It's realm administrator's task. Once it happens, the resource server is no longer able to manage policies anymore.  

### Version

17.0.1

### Expected behavior

At minimal, deleting users should not affect the policy endpoint. The list policy endpoint should still work. Ideally, when a user is deleted, all policies should be updated to reflect the changes.

### Actual behavior

When a user used in a policy was deleted from the realm, list all policy endpoint stop working. It returned unknown error response. 

### How to Reproduce?

1) create a test realm
	login to Administration Console, Add realm ""Test""
	
2) add test client
	select the ""Test"" realm, go to ""Clients"" -> ""Create"" and select the attached client json file ""bug-test"" (see Anything else), and ""Save"".
	
3) add a user ""testuser""
	go to ""Users"", add a user ""testuser""
	
4) register a protected resource
	get a client token (replace hostname:port in the curl requests)
	$curl --location --request POST 'http://hostname:port/auth/realms/Test/protocol/openid-connect/token' \
       --header 'Content-Type: application/x-www-form-urlencoded' \
       --data-urlencode 'grant_type=client_credentials' \
       --data-urlencode 'client_id=bug-test' \
       --data-urlencode 'client_secret=KlCEOISCILLXARITyE09zfo9wnOxAlci'
	   
	register a protected resource ""test-protected-resource"" (replace the <access_token> in the request with the one got above)
	curl --location --request POST 'http://hostname:port/auth/realms/Test/authz/protection/resource_set' \
       --header 'Content-Type: application/json' \
       --header 'Authorization: Bearer <access_token>' \
       --data-raw '{
           ""name"": ""test-protected-resource"",
           ""ownerManagedAccess"": true,
           ""scopes"": [""read"", ""write""]
       }'
	   
	write down the resource id (_id property in the response).
	
5) add an UMA policy
	add an UMA policy with the user ""testuser"" to the resource created above (replace the <resource_id>)
	curl --location --request POST 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy/<resource_id>' \
       --header 'Authorization: Bearer <access token>' \
       --header 'Content-Type: application/json' \
       --data-raw '{
               ""name"": ""test-policy"",
               ""decisionStrategy"": ""AFFIRMATIVE"",
               ""scopes"": [""read""],
               ""users"": [""testuser""]
       }'
	write down the policy id (id property in the response).
	
6) query policy
	search all policies
	curl --location --request GET 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy' \
		--header 'Authorization: Bearer <access token>'
	
	you should see one policy in response.
	
7) reproduce the bug by deleteing the user ""testuser"" from Administration Console
	login to Administration Console, go to ""Users"", and delete the user ""testuser"" in ""Test"" realm.
	search all policies again,
	
	curl --location --request GET 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy' \
		--header 'Authorization: Bearer <access token>'

	you will get an error response ""{""error"":""unknown_error""}"". keycloak server log shows a NullPointerException thrown.
	

### Anything else?

bug-test.json

```
{
    ""clientId"": ""bug-test"",
	""secret"": ""KlCEOISCILLXARITyE09zfo9wnOxAlci"",
    ""enabled"": true,
    ""clientAuthenticatorType"": ""client-secret"",
    ""redirectUris"": [
        ""*""
    ],
    ""serviceAccountsEnabled"": true,
    ""authorizationServicesEnabled"": true,
	""authorizationSettings"": {
      ""allowRemoteResourceManagement"": true,
      ""decisionStrategy"": ""AFFIRMATIVE""
	},
    ""publicClient"": false,
    ""protocol"": ""openid-connect""
}
```

A quick fix could be:

```
 .../policy/provider/permission/UMAPolicyProviderFactory.java        | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java b/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
index 51107ae8a2..db0daec628 100644
--- a/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
+++ b/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
@@ -33,6 +33,7 @@ import org.keycloak.models.KeycloakSession;
 import org.keycloak.models.KeycloakSessionFactory;
 import org.keycloak.models.RealmModel;
 import org.keycloak.models.RoleModel;
+import org.keycloak.models.UserModel;
 import org.keycloak.models.utils.KeycloakModelUtils;
 import org.keycloak.models.utils.ModelToRepresentation;
 import org.keycloak.models.utils.RepresentationToModel;
@@ -349,7 +350,10 @@ public class UMAPolicyProviderFactory implements PolicyProviderFactory<UmaPermis
                 UserPolicyRepresentation rep = UserPolicyRepresentation.class.cast(associatedRep);
 
                 for (String user : rep.getUsers()) {
-                    representation.addUser(authorization.getKeycloakSession().users().getUserById(realm, user).getUsername());
+                    UserModel userModel = authorization.getKeycloakSession().users().getUserById(realm, user);
+                    if (userModel != null) {
+                        representation.addUser(userModel.getUsername());
+                    }
                 }
             }
         }
```",KlCEOISCILLXARITyE09zfo9wnOxAlci,https://github.com/keycloak/keycloak
24,11284.0,"### Describe the bug

The policy endpoint returns error response when a user who was used in a policy got deleted from the realm (see reproduce steps for more details)

This issue is critical as the user management is not under control of a resource server. It's realm administrator's task. Once it happens, the resource server is no longer able to manage policies anymore.  

### Version

17.0.1

### Expected behavior

At minimal, deleting users should not affect the policy endpoint. The list policy endpoint should still work. Ideally, when a user is deleted, all policies should be updated to reflect the changes.

### Actual behavior

When a user used in a policy was deleted from the realm, list all policy endpoint stop working. It returned unknown error response. 

### How to Reproduce?

1) create a test realm
	login to Administration Console, Add realm ""Test""
	
2) add test client
	select the ""Test"" realm, go to ""Clients"" -> ""Create"" and select the attached client json file ""bug-test"" (see Anything else), and ""Save"".
	
3) add a user ""testuser""
	go to ""Users"", add a user ""testuser""
	
4) register a protected resource
	get a client token (replace hostname:port in the curl requests)
	$curl --location --request POST 'http://hostname:port/auth/realms/Test/protocol/openid-connect/token' \
       --header 'Content-Type: application/x-www-form-urlencoded' \
       --data-urlencode 'grant_type=client_credentials' \
       --data-urlencode 'client_id=bug-test' \
       --data-urlencode 'client_secret=KlCEOISCILLXARITyE09zfo9wnOxAlci'
	   
	register a protected resource ""test-protected-resource"" (replace the <access_token> in the request with the one got above)
	curl --location --request POST 'http://hostname:port/auth/realms/Test/authz/protection/resource_set' \
       --header 'Content-Type: application/json' \
       --header 'Authorization: Bearer <access_token>' \
       --data-raw '{
           ""name"": ""test-protected-resource"",
           ""ownerManagedAccess"": true,
           ""scopes"": [""read"", ""write""]
       }'
	   
	write down the resource id (_id property in the response).
	
5) add an UMA policy
	add an UMA policy with the user ""testuser"" to the resource created above (replace the <resource_id>)
	curl --location --request POST 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy/<resource_id>' \
       --header 'Authorization: Bearer <access token>' \
       --header 'Content-Type: application/json' \
       --data-raw '{
               ""name"": ""test-policy"",
               ""decisionStrategy"": ""AFFIRMATIVE"",
               ""scopes"": [""read""],
               ""users"": [""testuser""]
       }'
	write down the policy id (id property in the response).
	
6) query policy
	search all policies
	curl --location --request GET 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy' \
		--header 'Authorization: Bearer <access token>'
	
	you should see one policy in response.
	
7) reproduce the bug by deleteing the user ""testuser"" from Administration Console
	login to Administration Console, go to ""Users"", and delete the user ""testuser"" in ""Test"" realm.
	search all policies again,
	
	curl --location --request GET 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy' \
		--header 'Authorization: Bearer <access token>'

	you will get an error response ""{""error"":""unknown_error""}"". keycloak server log shows a NullPointerException thrown.
	

### Anything else?

bug-test.json

```
{
    ""clientId"": ""bug-test"",
	""secret"": ""KlCEOISCILLXARITyE09zfo9wnOxAlci"",
    ""enabled"": true,
    ""clientAuthenticatorType"": ""client-secret"",
    ""redirectUris"": [
        ""*""
    ],
    ""serviceAccountsEnabled"": true,
    ""authorizationServicesEnabled"": true,
	""authorizationSettings"": {
      ""allowRemoteResourceManagement"": true,
      ""decisionStrategy"": ""AFFIRMATIVE""
	},
    ""publicClient"": false,
    ""protocol"": ""openid-connect""
}
```

A quick fix could be:

```
 .../policy/provider/permission/UMAPolicyProviderFactory.java        | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java b/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
index 51107ae8a2..db0daec628 100644
--- a/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
+++ b/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
@@ -33,6 +33,7 @@ import org.keycloak.models.KeycloakSession;
 import org.keycloak.models.KeycloakSessionFactory;
 import org.keycloak.models.RealmModel;
 import org.keycloak.models.RoleModel;
+import org.keycloak.models.UserModel;
 import org.keycloak.models.utils.KeycloakModelUtils;
 import org.keycloak.models.utils.ModelToRepresentation;
 import org.keycloak.models.utils.RepresentationToModel;
@@ -349,7 +350,10 @@ public class UMAPolicyProviderFactory implements PolicyProviderFactory<UmaPermis
                 UserPolicyRepresentation rep = UserPolicyRepresentation.class.cast(associatedRep);
 
                 for (String user : rep.getUsers()) {
-                    representation.addUser(authorization.getKeycloakSession().users().getUserById(realm, user).getUsername());
+                    UserModel userModel = authorization.getKeycloakSession().users().getUserById(realm, user);
+                    if (userModel != null) {
+                        representation.addUser(userModel.getUsername());
+                    }
                 }
             }
         }
```",NullPointerException,https://github.com/keycloak/keycloak
25,7650.0,"<!---
Please read https://github.com/keycloak/keycloak/blob/master/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak
-->
Allow using Client Java for token exchanging. E.g.
```lang-kotlin
fun main() {
    val authzClient = AuthzClient.create()
    val request = TokenExchangeRequest()
    request.clientId = ""training-service""
    request.clientSecret = ""b56e9bb4-5037-32aa-b823-3f59f231e418""
    request.subjectToken = ""eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJMZ3pHN1dBOWZWNXE4Wl94TEVmOFNkRl94LWx3NWF6cnY0SUxoNjdTNEdZIn0.eyJleHAiOjE2MDY3NzE3ODksImlhdCI6MTYwNjczNTc5MCwiYXV0aF90aW1lIjoxNjA2NzM1Nzg5LCJqdGkiOiI4NDdjMTJlNi04M2Y1LTQ5MmEtYTI1My05OTVkYWM0ZDA0MWUiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0L2F1dGgvcmVhbG1zL2Jhc2tldG1hc3RlciIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI4MzgxYjYyOS01ZjEwLTQwMWMtYWU5MC1iYjM3NzY5ZTVmNzAiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZWFtcy1mcm9udGVuZCIsIm5vbmNlIjoiMmExYzRkZGItYTk2YS00YjRkLWE0ZDUtNmY4ZmVkOGIzOGI4Iiwic2Vzc2lvbl9zdGF0ZSI6IjUwMjJhYTE3LTlkZjEtNDc2My1hMmY4LWMxY2JkNGQ2ODYwMSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIGVtYWlsIHByb2ZpbGUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IlRlc3QgRmlyc3QiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0IiwiZ2l2ZW5fbmFtZSI6IlRlc3QiLCJmYW1pbHlfbmFtZSI6IkZpcnN0IiwiZW1haWwiOiJ0ZXN0QGludmVudC5jb20ifQ.gIYCFqoW9qQ-BKlOJbOslYuGmC0Fhncwu868tKwV8tk_GX06p39Xh6lf6r3_zDI7QBKmZeZZzQFIpsYWv9JvvAFzLm2js0BFOHPTHIxsx74rgHi-Q9p4S1b7P0jMoK4A3vgRtywC2djhWfs639A2kcBRM2PDIr-TWAsCs9CAML3-ilPb6_LGiCRKkO28BCZFxLQ0XEpg2h_0Z_vD93y1HQOZtEK9kxLrzxPFFNcV1t03x3JxcHrJzsNTtmHkOFqakpBcLNddbsMISusFo-HkOefs4tpaUZpaqukoIPYjcWSQf_UN1n3AVga2SSSLO77WuG8Bu6Pnc_iZqxt7aY1s_A""
    request.audience = ""training-service""
    val tokenResponse = authzClient.exchange().exchange(request)
    println(tokenResponse.token)
}
```",b56e9bb4-5037-32aa-b823-3f59f231e418,https://github.com/keycloak/keycloak
26,7650.0,"<!---
Please read https://github.com/keycloak/keycloak/blob/master/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak
-->
Allow using Client Java for token exchanging. E.g.
```lang-kotlin
fun main() {
    val authzClient = AuthzClient.create()
    val request = TokenExchangeRequest()
    request.clientId = ""training-service""
    request.clientSecret = ""b56e9bb4-5037-32aa-b823-3f59f231e418""
    request.subjectToken = ""eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJMZ3pHN1dBOWZWNXE4Wl94TEVmOFNkRl94LWx3NWF6cnY0SUxoNjdTNEdZIn0.eyJleHAiOjE2MDY3NzE3ODksImlhdCI6MTYwNjczNTc5MCwiYXV0aF90aW1lIjoxNjA2NzM1Nzg5LCJqdGkiOiI4NDdjMTJlNi04M2Y1LTQ5MmEtYTI1My05OTVkYWM0ZDA0MWUiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0L2F1dGgvcmVhbG1zL2Jhc2tldG1hc3RlciIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI4MzgxYjYyOS01ZjEwLTQwMWMtYWU5MC1iYjM3NzY5ZTVmNzAiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZWFtcy1mcm9udGVuZCIsIm5vbmNlIjoiMmExYzRkZGItYTk2YS00YjRkLWE0ZDUtNmY4ZmVkOGIzOGI4Iiwic2Vzc2lvbl9zdGF0ZSI6IjUwMjJhYTE3LTlkZjEtNDc2My1hMmY4LWMxY2JkNGQ2ODYwMSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIGVtYWlsIHByb2ZpbGUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IlRlc3QgRmlyc3QiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0IiwiZ2l2ZW5fbmFtZSI6IlRlc3QiLCJmYW1pbHlfbmFtZSI6IkZpcnN0IiwiZW1haWwiOiJ0ZXN0QGludmVudC5jb20ifQ.gIYCFqoW9qQ-BKlOJbOslYuGmC0Fhncwu868tKwV8tk_GX06p39Xh6lf6r3_zDI7QBKmZeZZzQFIpsYWv9JvvAFzLm2js0BFOHPTHIxsx74rgHi-Q9p4S1b7P0jMoK4A3vgRtywC2djhWfs639A2kcBRM2PDIr-TWAsCs9CAML3-ilPb6_LGiCRKkO28BCZFxLQ0XEpg2h_0Z_vD93y1HQOZtEK9kxLrzxPFFNcV1t03x3JxcHrJzsNTtmHkOFqakpBcLNddbsMISusFo-HkOefs4tpaUZpaqukoIPYjcWSQf_UN1n3AVga2SSSLO77WuG8Bu6Pnc_iZqxt7aY1s_A""
    request.audience = ""training-service""
    val tokenResponse = authzClient.exchange().exchange(request)
    println(tokenResponse.token)
}
```",BKlOJbOslYuGmC0Fhncwu868tKwV8tk_GX06p39Xh6lf6r3_zDI7QBKmZeZZzQFIpsYWv9JvvAFzLm2js0BFOHPTHIxsx74rgHi-Q9p4S1b7P0jMoK4A3vgRtywC2djhWfs639A2kcBRM2PDIr-TWAsCs9CAML3-ilPb6_LGiCRKkO28BCZFxLQ0XEpg2h_0Z_vD93y1HQOZtEK9kxLrzxPFFNcV1t03x3JxcHrJzsNTtmHkOFqakpBcLNddbsMISusFo-HkOefs4tpaUZpaqukoIPYjcWSQf_UN1n3AVga2SSSLO77WuG8Bu6Pnc_iZqxt7aY1s_A,https://github.com/keycloak/keycloak
27,7650.0,"<!---
Please read https://github.com/keycloak/keycloak/blob/master/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak
-->
Allow using Client Java for token exchanging. E.g.
```lang-kotlin
fun main() {
    val authzClient = AuthzClient.create()
    val request = TokenExchangeRequest()
    request.clientId = ""training-service""
    request.clientSecret = ""b56e9bb4-5037-32aa-b823-3f59f231e418""
    request.subjectToken = ""eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJMZ3pHN1dBOWZWNXE4Wl94TEVmOFNkRl94LWx3NWF6cnY0SUxoNjdTNEdZIn0.eyJleHAiOjE2MDY3NzE3ODksImlhdCI6MTYwNjczNTc5MCwiYXV0aF90aW1lIjoxNjA2NzM1Nzg5LCJqdGkiOiI4NDdjMTJlNi04M2Y1LTQ5MmEtYTI1My05OTVkYWM0ZDA0MWUiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0L2F1dGgvcmVhbG1zL2Jhc2tldG1hc3RlciIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI4MzgxYjYyOS01ZjEwLTQwMWMtYWU5MC1iYjM3NzY5ZTVmNzAiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZWFtcy1mcm9udGVuZCIsIm5vbmNlIjoiMmExYzRkZGItYTk2YS00YjRkLWE0ZDUtNmY4ZmVkOGIzOGI4Iiwic2Vzc2lvbl9zdGF0ZSI6IjUwMjJhYTE3LTlkZjEtNDc2My1hMmY4LWMxY2JkNGQ2ODYwMSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIGVtYWlsIHByb2ZpbGUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IlRlc3QgRmlyc3QiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0IiwiZ2l2ZW5fbmFtZSI6IlRlc3QiLCJmYW1pbHlfbmFtZSI6IkZpcnN0IiwiZW1haWwiOiJ0ZXN0QGludmVudC5jb20ifQ.gIYCFqoW9qQ-BKlOJbOslYuGmC0Fhncwu868tKwV8tk_GX06p39Xh6lf6r3_zDI7QBKmZeZZzQFIpsYWv9JvvAFzLm2js0BFOHPTHIxsx74rgHi-Q9p4S1b7P0jMoK4A3vgRtywC2djhWfs639A2kcBRM2PDIr-TWAsCs9CAML3-ilPb6_LGiCRKkO28BCZFxLQ0XEpg2h_0Z_vD93y1HQOZtEK9kxLrzxPFFNcV1t03x3JxcHrJzsNTtmHkOFqakpBcLNddbsMISusFo-HkOefs4tpaUZpaqukoIPYjcWSQf_UN1n3AVga2SSSLO77WuG8Bu6Pnc_iZqxt7aY1s_A""
    request.audience = ""training-service""
    val tokenResponse = authzClient.exchange().exchange(request)
    println(tokenResponse.token)
}
```",exchange(request,https://github.com/keycloak/keycloak
28,7650.0,"<!---
Please read https://github.com/keycloak/keycloak/blob/master/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak
-->
Allow using Client Java for token exchanging. E.g.
```lang-kotlin
fun main() {
    val authzClient = AuthzClient.create()
    val request = TokenExchangeRequest()
    request.clientId = ""training-service""
    request.clientSecret = ""b56e9bb4-5037-32aa-b823-3f59f231e418""
    request.subjectToken = ""eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJMZ3pHN1dBOWZWNXE4Wl94TEVmOFNkRl94LWx3NWF6cnY0SUxoNjdTNEdZIn0.eyJleHAiOjE2MDY3NzE3ODksImlhdCI6MTYwNjczNTc5MCwiYXV0aF90aW1lIjoxNjA2NzM1Nzg5LCJqdGkiOiI4NDdjMTJlNi04M2Y1LTQ5MmEtYTI1My05OTVkYWM0ZDA0MWUiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0L2F1dGgvcmVhbG1zL2Jhc2tldG1hc3RlciIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI4MzgxYjYyOS01ZjEwLTQwMWMtYWU5MC1iYjM3NzY5ZTVmNzAiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZWFtcy1mcm9udGVuZCIsIm5vbmNlIjoiMmExYzRkZGItYTk2YS00YjRkLWE0ZDUtNmY4ZmVkOGIzOGI4Iiwic2Vzc2lvbl9zdGF0ZSI6IjUwMjJhYTE3LTlkZjEtNDc2My1hMmY4LWMxY2JkNGQ2ODYwMSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIGVtYWlsIHByb2ZpbGUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IlRlc3QgRmlyc3QiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0IiwiZ2l2ZW5fbmFtZSI6IlRlc3QiLCJmYW1pbHlfbmFtZSI6IkZpcnN0IiwiZW1haWwiOiJ0ZXN0QGludmVudC5jb20ifQ.gIYCFqoW9qQ-BKlOJbOslYuGmC0Fhncwu868tKwV8tk_GX06p39Xh6lf6r3_zDI7QBKmZeZZzQFIpsYWv9JvvAFzLm2js0BFOHPTHIxsx74rgHi-Q9p4S1b7P0jMoK4A3vgRtywC2djhWfs639A2kcBRM2PDIr-TWAsCs9CAML3-ilPb6_LGiCRKkO28BCZFxLQ0XEpg2h_0Z_vD93y1HQOZtEK9kxLrzxPFFNcV1t03x3JxcHrJzsNTtmHkOFqakpBcLNddbsMISusFo-HkOefs4tpaUZpaqukoIPYjcWSQf_UN1n3AVga2SSSLO77WuG8Bu6Pnc_iZqxt7aY1s_A""
    request.audience = ""training-service""
    val tokenResponse = authzClient.exchange().exchange(request)
    println(tokenResponse.token)
}
```",training-service,https://github.com/keycloak/keycloak
0,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",MTQyMzM1MTE0MzE5Ouep7a7j,https://github.com/kubernetes/kubernetes
1,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",literal=username,https://github.com/kubernetes/kubernetes
2,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",MTQyMzM1MTE0MzE5Ouep7a7j=client,https://github.com/kubernetes/kubernetes
3,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",creationTimestamp,https://github.com/kubernetes/kubernetes
4,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU,https://github.com/kubernetes/kubernetes
5,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg,https://github.com/kubernetes/kubernetes
6,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=,https://github.com/kubernetes/kubernetes
7,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",different,https://github.com/kubernetes/kubernetes
8,95105.0,"Centos7, three servers are installed with k8s cluster, one master, other slave1 and slave2. The three nodes are installed with CEPH for data persistence.

the cephfs on master /mnt/cephfs directroy
master:6789,slave1:6789,slave2:6789:/ /mnt/cephfs ceph name=cephfs,secretfile=/etc/ceph/cephfskey,_netdev,noatime 0 0

Create deployment through the python API of kubernetes client, and mount three directories at the same time,
One is to dynamically hang to pod through PVC
Here's secret
apiVersion: v1
kind: Secret
metadata:
name: ceph-secret
namespace: espp-ns
type: ""kubernetes.io/rbd""
data:
key:

storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
name: ceph-espp
provisioner: kubernetes.io/rbd
parameters:
monitors: 10.197.1.11, 10.197.1.12, 10.197.1.13
adminId: admin
adminSecretName: ceph-secret
adminSecretNamespace: espp-ns
pool: rbd 
userId: admin
userSecretName: ceph-secret
reclaimPolicy: Retain

The other two directories are mounted through cephfs.
secret.yml
apiVersion: v1
kind: Secret
metadata:
name: cephfs-secret-fs
namespace: espp-ns
type: ""kubernetes.io/rbd""
data:
key: AQBJrUxfZiH6NxAAljeXDd/DBYBiHx64PJ+shQ==

**Problem**：All created pods are in the master node, not assigned to the other two nodes. At the same time, the created PVC and PV are also mounted on the master

below is on deployment example:
espp-ns-deployment-1-1-2-0-6fc6cd65c4-8lq9m 1/1 Running 0 13h 172.30.22.5 **master**

and the mount information:
172.18.101.10:6789,172.18.101.11:6789,172.18.101.12:6789:/studentenv/dataset_stuenv_2_1/ 1.2T 244M 1.2T 1% /var/lib/kubelet/pods/1d40454b-00fc-4847-8948-7b1d73e1bb98/volumes/kubernetes.iocephfs/espp-ns-deployment-1-1-2-0-pv-fs-stuenv-0-1
172.18.101.10:6789,172.18.101.11:6789,172.18.101.12:6789:/lessonplan/dataset_lp_1_1_19/ 1.2T 244M 1.2T 1% /var/lib/kubelet/pods/1d40454b-00fc-4847-8948-7b1d73e1bb98/volumes/kubernetes.iocephfs/espp-ns-deployment-1-1-2-0-pv-fs-stuenv-0-0
/dev/rbd0 20G 387M 20G 2% /var/lib/kubelet/plugins/kubernetes.io/rbd/mounts/rbd-image-kubernetes-dynamic-pvc-95ce6a24-e7fe-4456-b008-d53428be6352
overlay

thanks","=,_netdev,noatime",https://github.com/kubernetes/kubernetes
9,95105.0,"Centos7, three servers are installed with k8s cluster, one master, other slave1 and slave2. The three nodes are installed with CEPH for data persistence.

the cephfs on master /mnt/cephfs directroy
master:6789,slave1:6789,slave2:6789:/ /mnt/cephfs ceph name=cephfs,secretfile=/etc/ceph/cephfskey,_netdev,noatime 0 0

Create deployment through the python API of kubernetes client, and mount three directories at the same time,
One is to dynamically hang to pod through PVC
Here's secret
apiVersion: v1
kind: Secret
metadata:
name: ceph-secret
namespace: espp-ns
type: ""kubernetes.io/rbd""
data:
key:

storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
name: ceph-espp
provisioner: kubernetes.io/rbd
parameters:
monitors: 10.197.1.11, 10.197.1.12, 10.197.1.13
adminId: admin
adminSecretName: ceph-secret
adminSecretNamespace: espp-ns
pool: rbd 
userId: admin
userSecretName: ceph-secret
reclaimPolicy: Retain

The other two directories are mounted through cephfs.
secret.yml
apiVersion: v1
kind: Secret
metadata:
name: cephfs-secret-fs
namespace: espp-ns
type: ""kubernetes.io/rbd""
data:
key: AQBJrUxfZiH6NxAAljeXDd/DBYBiHx64PJ+shQ==

**Problem**：All created pods are in the master node, not assigned to the other two nodes. At the same time, the created PVC and PV are also mounted on the master

below is on deployment example:
espp-ns-deployment-1-1-2-0-6fc6cd65c4-8lq9m 1/1 Running 0 13h 172.30.22.5 **master**

and the mount information:
172.18.101.10:6789,172.18.101.11:6789,172.18.101.12:6789:/studentenv/dataset_stuenv_2_1/ 1.2T 244M 1.2T 1% /var/lib/kubelet/pods/1d40454b-00fc-4847-8948-7b1d73e1bb98/volumes/kubernetes.iocephfs/espp-ns-deployment-1-1-2-0-pv-fs-stuenv-0-1
172.18.101.10:6789,172.18.101.11:6789,172.18.101.12:6789:/lessonplan/dataset_lp_1_1_19/ 1.2T 244M 1.2T 1% /var/lib/kubelet/pods/1d40454b-00fc-4847-8948-7b1d73e1bb98/volumes/kubernetes.iocephfs/espp-ns-deployment-1-1-2-0-pv-fs-stuenv-0-0
/dev/rbd0 20G 387M 20G 2% /var/lib/kubelet/plugins/kubernetes.io/rbd/mounts/rbd-image-kubernetes-dynamic-pvc-95ce6a24-e7fe-4456-b008-d53428be6352
overlay

thanks",cephfs-secret-fs,https://github.com/kubernetes/kubernetes
10,95105.0,"Centos7, three servers are installed with k8s cluster, one master, other slave1 and slave2. The three nodes are installed with CEPH for data persistence.

the cephfs on master /mnt/cephfs directroy
master:6789,slave1:6789,slave2:6789:/ /mnt/cephfs ceph name=cephfs,secretfile=/etc/ceph/cephfskey,_netdev,noatime 0 0

Create deployment through the python API of kubernetes client, and mount three directories at the same time,
One is to dynamically hang to pod through PVC
Here's secret
apiVersion: v1
kind: Secret
metadata:
name: ceph-secret
namespace: espp-ns
type: ""kubernetes.io/rbd""
data:
key:

storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
name: ceph-espp
provisioner: kubernetes.io/rbd
parameters:
monitors: 10.197.1.11, 10.197.1.12, 10.197.1.13
adminId: admin
adminSecretName: ceph-secret
adminSecretNamespace: espp-ns
pool: rbd 
userId: admin
userSecretName: ceph-secret
reclaimPolicy: Retain

The other two directories are mounted through cephfs.
secret.yml
apiVersion: v1
kind: Secret
metadata:
name: cephfs-secret-fs
namespace: espp-ns
type: ""kubernetes.io/rbd""
data:
key: AQBJrUxfZiH6NxAAljeXDd/DBYBiHx64PJ+shQ==

**Problem**：All created pods are in the master node, not assigned to the other two nodes. At the same time, the created PVC and PV are also mounted on the master

below is on deployment example:
espp-ns-deployment-1-1-2-0-6fc6cd65c4-8lq9m 1/1 Running 0 13h 172.30.22.5 **master**

and the mount information:
172.18.101.10:6789,172.18.101.11:6789,172.18.101.12:6789:/studentenv/dataset_stuenv_2_1/ 1.2T 244M 1.2T 1% /var/lib/kubelet/pods/1d40454b-00fc-4847-8948-7b1d73e1bb98/volumes/kubernetes.iocephfs/espp-ns-deployment-1-1-2-0-pv-fs-stuenv-0-1
172.18.101.10:6789,172.18.101.11:6789,172.18.101.12:6789:/lessonplan/dataset_lp_1_1_19/ 1.2T 244M 1.2T 1% /var/lib/kubelet/pods/1d40454b-00fc-4847-8948-7b1d73e1bb98/volumes/kubernetes.iocephfs/espp-ns-deployment-1-1-2-0-pv-fs-stuenv-0-0
/dev/rbd0 20G 387M 20G 2% /var/lib/kubelet/plugins/kubernetes.io/rbd/mounts/rbd-image-kubernetes-dynamic-pvc-95ce6a24-e7fe-4456-b008-d53428be6352
overlay

thanks",adminSecretNamespace,https://github.com/kubernetes/kubernetes
11,95105.0,"Centos7, three servers are installed with k8s cluster, one master, other slave1 and slave2. The three nodes are installed with CEPH for data persistence.

the cephfs on master /mnt/cephfs directroy
master:6789,slave1:6789,slave2:6789:/ /mnt/cephfs ceph name=cephfs,secretfile=/etc/ceph/cephfskey,_netdev,noatime 0 0

Create deployment through the python API of kubernetes client, and mount three directories at the same time,
One is to dynamically hang to pod through PVC
Here's secret
apiVersion: v1
kind: Secret
metadata:
name: ceph-secret
namespace: espp-ns
type: ""kubernetes.io/rbd""
data:
key:

storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
name: ceph-espp
provisioner: kubernetes.io/rbd
parameters:
monitors: 10.197.1.11, 10.197.1.12, 10.197.1.13
adminId: admin
adminSecretName: ceph-secret
adminSecretNamespace: espp-ns
pool: rbd 
userId: admin
userSecretName: ceph-secret
reclaimPolicy: Retain

The other two directories are mounted through cephfs.
secret.yml
apiVersion: v1
kind: Secret
metadata:
name: cephfs-secret-fs
namespace: espp-ns
type: ""kubernetes.io/rbd""
data:
key: AQBJrUxfZiH6NxAAljeXDd/DBYBiHx64PJ+shQ==

**Problem**：All created pods are in the master node, not assigned to the other two nodes. At the same time, the created PVC and PV are also mounted on the master

below is on deployment example:
espp-ns-deployment-1-1-2-0-6fc6cd65c4-8lq9m 1/1 Running 0 13h 172.30.22.5 **master**

and the mount information:
172.18.101.10:6789,172.18.101.11:6789,172.18.101.12:6789:/studentenv/dataset_stuenv_2_1/ 1.2T 244M 1.2T 1% /var/lib/kubelet/pods/1d40454b-00fc-4847-8948-7b1d73e1bb98/volumes/kubernetes.iocephfs/espp-ns-deployment-1-1-2-0-pv-fs-stuenv-0-1
172.18.101.10:6789,172.18.101.11:6789,172.18.101.12:6789:/lessonplan/dataset_lp_1_1_19/ 1.2T 244M 1.2T 1% /var/lib/kubelet/pods/1d40454b-00fc-4847-8948-7b1d73e1bb98/volumes/kubernetes.iocephfs/espp-ns-deployment-1-1-2-0-pv-fs-stuenv-0-0
/dev/rbd0 20G 387M 20G 2% /var/lib/kubelet/plugins/kubernetes.io/rbd/mounts/rbd-image-kubernetes-dynamic-pvc-95ce6a24-e7fe-4456-b008-d53428be6352
overlay

thanks",AQBJrUxfZiH6NxAAljeXDd+shQ,https://github.com/kubernetes/kubernetes
12,95105.0,"Centos7, three servers are installed with k8s cluster, one master, other slave1 and slave2. The three nodes are installed with CEPH for data persistence.

the cephfs on master /mnt/cephfs directroy
master:6789,slave1:6789,slave2:6789:/ /mnt/cephfs ceph name=cephfs,secretfile=/etc/ceph/cephfskey,_netdev,noatime 0 0

Create deployment through the python API of kubernetes client, and mount three directories at the same time,
One is to dynamically hang to pod through PVC
Here's secret
apiVersion: v1
kind: Secret
metadata:
name: ceph-secret
namespace: espp-ns
type: ""kubernetes.io/rbd""
data:
key:

storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
name: ceph-espp
provisioner: kubernetes.io/rbd
parameters:
monitors: 10.197.1.11, 10.197.1.12, 10.197.1.13
adminId: admin
adminSecretName: ceph-secret
adminSecretNamespace: espp-ns
pool: rbd 
userId: admin
userSecretName: ceph-secret
reclaimPolicy: Retain

The other two directories are mounted through cephfs.
secret.yml
apiVersion: v1
kind: Secret
metadata:
name: cephfs-secret-fs
namespace: espp-ns
type: ""kubernetes.io/rbd""
data:
key: AQBJrUxfZiH6NxAAljeXDd/DBYBiHx64PJ+shQ==

**Problem**：All created pods are in the master node, not assigned to the other two nodes. At the same time, the created PVC and PV are also mounted on the master

below is on deployment example:
espp-ns-deployment-1-1-2-0-6fc6cd65c4-8lq9m 1/1 Running 0 13h 172.30.22.5 **master**

and the mount information:
172.18.101.10:6789,172.18.101.11:6789,172.18.101.12:6789:/studentenv/dataset_stuenv_2_1/ 1.2T 244M 1.2T 1% /var/lib/kubelet/pods/1d40454b-00fc-4847-8948-7b1d73e1bb98/volumes/kubernetes.iocephfs/espp-ns-deployment-1-1-2-0-pv-fs-stuenv-0-1
172.18.101.10:6789,172.18.101.11:6789,172.18.101.12:6789:/lessonplan/dataset_lp_1_1_19/ 1.2T 244M 1.2T 1% /var/lib/kubelet/pods/1d40454b-00fc-4847-8948-7b1d73e1bb98/volumes/kubernetes.iocephfs/espp-ns-deployment-1-1-2-0-pv-fs-stuenv-0-0
/dev/rbd0 20G 387M 20G 2% /var/lib/kubelet/plugins/kubernetes.io/rbd/mounts/rbd-image-kubernetes-dynamic-pvc-95ce6a24-e7fe-4456-b008-d53428be6352
overlay

thanks",AQBJrUxfZiH6NxAAljeXDd,https://github.com/kubernetes/kubernetes
13,90044.0,"I have configured keycloak for Kubernetes RBAC. 

- user having access to get pods

```
vagrant@haproxy:~/.kube$ kubectl auth can-i get pods --user=oidc
Warning: the server doesn't have a resource type 'pods'
yes
```

```
vagrant@haproxy:~/.kube$ kubectl get pods --user=oidc
error: You must be logged in to the server (Unauthorized)
```

my kubeconfig file for the user looks like below

```yaml
users:
- name: oidc
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1beta1
      args:
      - oidc-login
      - get-token
      - --oidc-issuer-url=https://test.example.com/auth/realms/kubernetes
      - --oidc-client-id=kubernetes
      - --oidc-client-secret=e479f74d-d9fd-415b-b1db-fd7946d3ad90
      - --username=test
      - --grant-type=authcode-keyboard
      command: kubectl
```

",e479f74d-d9fd-415b-b1db-fd7946d3ad90,https://github.com/kubernetes/kubernetes
14,90044.0,"I have configured keycloak for Kubernetes RBAC. 

- user having access to get pods

```
vagrant@haproxy:~/.kube$ kubectl auth can-i get pods --user=oidc
Warning: the server doesn't have a resource type 'pods'
yes
```

```
vagrant@haproxy:~/.kube$ kubectl get pods --user=oidc
error: You must be logged in to the server (Unauthorized)
```

my kubeconfig file for the user looks like below

```yaml
users:
- name: oidc
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1beta1
      args:
      - oidc-login
      - get-token
      - --oidc-issuer-url=https://test.example.com/auth/realms/kubernetes
      - --oidc-client-id=kubernetes
      - --oidc-client-secret=e479f74d-d9fd-415b-b1db-fd7946d3ad90
      - --username=test
      - --grant-type=authcode-keyboard
      command: kubectl
```

",oidc-client-id=kubernetes,https://github.com/kubernetes/kubernetes
15,90044.0,"I have configured keycloak for Kubernetes RBAC. 

- user having access to get pods

```
vagrant@haproxy:~/.kube$ kubectl auth can-i get pods --user=oidc
Warning: the server doesn't have a resource type 'pods'
yes
```

```
vagrant@haproxy:~/.kube$ kubectl get pods --user=oidc
error: You must be logged in to the server (Unauthorized)
```

my kubeconfig file for the user looks like below

```yaml
users:
- name: oidc
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1beta1
      args:
      - oidc-login
      - get-token
      - --oidc-issuer-url=https://test.example.com/auth/realms/kubernetes
      - --oidc-client-id=kubernetes
      - --oidc-client-secret=e479f74d-d9fd-415b-b1db-fd7946d3ad90
      - --username=test
      - --grant-type=authcode-keyboard
      command: kubectl
```

",b1db-fd7946d3ad90,https://github.com/kubernetes/kubernetes
16,87229.0,"**What happened**:
```
[root@master01 kubernetes]# kubeadm init --config kubeadm.conf --upload-certs --certificate-key 5cf38ca270d75eb11fac6b3ef77b0e1ef7318d56a1edf3ad0687c72281c89aca
can not mix '--config' with arguments [certificate-key]
To see the stack trace of this error execute with --v=5 or higher
```
**What you expected to happen**:
i hope init success
**How to reproduce it (as minimally and precisely as possible)**:
```
kubeadm init --config kubeadm.conf --upload-certs --certificate-key 5cf38ca270d75eb11fac6b3ef77b0e1ef7318d56a1edf3ad0687c72281c89aca
```
**Anything else we need to know?**:

**Environment**:
[root@master01 kubernetes]# kubectl version --short
Client Version: v1.17.0
Unable to connect to the server: EOF
",5cf38ca270d75eb11fac6b3ef77b0e1ef7318d56a1edf3ad0687c72281c89aca,https://github.com/kubernetes/kubernetes
17,87229.0,"**What happened**:
```
[root@master01 kubernetes]# kubeadm init --config kubeadm.conf --upload-certs --certificate-key 5cf38ca270d75eb11fac6b3ef77b0e1ef7318d56a1edf3ad0687c72281c89aca
can not mix '--config' with arguments [certificate-key]
To see the stack trace of this error execute with --v=5 or higher
```
**What you expected to happen**:
i hope init success
**How to reproduce it (as minimally and precisely as possible)**:
```
kubeadm init --config kubeadm.conf --upload-certs --certificate-key 5cf38ca270d75eb11fac6b3ef77b0e1ef7318d56a1edf3ad0687c72281c89aca
```
**Anything else we need to know?**:

**Environment**:
[root@master01 kubernetes]# kubectl version --short
Client Version: v1.17.0
Unable to connect to the server: EOF
",5cf38ca270d75eb11fac6b3ef77b0e1ef7318d56a1edf3ad06,https://github.com/kubernetes/kubernetes
18,76667.0,"<!-- Please use this template while reporting a bug and provide as much info as possible. Not doing so may result in your bug not being addressed in a timely manner. Thanks!

If the matter is security related, please disclose it privately via https://kubernetes.io/security/
-->


**What happened**:

```
kubectl get secrets personal-secret  -o yaml
Error from server: illegal base64 data at input byte 3
```

this is the output most of the times. It sometimes gives the correct output also.

**What you expected to happen**:
```
kubectl get secrets personal-secret  -o yaml
apiVersion: v1
data:
  password: c3Vwc2VyLXN0cm9uZy1wYXNz
  username: bXVuYWk=
kind: Secret
metadata:
  creationTimestamp: 2019-04-16T15:07:24Z
  name: personal-secret
  namespace: default
  resourceVersion: ""74250""
  selfLink: /api/v1/namespaces/default/secrets/personal-secret
  uid: 57288509-6059-11e9-affd-021b36e1a948
type: Opaque
```

**How to reproduce it (as minimally and precisely as possible)**:

For encryption of etcd I followed [docs](https://v1-12.docs.kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)

Encryption Config with aescbc
```
EtcdEncryptionKey=$(head -c 32 /dev/urandom | base64)
```
```cat >> /etc/kubernetes/etcdEncryption/etcdEncryptionConfig.conf << EOF
kind: EncryptionConfig
apiVersion: v1
resources:
  - resources:
    - secrets
    providers:
    - aescbc:
        keys:
        - name: key1
          secret: ${EtcdEncryptionKey}
    - identity: {}
```

Create a secret
```
kubectl create secret generic personal-secret --from-literal=username=munai --from-literal=password=supser-strong-pass
```
Retrive the secret
```
kubectl get secrets personal-secret  -o yaml
```

**Anything else we need to know?**:

**Environment**:
- Kubernetes version (use `kubectl version`):
```./kubectl version
Client Version: version.Info{Major:""1"", Minor:""12"", GitVersion:""v1.12.5"", GitCommit:""51dd616cdd25d6ee22c83a858773b607328a18ec"", GitTreeState:""clean"", BuildDate:""2019-01-16T18:24:45Z"", GoVersion:""go1.10.7"", Compiler:""gc"", Platform:""darwin/amd64""}
Server Version: version.Info{Major:""1"", Minor:""12"", GitVersion:""v1.12.5"", GitCommit:""51dd616cdd25d6ee22c83a858773b607328a18ec"", GitTreeState:""clean"", BuildDate:""2019-01-16T18:14:49Z"", GoVersion:""go1.10.7"", Compiler:""gc"", Platform:""linux/amd64""}
```
- Cloud provider or hardware configuration:
AWS - EC2
- OS (e.g: `cat /etc/os-release`):
```
cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
```
- Kernel (e.g. `uname -a`):
```uname -a
Linux ip-10-13-0-207.us-west-2.compute.internal 3.10.0-957.10.1.el7.x86_64 #1 SMP Mon Mar 18 15:06:45 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
```
- Install tools:
kubeadm
- Others:
",-04-16T15:07:24Z,https://github.com/kubernetes/kubernetes
19,76667.0,"<!-- Please use this template while reporting a bug and provide as much info as possible. Not doing so may result in your bug not being addressed in a timely manner. Thanks!

If the matter is security related, please disclose it privately via https://kubernetes.io/security/
-->


**What happened**:

```
kubectl get secrets personal-secret  -o yaml
Error from server: illegal base64 data at input byte 3
```

this is the output most of the times. It sometimes gives the correct output also.

**What you expected to happen**:
```
kubectl get secrets personal-secret  -o yaml
apiVersion: v1
data:
  password: c3Vwc2VyLXN0cm9uZy1wYXNz
  username: bXVuYWk=
kind: Secret
metadata:
  creationTimestamp: 2019-04-16T15:07:24Z
  name: personal-secret
  namespace: default
  resourceVersion: ""74250""
  selfLink: /api/v1/namespaces/default/secrets/personal-secret
  uid: 57288509-6059-11e9-affd-021b36e1a948
type: Opaque
```

**How to reproduce it (as minimally and precisely as possible)**:

For encryption of etcd I followed [docs](https://v1-12.docs.kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)

Encryption Config with aescbc
```
EtcdEncryptionKey=$(head -c 32 /dev/urandom | base64)
```
```cat >> /etc/kubernetes/etcdEncryption/etcdEncryptionConfig.conf << EOF
kind: EncryptionConfig
apiVersion: v1
resources:
  - resources:
    - secrets
    providers:
    - aescbc:
        keys:
        - name: key1
          secret: ${EtcdEncryptionKey}
    - identity: {}
```

Create a secret
```
kubectl create secret generic personal-secret --from-literal=username=munai --from-literal=password=supser-strong-pass
```
Retrive the secret
```
kubectl get secrets personal-secret  -o yaml
```

**Anything else we need to know?**:

**Environment**:
- Kubernetes version (use `kubectl version`):
```./kubectl version
Client Version: version.Info{Major:""1"", Minor:""12"", GitVersion:""v1.12.5"", GitCommit:""51dd616cdd25d6ee22c83a858773b607328a18ec"", GitTreeState:""clean"", BuildDate:""2019-01-16T18:24:45Z"", GoVersion:""go1.10.7"", Compiler:""gc"", Platform:""darwin/amd64""}
Server Version: version.Info{Major:""1"", Minor:""12"", GitVersion:""v1.12.5"", GitCommit:""51dd616cdd25d6ee22c83a858773b607328a18ec"", GitTreeState:""clean"", BuildDate:""2019-01-16T18:14:49Z"", GoVersion:""go1.10.7"", Compiler:""gc"", Platform:""linux/amd64""}
```
- Cloud provider or hardware configuration:
AWS - EC2
- OS (e.g: `cat /etc/os-release`):
```
cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
```
- Kernel (e.g. `uname -a`):
```uname -a
Linux ip-10-13-0-207.us-west-2.compute.internal 3.10.0-957.10.1.el7.x86_64 #1 SMP Mon Mar 18 15:06:45 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
```
- Install tools:
kubeadm
- Others:
",supser-strong-pass,https://github.com/kubernetes/kubernetes
20,76667.0,"<!-- Please use this template while reporting a bug and provide as much info as possible. Not doing so may result in your bug not being addressed in a timely manner. Thanks!

If the matter is security related, please disclose it privately via https://kubernetes.io/security/
-->


**What happened**:

```
kubectl get secrets personal-secret  -o yaml
Error from server: illegal base64 data at input byte 3
```

this is the output most of the times. It sometimes gives the correct output also.

**What you expected to happen**:
```
kubectl get secrets personal-secret  -o yaml
apiVersion: v1
data:
  password: c3Vwc2VyLXN0cm9uZy1wYXNz
  username: bXVuYWk=
kind: Secret
metadata:
  creationTimestamp: 2019-04-16T15:07:24Z
  name: personal-secret
  namespace: default
  resourceVersion: ""74250""
  selfLink: /api/v1/namespaces/default/secrets/personal-secret
  uid: 57288509-6059-11e9-affd-021b36e1a948
type: Opaque
```

**How to reproduce it (as minimally and precisely as possible)**:

For encryption of etcd I followed [docs](https://v1-12.docs.kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)

Encryption Config with aescbc
```
EtcdEncryptionKey=$(head -c 32 /dev/urandom | base64)
```
```cat >> /etc/kubernetes/etcdEncryption/etcdEncryptionConfig.conf << EOF
kind: EncryptionConfig
apiVersion: v1
resources:
  - resources:
    - secrets
    providers:
    - aescbc:
        keys:
        - name: key1
          secret: ${EtcdEncryptionKey}
    - identity: {}
```

Create a secret
```
kubectl create secret generic personal-secret --from-literal=username=munai --from-literal=password=supser-strong-pass
```
Retrive the secret
```
kubectl get secrets personal-secret  -o yaml
```

**Anything else we need to know?**:

**Environment**:
- Kubernetes version (use `kubectl version`):
```./kubectl version
Client Version: version.Info{Major:""1"", Minor:""12"", GitVersion:""v1.12.5"", GitCommit:""51dd616cdd25d6ee22c83a858773b607328a18ec"", GitTreeState:""clean"", BuildDate:""2019-01-16T18:24:45Z"", GoVersion:""go1.10.7"", Compiler:""gc"", Platform:""darwin/amd64""}
Server Version: version.Info{Major:""1"", Minor:""12"", GitVersion:""v1.12.5"", GitCommit:""51dd616cdd25d6ee22c83a858773b607328a18ec"", GitTreeState:""clean"", BuildDate:""2019-01-16T18:14:49Z"", GoVersion:""go1.10.7"", Compiler:""gc"", Platform:""linux/amd64""}
```
- Cloud provider or hardware configuration:
AWS - EC2
- OS (e.g: `cat /etc/os-release`):
```
cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
```
- Kernel (e.g. `uname -a`):
```uname -a
Linux ip-10-13-0-207.us-west-2.compute.internal 3.10.0-957.10.1.el7.x86_64 #1 SMP Mon Mar 18 15:06:45 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
```
- Install tools:
kubeadm
- Others:
",EtcdEncryptionKey,https://github.com/kubernetes/kubernetes
21,76667.0,"<!-- Please use this template while reporting a bug and provide as much info as possible. Not doing so may result in your bug not being addressed in a timely manner. Thanks!

If the matter is security related, please disclose it privately via https://kubernetes.io/security/
-->


**What happened**:

```
kubectl get secrets personal-secret  -o yaml
Error from server: illegal base64 data at input byte 3
```

this is the output most of the times. It sometimes gives the correct output also.

**What you expected to happen**:
```
kubectl get secrets personal-secret  -o yaml
apiVersion: v1
data:
  password: c3Vwc2VyLXN0cm9uZy1wYXNz
  username: bXVuYWk=
kind: Secret
metadata:
  creationTimestamp: 2019-04-16T15:07:24Z
  name: personal-secret
  namespace: default
  resourceVersion: ""74250""
  selfLink: /api/v1/namespaces/default/secrets/personal-secret
  uid: 57288509-6059-11e9-affd-021b36e1a948
type: Opaque
```

**How to reproduce it (as minimally and precisely as possible)**:

For encryption of etcd I followed [docs](https://v1-12.docs.kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)

Encryption Config with aescbc
```
EtcdEncryptionKey=$(head -c 32 /dev/urandom | base64)
```
```cat >> /etc/kubernetes/etcdEncryption/etcdEncryptionConfig.conf << EOF
kind: EncryptionConfig
apiVersion: v1
resources:
  - resources:
    - secrets
    providers:
    - aescbc:
        keys:
        - name: key1
          secret: ${EtcdEncryptionKey}
    - identity: {}
```

Create a secret
```
kubectl create secret generic personal-secret --from-literal=username=munai --from-literal=password=supser-strong-pass
```
Retrive the secret
```
kubectl get secrets personal-secret  -o yaml
```

**Anything else we need to know?**:

**Environment**:
- Kubernetes version (use `kubectl version`):
```./kubectl version
Client Version: version.Info{Major:""1"", Minor:""12"", GitVersion:""v1.12.5"", GitCommit:""51dd616cdd25d6ee22c83a858773b607328a18ec"", GitTreeState:""clean"", BuildDate:""2019-01-16T18:24:45Z"", GoVersion:""go1.10.7"", Compiler:""gc"", Platform:""darwin/amd64""}
Server Version: version.Info{Major:""1"", Minor:""12"", GitVersion:""v1.12.5"", GitCommit:""51dd616cdd25d6ee22c83a858773b607328a18ec"", GitTreeState:""clean"", BuildDate:""2019-01-16T18:14:49Z"", GoVersion:""go1.10.7"", Compiler:""gc"", Platform:""linux/amd64""}
```
- Cloud provider or hardware configuration:
AWS - EC2
- OS (e.g: `cat /etc/os-release`):
```
cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
```
- Kernel (e.g. `uname -a`):
```uname -a
Linux ip-10-13-0-207.us-west-2.compute.internal 3.10.0-957.10.1.el7.x86_64 #1 SMP Mon Mar 18 15:06:45 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
```
- Install tools:
kubeadm
- Others:
",c3Vwc2VyLXN0cm9uZy1wYXNz,https://github.com/kubernetes/kubernetes
22,76667.0,"<!-- Please use this template while reporting a bug and provide as much info as possible. Not doing so may result in your bug not being addressed in a timely manner. Thanks!

If the matter is security related, please disclose it privately via https://kubernetes.io/security/
-->


**What happened**:

```
kubectl get secrets personal-secret  -o yaml
Error from server: illegal base64 data at input byte 3
```

this is the output most of the times. It sometimes gives the correct output also.

**What you expected to happen**:
```
kubectl get secrets personal-secret  -o yaml
apiVersion: v1
data:
  password: c3Vwc2VyLXN0cm9uZy1wYXNz
  username: bXVuYWk=
kind: Secret
metadata:
  creationTimestamp: 2019-04-16T15:07:24Z
  name: personal-secret
  namespace: default
  resourceVersion: ""74250""
  selfLink: /api/v1/namespaces/default/secrets/personal-secret
  uid: 57288509-6059-11e9-affd-021b36e1a948
type: Opaque
```

**How to reproduce it (as minimally and precisely as possible)**:

For encryption of etcd I followed [docs](https://v1-12.docs.kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)

Encryption Config with aescbc
```
EtcdEncryptionKey=$(head -c 32 /dev/urandom | base64)
```
```cat >> /etc/kubernetes/etcdEncryption/etcdEncryptionConfig.conf << EOF
kind: EncryptionConfig
apiVersion: v1
resources:
  - resources:
    - secrets
    providers:
    - aescbc:
        keys:
        - name: key1
          secret: ${EtcdEncryptionKey}
    - identity: {}
```

Create a secret
```
kubectl create secret generic personal-secret --from-literal=username=munai --from-literal=password=supser-strong-pass
```
Retrive the secret
```
kubectl get secrets personal-secret  -o yaml
```

**Anything else we need to know?**:

**Environment**:
- Kubernetes version (use `kubectl version`):
```./kubectl version
Client Version: version.Info{Major:""1"", Minor:""12"", GitVersion:""v1.12.5"", GitCommit:""51dd616cdd25d6ee22c83a858773b607328a18ec"", GitTreeState:""clean"", BuildDate:""2019-01-16T18:24:45Z"", GoVersion:""go1.10.7"", Compiler:""gc"", Platform:""darwin/amd64""}
Server Version: version.Info{Major:""1"", Minor:""12"", GitVersion:""v1.12.5"", GitCommit:""51dd616cdd25d6ee22c83a858773b607328a18ec"", GitTreeState:""clean"", BuildDate:""2019-01-16T18:14:49Z"", GoVersion:""go1.10.7"", Compiler:""gc"", Platform:""linux/amd64""}
```
- Cloud provider or hardware configuration:
AWS - EC2
- OS (e.g: `cat /etc/os-release`):
```
cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
```
- Kernel (e.g. `uname -a`):
```uname -a
Linux ip-10-13-0-207.us-west-2.compute.internal 3.10.0-957.10.1.el7.x86_64 #1 SMP Mon Mar 18 15:06:45 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
```
- Install tools:
kubeadm
- Others:
",literal=username=munai,https://github.com/kubernetes/kubernetes
23,76667.0,"<!-- Please use this template while reporting a bug and provide as much info as possible. Not doing so may result in your bug not being addressed in a timely manner. Thanks!

If the matter is security related, please disclose it privately via https://kubernetes.io/security/
-->


**What happened**:

```
kubectl get secrets personal-secret  -o yaml
Error from server: illegal base64 data at input byte 3
```

this is the output most of the times. It sometimes gives the correct output also.

**What you expected to happen**:
```
kubectl get secrets personal-secret  -o yaml
apiVersion: v1
data:
  password: c3Vwc2VyLXN0cm9uZy1wYXNz
  username: bXVuYWk=
kind: Secret
metadata:
  creationTimestamp: 2019-04-16T15:07:24Z
  name: personal-secret
  namespace: default
  resourceVersion: ""74250""
  selfLink: /api/v1/namespaces/default/secrets/personal-secret
  uid: 57288509-6059-11e9-affd-021b36e1a948
type: Opaque
```

**How to reproduce it (as minimally and precisely as possible)**:

For encryption of etcd I followed [docs](https://v1-12.docs.kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)

Encryption Config with aescbc
```
EtcdEncryptionKey=$(head -c 32 /dev/urandom | base64)
```
```cat >> /etc/kubernetes/etcdEncryption/etcdEncryptionConfig.conf << EOF
kind: EncryptionConfig
apiVersion: v1
resources:
  - resources:
    - secrets
    providers:
    - aescbc:
        keys:
        - name: key1
          secret: ${EtcdEncryptionKey}
    - identity: {}
```

Create a secret
```
kubectl create secret generic personal-secret --from-literal=username=munai --from-literal=password=supser-strong-pass
```
Retrive the secret
```
kubectl get secrets personal-secret  -o yaml
```

**Anything else we need to know?**:

**Environment**:
- Kubernetes version (use `kubectl version`):
```./kubectl version
Client Version: version.Info{Major:""1"", Minor:""12"", GitVersion:""v1.12.5"", GitCommit:""51dd616cdd25d6ee22c83a858773b607328a18ec"", GitTreeState:""clean"", BuildDate:""2019-01-16T18:24:45Z"", GoVersion:""go1.10.7"", Compiler:""gc"", Platform:""darwin/amd64""}
Server Version: version.Info{Major:""1"", Minor:""12"", GitVersion:""v1.12.5"", GitCommit:""51dd616cdd25d6ee22c83a858773b607328a18ec"", GitTreeState:""clean"", BuildDate:""2019-01-16T18:14:49Z"", GoVersion:""go1.10.7"", Compiler:""gc"", Platform:""linux/amd64""}
```
- Cloud provider or hardware configuration:
AWS - EC2
- OS (e.g: `cat /etc/os-release`):
```
cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
```
- Kernel (e.g. `uname -a`):
```uname -a
Linux ip-10-13-0-207.us-west-2.compute.internal 3.10.0-957.10.1.el7.x86_64 #1 SMP Mon Mar 18 15:06:45 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
```
- Install tools:
kubeadm
- Others:
",bXVuYWk=,https://github.com/kubernetes/kubernetes
24,76010.0,"I set kubernetes cluster by kubeadm on my local ubuntu server. I tried to encrypt etcd by the same way as https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/ , then it breaks `/registry/secrets/default/default-token-xxxxx`

here is my encryption configuration file.

```yaml
    kind: EncryptionConfiguration
    apiVersion: apiserver.config.k8s.io/v1
    resources:
      - resources:
        - secrets
        providers:
        - aescbc:
            keys:
            - name: key1
              secret: F3rax7e5B/gGbAR8LLLLbPAp+R4W8KGXKjXfhTp8bb0=
            - name: key2
              secret: yuat0/ntgNh8d4NJwkWWSCdi7/WCYJ7AGfjTSU1XKHE=
```

and after created it, I configured my kube-apiserver.yaml like below.

```yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --advertise-address=xx.x.xxx.xxx
    - --allow-privileged=true
    - --authorization-mode=Node,RBAC
    - --client-ca-file=/path/to/my/ca.crt
    - --enable-admission-plugins=NodeRestriction
    - --enable-bootstrap-token-auth=true
    - --etcd-cafile=/path/to/my/etcd/ca.crt
    - --etcd-certfile=/path/to/my/apiserver-etcd-client.crt
    - --etcd-keyfile=/path/to/my/apiserver-etcd-client.key
    - --etcd-servers=https://127.0.0.1:2379
    - --encryption-provider-config=/path/to/enc/encryption_conf.yaml
    - --insecure-port=0
    - --kubelet-client-certificate=/path/to/myapiserver-kubelet-client.crt
    - --kubelet-client-key=/path/to/my/apiserver-kubelet-client.key
    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    - --proxy-client-cert-file=/path/to/my/front-proxy-client.crt
    - --proxy-client-key-file=/path/to/my/front-proxy-client.key
    - --requestheader-allowed-names=front-proxy-client
    - --requestheader-client-ca-file=/path/to/my/front-proxy-ca.crt
    - --requestheader-extra-headers-prefix=X-Remote-Extra-
    - --requestheader-group-headers=X-Remote-Group
    - --requestheader-username-headers=X-Remote-User
    - --secure-port=6443
    - --service-account-key-file=/path/to/my/sa.pub
    - --service-cluster-ip-range=10.96.0.0/12
    - --tls-cert-file=/path/to/my/apiserver.crt
    - --tls-private-key-file=/path/to/my/apiserver.key
    image: k8s.gcr.io/kube-apiserver:v1.14.0
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: xx.x.xxx.xxx
        path: /healthz
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 15
      timeoutSeconds: 15
    name: kube-apiserver
    resources:
      requests:
        cpu: 250m
    volumeMounts:
    - mountPath: /path/to/enc
      name: encryption-conf
      readOnly: true
  ...
  hostNetwork: true
  priorityClassName: system-cluster-critical
  volumes:
  - hostPath:
      path: /path/to/enc
      type: DirectoryOrCreate
    name: encryption-conf
 ...
status: {}
```

after restarting apiserver, `unable to transform key ""/registry/secrets/default/default-token-xxx"": no matching prefix found` appeared.

**environment**

- Ubuntu Server 18.04
- build cluster by using kubeadm(v1.14.0)
- `kubectl version`: v1.14.0
- cni:  Calico(v3.5)

/kind bug",cluster-ip-range,https://github.com/kubernetes/kubernetes
25,76010.0,"I set kubernetes cluster by kubeadm on my local ubuntu server. I tried to encrypt etcd by the same way as https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/ , then it breaks `/registry/secrets/default/default-token-xxxxx`

here is my encryption configuration file.

```yaml
    kind: EncryptionConfiguration
    apiVersion: apiserver.config.k8s.io/v1
    resources:
      - resources:
        - secrets
        providers:
        - aescbc:
            keys:
            - name: key1
              secret: F3rax7e5B/gGbAR8LLLLbPAp+R4W8KGXKjXfhTp8bb0=
            - name: key2
              secret: yuat0/ntgNh8d4NJwkWWSCdi7/WCYJ7AGfjTSU1XKHE=
```

and after created it, I configured my kube-apiserver.yaml like below.

```yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --advertise-address=xx.x.xxx.xxx
    - --allow-privileged=true
    - --authorization-mode=Node,RBAC
    - --client-ca-file=/path/to/my/ca.crt
    - --enable-admission-plugins=NodeRestriction
    - --enable-bootstrap-token-auth=true
    - --etcd-cafile=/path/to/my/etcd/ca.crt
    - --etcd-certfile=/path/to/my/apiserver-etcd-client.crt
    - --etcd-keyfile=/path/to/my/apiserver-etcd-client.key
    - --etcd-servers=https://127.0.0.1:2379
    - --encryption-provider-config=/path/to/enc/encryption_conf.yaml
    - --insecure-port=0
    - --kubelet-client-certificate=/path/to/myapiserver-kubelet-client.crt
    - --kubelet-client-key=/path/to/my/apiserver-kubelet-client.key
    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    - --proxy-client-cert-file=/path/to/my/front-proxy-client.crt
    - --proxy-client-key-file=/path/to/my/front-proxy-client.key
    - --requestheader-allowed-names=front-proxy-client
    - --requestheader-client-ca-file=/path/to/my/front-proxy-ca.crt
    - --requestheader-extra-headers-prefix=X-Remote-Extra-
    - --requestheader-group-headers=X-Remote-Group
    - --requestheader-username-headers=X-Remote-User
    - --secure-port=6443
    - --service-account-key-file=/path/to/my/sa.pub
    - --service-cluster-ip-range=10.96.0.0/12
    - --tls-cert-file=/path/to/my/apiserver.crt
    - --tls-private-key-file=/path/to/my/apiserver.key
    image: k8s.gcr.io/kube-apiserver:v1.14.0
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: xx.x.xxx.xxx
        path: /healthz
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 15
      timeoutSeconds: 15
    name: kube-apiserver
    resources:
      requests:
        cpu: 250m
    volumeMounts:
    - mountPath: /path/to/enc
      name: encryption-conf
      readOnly: true
  ...
  hostNetwork: true
  priorityClassName: system-cluster-critical
  volumes:
  - hostPath:
      path: /path/to/enc
      type: DirectoryOrCreate
    name: encryption-conf
 ...
status: {}
```

after restarting apiserver, `unable to transform key ""/registry/secrets/default/default-token-xxx"": no matching prefix found` appeared.

**environment**

- Ubuntu Server 18.04
- build cluster by using kubeadm(v1.14.0)
- `kubectl version`: v1.14.0
- cni:  Calico(v3.5)

/kind bug",encryption-provider-config,https://github.com/kubernetes/kubernetes
26,76010.0,"I set kubernetes cluster by kubeadm on my local ubuntu server. I tried to encrypt etcd by the same way as https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/ , then it breaks `/registry/secrets/default/default-token-xxxxx`

here is my encryption configuration file.

```yaml
    kind: EncryptionConfiguration
    apiVersion: apiserver.config.k8s.io/v1
    resources:
      - resources:
        - secrets
        providers:
        - aescbc:
            keys:
            - name: key1
              secret: F3rax7e5B/gGbAR8LLLLbPAp+R4W8KGXKjXfhTp8bb0=
            - name: key2
              secret: yuat0/ntgNh8d4NJwkWWSCdi7/WCYJ7AGfjTSU1XKHE=
```

and after created it, I configured my kube-apiserver.yaml like below.

```yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --advertise-address=xx.x.xxx.xxx
    - --allow-privileged=true
    - --authorization-mode=Node,RBAC
    - --client-ca-file=/path/to/my/ca.crt
    - --enable-admission-plugins=NodeRestriction
    - --enable-bootstrap-token-auth=true
    - --etcd-cafile=/path/to/my/etcd/ca.crt
    - --etcd-certfile=/path/to/my/apiserver-etcd-client.crt
    - --etcd-keyfile=/path/to/my/apiserver-etcd-client.key
    - --etcd-servers=https://127.0.0.1:2379
    - --encryption-provider-config=/path/to/enc/encryption_conf.yaml
    - --insecure-port=0
    - --kubelet-client-certificate=/path/to/myapiserver-kubelet-client.crt
    - --kubelet-client-key=/path/to/my/apiserver-kubelet-client.key
    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    - --proxy-client-cert-file=/path/to/my/front-proxy-client.crt
    - --proxy-client-key-file=/path/to/my/front-proxy-client.key
    - --requestheader-allowed-names=front-proxy-client
    - --requestheader-client-ca-file=/path/to/my/front-proxy-ca.crt
    - --requestheader-extra-headers-prefix=X-Remote-Extra-
    - --requestheader-group-headers=X-Remote-Group
    - --requestheader-username-headers=X-Remote-User
    - --secure-port=6443
    - --service-account-key-file=/path/to/my/sa.pub
    - --service-cluster-ip-range=10.96.0.0/12
    - --tls-cert-file=/path/to/my/apiserver.crt
    - --tls-private-key-file=/path/to/my/apiserver.key
    image: k8s.gcr.io/kube-apiserver:v1.14.0
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: xx.x.xxx.xxx
        path: /healthz
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 15
      timeoutSeconds: 15
    name: kube-apiserver
    resources:
      requests:
        cpu: 250m
    volumeMounts:
    - mountPath: /path/to/enc
      name: encryption-conf
      readOnly: true
  ...
  hostNetwork: true
  priorityClassName: system-cluster-critical
  volumes:
  - hostPath:
      path: /path/to/enc
      type: DirectoryOrCreate
    name: encryption-conf
 ...
status: {}
```

after restarting apiserver, `unable to transform key ""/registry/secrets/default/default-token-xxx"": no matching prefix found` appeared.

**environment**

- Ubuntu Server 18.04
- build cluster by using kubeadm(v1.14.0)
- `kubectl version`: v1.14.0
- cni:  Calico(v3.5)

/kind bug","types=InternalIP,ExternalIP,Hostname",https://github.com/kubernetes/kubernetes
27,76010.0,"I set kubernetes cluster by kubeadm on my local ubuntu server. I tried to encrypt etcd by the same way as https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/ , then it breaks `/registry/secrets/default/default-token-xxxxx`

here is my encryption configuration file.

```yaml
    kind: EncryptionConfiguration
    apiVersion: apiserver.config.k8s.io/v1
    resources:
      - resources:
        - secrets
        providers:
        - aescbc:
            keys:
            - name: key1
              secret: F3rax7e5B/gGbAR8LLLLbPAp+R4W8KGXKjXfhTp8bb0=
            - name: key2
              secret: yuat0/ntgNh8d4NJwkWWSCdi7/WCYJ7AGfjTSU1XKHE=
```

and after created it, I configured my kube-apiserver.yaml like below.

```yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --advertise-address=xx.x.xxx.xxx
    - --allow-privileged=true
    - --authorization-mode=Node,RBAC
    - --client-ca-file=/path/to/my/ca.crt
    - --enable-admission-plugins=NodeRestriction
    - --enable-bootstrap-token-auth=true
    - --etcd-cafile=/path/to/my/etcd/ca.crt
    - --etcd-certfile=/path/to/my/apiserver-etcd-client.crt
    - --etcd-keyfile=/path/to/my/apiserver-etcd-client.key
    - --etcd-servers=https://127.0.0.1:2379
    - --encryption-provider-config=/path/to/enc/encryption_conf.yaml
    - --insecure-port=0
    - --kubelet-client-certificate=/path/to/myapiserver-kubelet-client.crt
    - --kubelet-client-key=/path/to/my/apiserver-kubelet-client.key
    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    - --proxy-client-cert-file=/path/to/my/front-proxy-client.crt
    - --proxy-client-key-file=/path/to/my/front-proxy-client.key
    - --requestheader-allowed-names=front-proxy-client
    - --requestheader-client-ca-file=/path/to/my/front-proxy-ca.crt
    - --requestheader-extra-headers-prefix=X-Remote-Extra-
    - --requestheader-group-headers=X-Remote-Group
    - --requestheader-username-headers=X-Remote-User
    - --secure-port=6443
    - --service-account-key-file=/path/to/my/sa.pub
    - --service-cluster-ip-range=10.96.0.0/12
    - --tls-cert-file=/path/to/my/apiserver.crt
    - --tls-private-key-file=/path/to/my/apiserver.key
    image: k8s.gcr.io/kube-apiserver:v1.14.0
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: xx.x.xxx.xxx
        path: /healthz
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 15
      timeoutSeconds: 15
    name: kube-apiserver
    resources:
      requests:
        cpu: 250m
    volumeMounts:
    - mountPath: /path/to/enc
      name: encryption-conf
      readOnly: true
  ...
  hostNetwork: true
  priorityClassName: system-cluster-critical
  volumes:
  - hostPath:
      path: /path/to/enc
      type: DirectoryOrCreate
    name: encryption-conf
 ...
status: {}
```

after restarting apiserver, `unable to transform key ""/registry/secrets/default/default-token-xxx"": no matching prefix found` appeared.

**environment**

- Ubuntu Server 18.04
- build cluster by using kubeadm(v1.14.0)
- `kubectl version`: v1.14.0
- cni:  Calico(v3.5)

/kind bug",names=front-proxy-client,https://github.com/kubernetes/kubernetes
28,76010.0,"I set kubernetes cluster by kubeadm on my local ubuntu server. I tried to encrypt etcd by the same way as https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/ , then it breaks `/registry/secrets/default/default-token-xxxxx`

here is my encryption configuration file.

```yaml
    kind: EncryptionConfiguration
    apiVersion: apiserver.config.k8s.io/v1
    resources:
      - resources:
        - secrets
        providers:
        - aescbc:
            keys:
            - name: key1
              secret: F3rax7e5B/gGbAR8LLLLbPAp+R4W8KGXKjXfhTp8bb0=
            - name: key2
              secret: yuat0/ntgNh8d4NJwkWWSCdi7/WCYJ7AGfjTSU1XKHE=
```

and after created it, I configured my kube-apiserver.yaml like below.

```yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --advertise-address=xx.x.xxx.xxx
    - --allow-privileged=true
    - --authorization-mode=Node,RBAC
    - --client-ca-file=/path/to/my/ca.crt
    - --enable-admission-plugins=NodeRestriction
    - --enable-bootstrap-token-auth=true
    - --etcd-cafile=/path/to/my/etcd/ca.crt
    - --etcd-certfile=/path/to/my/apiserver-etcd-client.crt
    - --etcd-keyfile=/path/to/my/apiserver-etcd-client.key
    - --etcd-servers=https://127.0.0.1:2379
    - --encryption-provider-config=/path/to/enc/encryption_conf.yaml
    - --insecure-port=0
    - --kubelet-client-certificate=/path/to/myapiserver-kubelet-client.crt
    - --kubelet-client-key=/path/to/my/apiserver-kubelet-client.key
    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    - --proxy-client-cert-file=/path/to/my/front-proxy-client.crt
    - --proxy-client-key-file=/path/to/my/front-proxy-client.key
    - --requestheader-allowed-names=front-proxy-client
    - --requestheader-client-ca-file=/path/to/my/front-proxy-ca.crt
    - --requestheader-extra-headers-prefix=X-Remote-Extra-
    - --requestheader-group-headers=X-Remote-Group
    - --requestheader-username-headers=X-Remote-User
    - --secure-port=6443
    - --service-account-key-file=/path/to/my/sa.pub
    - --service-cluster-ip-range=10.96.0.0/12
    - --tls-cert-file=/path/to/my/apiserver.crt
    - --tls-private-key-file=/path/to/my/apiserver.key
    image: k8s.gcr.io/kube-apiserver:v1.14.0
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: xx.x.xxx.xxx
        path: /healthz
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 15
      timeoutSeconds: 15
    name: kube-apiserver
    resources:
      requests:
        cpu: 250m
    volumeMounts:
    - mountPath: /path/to/enc
      name: encryption-conf
      readOnly: true
  ...
  hostNetwork: true
  priorityClassName: system-cluster-critical
  volumes:
  - hostPath:
      path: /path/to/enc
      type: DirectoryOrCreate
    name: encryption-conf
 ...
status: {}
```

after restarting apiserver, `unable to transform key ""/registry/secrets/default/default-token-xxx"": no matching prefix found` appeared.

**environment**

- Ubuntu Server 18.04
- build cluster by using kubeadm(v1.14.0)
- `kubectl version`: v1.14.0
- cni:  Calico(v3.5)

/kind bug",R4W8KGXKjXfhTp8bb0,https://github.com/kubernetes/kubernetes
29,69850.0,"Microsoft.AspNetCore.Session.SessionMiddleware[7]
      Error unprotecting the session cookie.
System.Security.Cryptography.CryptographicException: The key {d13b9581-1fee-45c2-ad1b-e89680402540} was not found in the key ring.
   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.UnprotectCore(Byte[] protectedData, Boolean allowOperationsOnRevokedKeys, UnprotectStatus& status)
   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.DangerousUnprotect(Byte[] protectedData, Boolean ignoreRevocationErrors, Boolean& requiresMigration, Boolean& wasRevoked)
   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.Unprotect(Byte[] protectedData)
   at Microsoft.AspNetCore.Session.CookieProtection.Unprotect(IDataProtector protector, String protectedText, ILogger logger)",d13b9581-1fee-45c2-ad1b-e89680402540,https://github.com/kubernetes/kubernetes
30,69850.0,"Microsoft.AspNetCore.Session.SessionMiddleware[7]
      Error unprotecting the session cookie.
System.Security.Cryptography.CryptographicException: The key {d13b9581-1fee-45c2-ad1b-e89680402540} was not found in the key ring.
   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.UnprotectCore(Byte[] protectedData, Boolean allowOperationsOnRevokedKeys, UnprotectStatus& status)
   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.DangerousUnprotect(Byte[] protectedData, Boolean ignoreRevocationErrors, Boolean& requiresMigration, Boolean& wasRevoked)
   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.Unprotect(Byte[] protectedData)
   at Microsoft.AspNetCore.Session.CookieProtection.Unprotect(IDataProtector protector, String protectedText, ILogger logger)",ad1b-e89680402540,https://github.com/kubernetes/kubernetes
31,64492.0,"<!-- This form is for bug reports and feature requests ONLY!

If you're looking for help check [Stack Overflow](https://stackoverflow.com/questions/tagged/kubernetes) and the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).

If this may be security issue, please disclose it privately via https://kubernetes.io/security/.
-->

**Is this a BUG REPORT or FEATURE REQUEST?**:

> Uncomment only one, leave it on its own line:
>
/kind bug
> /kind feature


**What happened**:
When get resource with invalid token, the error info kubectl outputs is wrong.
For example:
`kubectl get pod --token=eyJhbGciOiJSUzI1NiIsIm`

Apparently, the token here is invalid. And the kubectl will output error info like
`error: the server doesn't have a resource type ""pod""`
It would mislead user.

**How to reproduce it (as minimally and precisely as possible)**:


**Anything else we need to know?**:

**Environment**:
- Kubernetes version (use `kubectl version`):
- Cloud provider or hardware configuration:
- OS (e.g. from /etc/os-release):
- Kernel (e.g. `uname -a`):
- Install tools:
- Others:
",eyJhbGciOiJSUzI1NiIsIm,https://github.com/kubernetes/kubernetes
32,63648.0,"**What happened**:

When i use ceph rbd storageclass create persistent volume claim, it always in `pending` status, `kubectl describe ` get follow event:

```
Events:
  Type     Reason              Age   From                         Message
  ----     ------              ----  ----                         -------
  Warning  ProvisioningFailed  9s    persistentvolume-controller  Failed to provision volume with StorageClass ""ceph-storage"": failed to create rbd image: exit status 1, command output: 2018-05-10 08:33:15.897889 7fad4ac81780 -1 did not load config file, using default settings.
rbd: extraneous parameter --image-feature
```

ceph-storageclass-secret:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: ceph-storageclass-secret
type: kubernetes.io/rbd
data:
  key: QVFBOEt1QmE3Qm0vSGhBQWtFQlFZSkFKQmxYcFZoeXJSdTM2Vnc9PQ==
```

storageclass yaml config:

```yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ceph-storage
provisioner: kubernetes.io/rbd
parameters:
  monitors: 10.244.4.148:6789,10.244.4.136:6789,10.244.4.143:6789
  adminId: admin
  adminSecretName: ceph-storageclass-secret
  pool: rbd
  userId: admin
  userSecretName: ceph-storageclass-secret
```

ceph-storage-pvc yaml:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: test-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
```


**Environment**:
- Kubernetes version: v1.8.2+coreos.0
- OS: CentOS 7.4
- Kernel: 3.10.0-693.11.6.el7.x86_64
- Install tools: kubespray

Thanks guys.",storageclass-secret,https://github.com/kubernetes/kubernetes
33,63648.0,"**What happened**:

When i use ceph rbd storageclass create persistent volume claim, it always in `pending` status, `kubectl describe ` get follow event:

```
Events:
  Type     Reason              Age   From                         Message
  ----     ------              ----  ----                         -------
  Warning  ProvisioningFailed  9s    persistentvolume-controller  Failed to provision volume with StorageClass ""ceph-storage"": failed to create rbd image: exit status 1, command output: 2018-05-10 08:33:15.897889 7fad4ac81780 -1 did not load config file, using default settings.
rbd: extraneous parameter --image-feature
```

ceph-storageclass-secret:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: ceph-storageclass-secret
type: kubernetes.io/rbd
data:
  key: QVFBOEt1QmE3Qm0vSGhBQWtFQlFZSkFKQmxYcFZoeXJSdTM2Vnc9PQ==
```

storageclass yaml config:

```yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ceph-storage
provisioner: kubernetes.io/rbd
parameters:
  monitors: 10.244.4.148:6789,10.244.4.136:6789,10.244.4.143:6789
  adminId: admin
  adminSecretName: ceph-storageclass-secret
  pool: rbd
  userId: admin
  userSecretName: ceph-storageclass-secret
```

ceph-storage-pvc yaml:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: test-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
```


**Environment**:
- Kubernetes version: v1.8.2+coreos.0
- OS: CentOS 7.4
- Kernel: 3.10.0-693.11.6.el7.x86_64
- Install tools: kubespray

Thanks guys.",QVFBOEt1QmE3Qm0vSGhBQWtFQlFZSkFKQmxYcFZoeXJSdTM2Vnc9PQ,https://github.com/kubernetes/kubernetes
34,63648.0,"**What happened**:

When i use ceph rbd storageclass create persistent volume claim, it always in `pending` status, `kubectl describe ` get follow event:

```
Events:
  Type     Reason              Age   From                         Message
  ----     ------              ----  ----                         -------
  Warning  ProvisioningFailed  9s    persistentvolume-controller  Failed to provision volume with StorageClass ""ceph-storage"": failed to create rbd image: exit status 1, command output: 2018-05-10 08:33:15.897889 7fad4ac81780 -1 did not load config file, using default settings.
rbd: extraneous parameter --image-feature
```

ceph-storageclass-secret:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: ceph-storageclass-secret
type: kubernetes.io/rbd
data:
  key: QVFBOEt1QmE3Qm0vSGhBQWtFQlFZSkFKQmxYcFZoeXJSdTM2Vnc9PQ==
```

storageclass yaml config:

```yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ceph-storage
provisioner: kubernetes.io/rbd
parameters:
  monitors: 10.244.4.148:6789,10.244.4.136:6789,10.244.4.143:6789
  adminId: admin
  adminSecretName: ceph-storageclass-secret
  pool: rbd
  userId: admin
  userSecretName: ceph-storageclass-secret
```

ceph-storage-pvc yaml:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: test-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
```


**Environment**:
- Kubernetes version: v1.8.2+coreos.0
- OS: CentOS 7.4
- Kernel: 3.10.0-693.11.6.el7.x86_64
- Install tools: kubespray

Thanks guys.",ceph-storage-pvc,https://github.com/kubernetes/kubernetes
35,63648.0,"**What happened**:

When i use ceph rbd storageclass create persistent volume claim, it always in `pending` status, `kubectl describe ` get follow event:

```
Events:
  Type     Reason              Age   From                         Message
  ----     ------              ----  ----                         -------
  Warning  ProvisioningFailed  9s    persistentvolume-controller  Failed to provision volume with StorageClass ""ceph-storage"": failed to create rbd image: exit status 1, command output: 2018-05-10 08:33:15.897889 7fad4ac81780 -1 did not load config file, using default settings.
rbd: extraneous parameter --image-feature
```

ceph-storageclass-secret:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: ceph-storageclass-secret
type: kubernetes.io/rbd
data:
  key: QVFBOEt1QmE3Qm0vSGhBQWtFQlFZSkFKQmxYcFZoeXJSdTM2Vnc9PQ==
```

storageclass yaml config:

```yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ceph-storage
provisioner: kubernetes.io/rbd
parameters:
  monitors: 10.244.4.148:6789,10.244.4.136:6789,10.244.4.143:6789
  adminId: admin
  adminSecretName: ceph-storageclass-secret
  pool: rbd
  userId: admin
  userSecretName: ceph-storageclass-secret
```

ceph-storage-pvc yaml:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: test-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
```


**Environment**:
- Kubernetes version: v1.8.2+coreos.0
- OS: CentOS 7.4
- Kernel: 3.10.0-693.11.6.el7.x86_64
- Install tools: kubespray

Thanks guys.",QVFBOEt1QmE3Qm0vSGhBQWtFQlFZSkFKQmxYcFZoeXJSdTM2Vn,https://github.com/kubernetes/kubernetes
36,50857.0,"/kind bug
/sig api-machinery

kubernetes is sending a broken response when watching logs over HTTP 1.1. It sends a chunked response without sending the the size of the chunk first.

[Relevant RFC for reference.](https://tools.ietf.org/html/rfc7230#section-4.1)

Example:
```
curl --http1.1 -kv 'https://192.168.99.100:8443/api/v1/namespaces/default/pods/nginx-1423793266-mq53r/log?follow=true' -H ""Authorization: Bearer $TOKEN""
*   Trying 192.168.99.100...
* TCP_NODELAY set
* Connected to 192.168.99.100 (192.168.99.100) port 8443 (#0)
* Initializing NSS with certpath: sql:/etc/pki/nssdb
* skipping SSL peer certificate verification
* NSS: client certificate not found (nickname not specified)
* ALPN, server accepted to use http/1.1
* SSL connection using TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
* Server certificate:
* 	subject: CN=minikube,O=system:masters
* 	start date: Aug 17 17:04:24 2017 GMT
* 	expire date: Aug 17 17:04:24 2018 GMT
* 	common name: minikube
* 	issuer: CN=minikubeCA
> GET /api/v1/namespaces/default/pods/nginx-1423793266-mq53r/log?follow=true HTTP/1.1
> Host: 192.168.99.100:8443
> User-Agent: curl/7.53.1
> Accept: */*
> Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tZjl2bHAiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjI1MDRlOWFkLTgzNmUtMTFlNy05MWIwLTA4MDAyN2MzY2I1NyIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.QFajWXR2ZFg72giS_kuudL0Lz5yPGZ_sQdaYRrwAyOjfVwcPWqjnFOwyqCesKrqMsdQkAWLNYiCb1h4SxpBW9HPjymAisqcO3Dq8azL9zMpFHwbZNtboUrSz5XuWtun3zOgbG3JhK-KZTuD2yP241Aaf0QAFZ80k-5ZT4chELQ-gQzCJco_8kv1trhCmveKk0aozMApKYQOJPpN0Z-cPCHEOxUsEMk2mtJEd2IvaFl6QerHKA-guUPuYMkbWAM_GMZh_D5IGcsAj9x9gJb7d5EvbMx4qYW_hW0SGbDIcwxdjAY4_Nv0xrOmYWIh789RcmM2ikCH5gOpesF8hhdUWjg
> 
< HTTP/1.1 200 OK
< Content-Type: text/plain
< Date: Thu, 17 Aug 2017 17:45:03 GMT
< Transfer-Encoding: chunked
< 
172.17.0.1 - - [17/Aug/2017:17:43:54 +0000] ""GET / HTTP/1.1"" 200 612 ""-"" ""curl/7.53.1"" ""-""
```

**Environment**:
- Kubernetes version (use `kubectl version`):
```
Client Version: version.Info{Major:""1"", Minor:""7"", GitVersion:""v1.7.0+695f48a16f"", GitCommit:""d2e5420"", GitTreeState:""clean"", BuildDate:""2017-08-10T18:57:36Z"", GoVersion:""go1.8.3"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""7"", GitVersion:""v1.7.0"", GitCommit:""d3ada0119e776222f11ec7945e6d860061339aad"", GitTreeState:""clean"", BuildDate:""2017-07-26T00:12:31Z"", GoVersion:""go1.8.3"", Compiler:""gc"", Platform:""linux/amd64""}
```",KZTuD2yP241Aaf0QAFZ80k-5ZT4chELQ-gQzCJco_8kv1trhCmveKk0aozMApKYQOJPpN0Z-cPCHEOxUsEMk2mtJEd2IvaFl6QerHKA-guUPuYMkbWAM_GMZh_D5IGcsAj9x9gJb7d5EvbMx4qYW_hW0SGbDIcwxdjAY4_Nv0xrOmYWIh789RcmM2ikCH5gOpesF8hhdUWjg,https://github.com/kubernetes/kubernetes
37,50432.0,"**Is this a BUG REPORT or FEATURE REQUEST?**: BUG REPORT


**What happened**:
I have configured oidc with kubernetes. But when i try `kubectl --user=spnzip@gmail.com get nodes` i get `error from server (Forbidden): User ""system:anonymous"" cannot list nodes at the cluster scope. (get nodes)
`

**What you expected to happen**:
The command should authenticate user and display the nodes 

**How to reproduce it (as minimally and precisely as possible)**:
1. Install single node kubernetes cluster with kubeadm
2. Obtain client secrets with the k8s-oidc-helper tool
k8s-oidc-helper -c <path where user's client id and secret is stored)
3. copy paste the code generated to ~/.kube/config file
```
- name: spnzig@gmail.com
  user:
    auth-provider:
      config:
        client-id: xxxxxxxxxx-xxxxxxx.apps.googleusercontent.com
        client-secret: xxxxxxxxxxxxxxxxxxxxxxx
        id-token: eyJhbGciOiJSUzI1NiIsImtpZCI6IjczMTdkOTM1MWQ1Y .... njZaIWlMaAFEfIrGPy-49TQ
        idp-issuer-url: https://accounts.google.com
        refresh-token: 1/3XPbQPD...g8PuNPs
      name: oidc
```

4. Set the context for the new user in ~/.kube/config file
```
- context:
    cluster: kubernetes
    user: spnzig@gmail.com
  name: spnzig@kubernetes
```

5. Switch context from admin to new user
`kubectl config use-context spnzig@kubernetes `
 
6. Run kubectl --user=spnzig@gmail.com get nodes to see the error 
`kubectl --user=spnzig@gmail.com get nodes`

**Anything else we need to know?**:
I have installed kubernetes on Ubuntu 16.04LTS.

**Environment**:
- Kubernetes version (use `kubectl version`): v1.7.3
- Cloud provider or hardware configuration**: hardware 
- OS (e.g. from /etc/os-release): Ubuntu 16.04
- Install tools: kubeadm, kubernetes, k8s-oidc-helper, go

",xxxxxxxxxxxxxxxxxxxxxxx,https://github.com/kubernetes/kubernetes
38,50432.0,"**Is this a BUG REPORT or FEATURE REQUEST?**: BUG REPORT


**What happened**:
I have configured oidc with kubernetes. But when i try `kubectl --user=spnzip@gmail.com get nodes` i get `error from server (Forbidden): User ""system:anonymous"" cannot list nodes at the cluster scope. (get nodes)
`

**What you expected to happen**:
The command should authenticate user and display the nodes 

**How to reproduce it (as minimally and precisely as possible)**:
1. Install single node kubernetes cluster with kubeadm
2. Obtain client secrets with the k8s-oidc-helper tool
k8s-oidc-helper -c <path where user's client id and secret is stored)
3. copy paste the code generated to ~/.kube/config file
```
- name: spnzig@gmail.com
  user:
    auth-provider:
      config:
        client-id: xxxxxxxxxx-xxxxxxx.apps.googleusercontent.com
        client-secret: xxxxxxxxxxxxxxxxxxxxxxx
        id-token: eyJhbGciOiJSUzI1NiIsImtpZCI6IjczMTdkOTM1MWQ1Y .... njZaIWlMaAFEfIrGPy-49TQ
        idp-issuer-url: https://accounts.google.com
        refresh-token: 1/3XPbQPD...g8PuNPs
      name: oidc
```

4. Set the context for the new user in ~/.kube/config file
```
- context:
    cluster: kubernetes
    user: spnzig@gmail.com
  name: spnzig@kubernetes
```

5. Switch context from admin to new user
`kubectl config use-context spnzig@kubernetes `
 
6. Run kubectl --user=spnzig@gmail.com get nodes to see the error 
`kubectl --user=spnzig@gmail.com get nodes`

**Anything else we need to know?**:
I have installed kubernetes on Ubuntu 16.04LTS.

**Environment**:
- Kubernetes version (use `kubectl version`): v1.7.3
- Cloud provider or hardware configuration**: hardware 
- OS (e.g. from /etc/os-release): Ubuntu 16.04
- Install tools: kubeadm, kubernetes, k8s-oidc-helper, go

",eyJhbGciOiJSUzI1NiIsImtpZCI6IjczMTdkOTM1MWQ1Y,https://github.com/kubernetes/kubernetes
39,36856.0,"From my current understanding, once I create a secret using something like the following, it is available to all pods in the namespace if they mount it into an environment variable or volume:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  password: MWYyZDFlMmU2N2Rm
  username: YWRtaW4=
```

It would be nice if we could scope secrets to a deployment. In this case, the secrets can only be mounted into a volume or environment variables for the deployment. When the deployment is deleted, the secrets are also deleted. This way, another pod would not be able to get access to secrets owned by the deployment.

The current work around is to use an environment variable directly in the deployment configuration, but environment variables are very insecure because a user can easily see the secret in plain text if he/she retrieves the deployment as a yaml file from the api server.",MWYyZDFlMmU2N2Rm,https://github.com/kubernetes/kubernetes
40,36856.0,"From my current understanding, once I create a secret using something like the following, it is available to all pods in the namespace if they mount it into an environment variable or volume:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  password: MWYyZDFlMmU2N2Rm
  username: YWRtaW4=
```

It would be nice if we could scope secrets to a deployment. In this case, the secrets can only be mounted into a volume or environment variables for the deployment. When the deployment is deleted, the secrets are also deleted. This way, another pod would not be able to get access to secrets owned by the deployment.

The current work around is to use an environment variable directly in the deployment configuration, but environment variables are very insecure because a user can easily see the secret in plain text if he/she retrieves the deployment as a yaml file from the api server.",YWRtaW4=,https://github.com/kubernetes/kubernetes
41,31548.0,"This seems like a strange sequence of events. I am attempting to create secrets in our cluster to contain database user passwords. The passwords are generated each time a secret is created. This worked great for 'root'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-root-secret
type: Opaque
data:
  password: [32 chars of stuff]
  username: root

secret ""mysqldb-root-secret"" created
```

These definitions are being specialized and then piped to 'kubectl create -f -', so I will just show the definition yaml and the result.

I then tried creating one for a user with a longer name, used in one of our services. Let's call him 'billy'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-billysservice-secret
type: Opaque
data:
  password: b64377d7043139fc99ddb8a693f9a709
  username: billy

unable to decode ""STDIN"": [pos 91]: json: error decoding base64 binary 'billy': illegal base64 data at input byte 4
```

So I thought perhaps if we call him 'bill'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: 6120fcf7640f052861fcac52087a0c72
  username: bill

secret ""mysqldb-paymentservice-secret"" created
```

It likes 'bill'. Would it also like 'bil'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: a1a6d51971227fe0a592c5da881954fe
  username: bil

unable to decode ""STDIN"": [pos 89]: json: error decoding base64 binary 'bil': illegal base64 data at input byte 0
```

Nope. In reality the name I want is even longer than ""billy"" and I don't want to change it. Am I doing something wrong here?
",billysservice-secret,https://github.com/kubernetes/kubernetes
42,31548.0,"This seems like a strange sequence of events. I am attempting to create secrets in our cluster to contain database user passwords. The passwords are generated each time a secret is created. This worked great for 'root'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-root-secret
type: Opaque
data:
  password: [32 chars of stuff]
  username: root

secret ""mysqldb-root-secret"" created
```

These definitions are being specialized and then piped to 'kubectl create -f -', so I will just show the definition yaml and the result.

I then tried creating one for a user with a longer name, used in one of our services. Let's call him 'billy'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-billysservice-secret
type: Opaque
data:
  password: b64377d7043139fc99ddb8a693f9a709
  username: billy

unable to decode ""STDIN"": [pos 91]: json: error decoding base64 binary 'billy': illegal base64 data at input byte 4
```

So I thought perhaps if we call him 'bill'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: 6120fcf7640f052861fcac52087a0c72
  username: bill

secret ""mysqldb-paymentservice-secret"" created
```

It likes 'bill'. Would it also like 'bil'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: a1a6d51971227fe0a592c5da881954fe
  username: bil

unable to decode ""STDIN"": [pos 89]: json: error decoding base64 binary 'bil': illegal base64 data at input byte 0
```

Nope. In reality the name I want is even longer than ""billy"" and I don't want to change it. Am I doing something wrong here?
",paymentservice-secret,https://github.com/kubernetes/kubernetes
43,31548.0,"This seems like a strange sequence of events. I am attempting to create secrets in our cluster to contain database user passwords. The passwords are generated each time a secret is created. This worked great for 'root'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-root-secret
type: Opaque
data:
  password: [32 chars of stuff]
  username: root

secret ""mysqldb-root-secret"" created
```

These definitions are being specialized and then piped to 'kubectl create -f -', so I will just show the definition yaml and the result.

I then tried creating one for a user with a longer name, used in one of our services. Let's call him 'billy'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-billysservice-secret
type: Opaque
data:
  password: b64377d7043139fc99ddb8a693f9a709
  username: billy

unable to decode ""STDIN"": [pos 91]: json: error decoding base64 binary 'billy': illegal base64 data at input byte 4
```

So I thought perhaps if we call him 'bill'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: 6120fcf7640f052861fcac52087a0c72
  username: bill

secret ""mysqldb-paymentservice-secret"" created
```

It likes 'bill'. Would it also like 'bil'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: a1a6d51971227fe0a592c5da881954fe
  username: bil

unable to decode ""STDIN"": [pos 89]: json: error decoding base64 binary 'bil': illegal base64 data at input byte 0
```

Nope. In reality the name I want is even longer than ""billy"" and I don't want to change it. Am I doing something wrong here?
",6120fcf7640f052861fcac52087a0c72,https://github.com/kubernetes/kubernetes
44,31548.0,"This seems like a strange sequence of events. I am attempting to create secrets in our cluster to contain database user passwords. The passwords are generated each time a secret is created. This worked great for 'root'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-root-secret
type: Opaque
data:
  password: [32 chars of stuff]
  username: root

secret ""mysqldb-root-secret"" created
```

These definitions are being specialized and then piped to 'kubectl create -f -', so I will just show the definition yaml and the result.

I then tried creating one for a user with a longer name, used in one of our services. Let's call him 'billy'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-billysservice-secret
type: Opaque
data:
  password: b64377d7043139fc99ddb8a693f9a709
  username: billy

unable to decode ""STDIN"": [pos 91]: json: error decoding base64 binary 'billy': illegal base64 data at input byte 4
```

So I thought perhaps if we call him 'bill'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: 6120fcf7640f052861fcac52087a0c72
  username: bill

secret ""mysqldb-paymentservice-secret"" created
```

It likes 'bill'. Would it also like 'bil'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: a1a6d51971227fe0a592c5da881954fe
  username: bil

unable to decode ""STDIN"": [pos 89]: json: error decoding base64 binary 'bil': illegal base64 data at input byte 0
```

Nope. In reality the name I want is even longer than ""billy"" and I don't want to change it. Am I doing something wrong here?
",mysqldb-root-secret,https://github.com/kubernetes/kubernetes
45,31548.0,"This seems like a strange sequence of events. I am attempting to create secrets in our cluster to contain database user passwords. The passwords are generated each time a secret is created. This worked great for 'root'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-root-secret
type: Opaque
data:
  password: [32 chars of stuff]
  username: root

secret ""mysqldb-root-secret"" created
```

These definitions are being specialized and then piped to 'kubectl create -f -', so I will just show the definition yaml and the result.

I then tried creating one for a user with a longer name, used in one of our services. Let's call him 'billy'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-billysservice-secret
type: Opaque
data:
  password: b64377d7043139fc99ddb8a693f9a709
  username: billy

unable to decode ""STDIN"": [pos 91]: json: error decoding base64 binary 'billy': illegal base64 data at input byte 4
```

So I thought perhaps if we call him 'bill'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: 6120fcf7640f052861fcac52087a0c72
  username: bill

secret ""mysqldb-paymentservice-secret"" created
```

It likes 'bill'. Would it also like 'bil'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: a1a6d51971227fe0a592c5da881954fe
  username: bil

unable to decode ""STDIN"": [pos 89]: json: error decoding base64 binary 'bil': illegal base64 data at input byte 0
```

Nope. In reality the name I want is even longer than ""billy"" and I don't want to change it. Am I doing something wrong here?
",a1a6d51971227fe0a592c5da881954fe,https://github.com/kubernetes/kubernetes
46,31548.0,"This seems like a strange sequence of events. I am attempting to create secrets in our cluster to contain database user passwords. The passwords are generated each time a secret is created. This worked great for 'root'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-root-secret
type: Opaque
data:
  password: [32 chars of stuff]
  username: root

secret ""mysqldb-root-secret"" created
```

These definitions are being specialized and then piped to 'kubectl create -f -', so I will just show the definition yaml and the result.

I then tried creating one for a user with a longer name, used in one of our services. Let's call him 'billy'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-billysservice-secret
type: Opaque
data:
  password: b64377d7043139fc99ddb8a693f9a709
  username: billy

unable to decode ""STDIN"": [pos 91]: json: error decoding base64 binary 'billy': illegal base64 data at input byte 4
```

So I thought perhaps if we call him 'bill'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: 6120fcf7640f052861fcac52087a0c72
  username: bill

secret ""mysqldb-paymentservice-secret"" created
```

It likes 'bill'. Would it also like 'bil'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: a1a6d51971227fe0a592c5da881954fe
  username: bil

unable to decode ""STDIN"": [pos 89]: json: error decoding base64 binary 'bil': illegal base64 data at input byte 0
```

Nope. In reality the name I want is even longer than ""billy"" and I don't want to change it. Am I doing something wrong here?
",b64377d7043139fc99ddb8a693f9a709,https://github.com/kubernetes/kubernetes
47,31548.0,"This seems like a strange sequence of events. I am attempting to create secrets in our cluster to contain database user passwords. The passwords are generated each time a secret is created. This worked great for 'root'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-root-secret
type: Opaque
data:
  password: [32 chars of stuff]
  username: root

secret ""mysqldb-root-secret"" created
```

These definitions are being specialized and then piped to 'kubectl create -f -', so I will just show the definition yaml and the result.

I then tried creating one for a user with a longer name, used in one of our services. Let's call him 'billy'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-billysservice-secret
type: Opaque
data:
  password: b64377d7043139fc99ddb8a693f9a709
  username: billy

unable to decode ""STDIN"": [pos 91]: json: error decoding base64 binary 'billy': illegal base64 data at input byte 4
```

So I thought perhaps if we call him 'bill'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: 6120fcf7640f052861fcac52087a0c72
  username: bill

secret ""mysqldb-paymentservice-secret"" created
```

It likes 'bill'. Would it also like 'bil'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: a1a6d51971227fe0a592c5da881954fe
  username: bil

unable to decode ""STDIN"": [pos 89]: json: error decoding base64 binary 'bil': illegal base64 data at input byte 0
```

Nope. In reality the name I want is even longer than ""billy"" and I don't want to change it. Am I doing something wrong here?
",generated,https://github.com/kubernetes/kubernetes
48,31548.0,"This seems like a strange sequence of events. I am attempting to create secrets in our cluster to contain database user passwords. The passwords are generated each time a secret is created. This worked great for 'root'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-root-secret
type: Opaque
data:
  password: [32 chars of stuff]
  username: root

secret ""mysqldb-root-secret"" created
```

These definitions are being specialized and then piped to 'kubectl create -f -', so I will just show the definition yaml and the result.

I then tried creating one for a user with a longer name, used in one of our services. Let's call him 'billy'.

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-billysservice-secret
type: Opaque
data:
  password: b64377d7043139fc99ddb8a693f9a709
  username: billy

unable to decode ""STDIN"": [pos 91]: json: error decoding base64 binary 'billy': illegal base64 data at input byte 4
```

So I thought perhaps if we call him 'bill'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: 6120fcf7640f052861fcac52087a0c72
  username: bill

secret ""mysqldb-paymentservice-secret"" created
```

It likes 'bill'. Would it also like 'bil'?

```
apiVersion: v1
kind: Secret
metadata:
  name: mysqldb-paymentservice-secret
type: Opaque
data:
  password: a1a6d51971227fe0a592c5da881954fe
  username: bil

unable to decode ""STDIN"": [pos 89]: json: error decoding base64 binary 'bil': illegal base64 data at input byte 0
```

Nope. In reality the name I want is even longer than ""billy"" and I don't want to change it. Am I doing something wrong here?
",username,https://github.com/kubernetes/kubernetes
49,28263.0,"This PR allows specifying non-binary data values in `Secret` objects as `""stringData"":{""key"":""string value""}`, in addition to the existing base64 []byte serializations in the `data` field.

On write, the keys and values in the `stringData` field are merged to the `data` map, overwriting any values already present in the `data` map. The move is one-way, the `stringData` field is never output when reading from the API.

A Secret can be created like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret""},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
  },
  ""stringData"":{
    ""username"": ""myuser"",
    ""password"": ""mypassword""
  }
}
```

and when read from the API would look like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret"",...},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
    ""username"": ""bXl1c2Vy"",
    ""password"": ""bXlwYXNzd29yZA==""
  }
}
```
",stringData:{key:string,https://github.com/kubernetes/kubernetes
50,28263.0,"This PR allows specifying non-binary data values in `Secret` objects as `""stringData"":{""key"":""string value""}`, in addition to the existing base64 []byte serializations in the `data` field.

On write, the keys and values in the `stringData` field are merged to the `data` map, overwriting any values already present in the `data` map. The move is one-way, the `stringData` field is never output when reading from the API.

A Secret can be created like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret""},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
  },
  ""stringData"":{
    ""username"": ""myuser"",
    ""password"": ""mypassword""
  }
}
```

and when read from the API would look like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret"",...},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
    ""username"": ""bXl1c2Vy"",
    ""password"": ""bXlwYXNzd29yZA==""
  }
}
```
",metadata:{name:mysecret,https://github.com/kubernetes/kubernetes
51,28263.0,"This PR allows specifying non-binary data values in `Secret` objects as `""stringData"":{""key"":""string value""}`, in addition to the existing base64 []byte serializations in the `data` field.

On write, the keys and values in the `stringData` field are merged to the `data` map, overwriting any values already present in the `data` map. The move is one-way, the `stringData` field is never output when reading from the API.

A Secret can be created like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret""},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
  },
  ""stringData"":{
    ""username"": ""myuser"",
    ""password"": ""mypassword""
  }
}
```

and when read from the API would look like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret"",...},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
    ""username"": ""bXl1c2Vy"",
    ""password"": ""bXlwYXNzd29yZA==""
  }
}
```
",mypassword,https://github.com/kubernetes/kubernetes
52,28263.0,"This PR allows specifying non-binary data values in `Secret` objects as `""stringData"":{""key"":""string value""}`, in addition to the existing base64 []byte serializations in the `data` field.

On write, the keys and values in the `stringData` field are merged to the `data` map, overwriting any values already present in the `data` map. The move is one-way, the `stringData` field is never output when reading from the API.

A Secret can be created like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret""},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
  },
  ""stringData"":{
    ""username"": ""myuser"",
    ""password"": ""mypassword""
  }
}
```

and when read from the API would look like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret"",...},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
    ""username"": ""bXl1c2Vy"",
    ""password"": ""bXlwYXNzd29yZA==""
  }
}
```
",bXlwYXNzd29yZA==,https://github.com/kubernetes/kubernetes
53,21840.0,"• Failure [5.649 seconds]
SSH
/go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:92
  should SSH to all nodes and run commands [It]
  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:91

  Feb 23 13:29:02.551: Ran echo ""Hello"" on 104.154.89.141:22, got error error getting signer for provider gce: 'error parsing SSH key -----BEGIN RSA PRIVATE KEY-----
  Proc-Type: 4,ENCRYPTED
  DEK-Info: AES-128-CBC,0B3908B11A8909BDEBB0FBD991D12FE5

  8fgALzSe3UWdWf0BgQJ24tUBPjJduvoGkfdrzE6g8fwx5VY/l1px4HCUsJp1Wt4i
  10lhvIBKfwmPWZxU3r0LH1I5WTn4uw5hl9BxnA33ATTZbhuCuRGa2M19mH8ZSUkV
  AJ55OYpxKzfeoFzfYtuvgttPc9ZW0uaY7+Hc8xKRukPBI+n0bysirRnA3wrDyV8x
  +KMyznMcNoviYZiYAYx3vVB5Rii2Ew9IqzrcYE1b8j64wIfsP80UWNp0kjUL1/5V
  FpZdeCskDThFSgZYJ5XswM+ncAjnL1vRpyWDRcZgbczvF9ino3DlQ9fJi45GSfwa
  PdSIqJ9h0RmBYeQSQ0Ax21RddBIzO/ez1oa4RYR0JjHNsiIvV82lNtA/T2DXNatZ
  cwn3oBX+kML/8wxbIMM3Q0n+vengaaJ3w/LeJLFNx/KL+hShQwquqISWUPJuTKuC
  maHlhB0uP/dlg2XYfQOk1oDZ+Pz/MBq+D2HmWpyH861Z+4S2bjiml8pp256Owq+1
  a8nxI+makbeSk9preXCCvd71FrdDgAe7VBHxUMFL/M77Ytt9N3Vy8kF4mroF2Y2S
  O1MhK0bSYYaPS27nb8hvpQCoLKa0ytsgco7Nb2/6g4ZG81Sqy4VuIwt4+sKQGeV7
  O8sUzJfuoawni4wNXSxF5ZnjpZ7igNkzfBVAolFoygyTO1oVsOrjJtcOOyPwMQKc
  sGGqLahD6fDaFQ5iuBef8PG9U8h7g0oVi4qpkute/6oMMh+aRQK75PBWvkxpyqe5
  NMDnOEob/D/9p5mKLXbuSetAkKSthiibESl1O43P07kpTpsMRJ2WKbxy3u4pSVXJ
  032HssmVtv8UCQGoBQvxDUdJqKE2g9Kl/o+vJenMUL/Vgu9N9PhX92XxhQw/9yKN
  18nh6/7Xp03TxllDPD3A2gRWlNuzFNXBNNytlrZcrsd85DSdJH4VLDKGK4Kd+AWQ
  FD9njiJPhtB0j4Me326tJ8346M636b8obceuRL/jyxhOuk4Fh9em5ounMvfa0NWR
  zATq379Bxa9beo+lkrwHPjfzIqkMOTGH3PZy0ANqs55uL4yrTCtG46oU3JAfOwwU
  SwW3MEcrzCeDKqQYNgsz8xcZySPDUMbEw60dX5294Kyk5/jaLe9ueozkxnAZ7vqp
  fMu75YyXcei3q2g9H8rM2AtSEqJ0UH84xUz+efYuigoABiqV2C3komlYYFsuP73N
  krDu1XOBywpNlgPWIyGgjXsFYpMuYZjDW4QmB2bgMC4IJq8X8Lns8Sl141Pr2lhZ
  AysEBd5LiY2XkTuHrg18TEq0ojcOP4co/p5NCTzen6YzuHukWxTJoHgDjX9Mv/5g
  wmVqNc9VQyZa73jVKIZjeCh8QhRd2vmK5MueADQnMAzcSLAOeppZFW3oX8QrZbCr
  SmHAHZzIdhFavK+jmpgsxYGe83g1iOQqG0Coyhjqr61GqJkDIaoDzoYQxf0baoz/
  kO687U5aGcveNbK6SLyYE71fvXKDhAe5uj0banXixmmWfrM/QHmcJll6PD6LxTdM
  3UqmC3N5zL3Ub2sUNL3MbhJIz3bSMa9hN6M6FoG1lxwT+ySEMFzjlWlxjuaaXW85
  -----END RSA PRIVATE KEY-----
  : 'asn1: structure error: superfluous leading zeros in length'', expected <nil>

  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:65
",wmVqNc9VQyZa73jVKIZjeCh8QhRd2vmK5MueADQnMAzcSLAOeppZFW3oX8QrZbCr,https://github.com/kubernetes/kubernetes
54,21840.0,"• Failure [5.649 seconds]
SSH
/go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:92
  should SSH to all nodes and run commands [It]
  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:91

  Feb 23 13:29:02.551: Ran echo ""Hello"" on 104.154.89.141:22, got error error getting signer for provider gce: 'error parsing SSH key -----BEGIN RSA PRIVATE KEY-----
  Proc-Type: 4,ENCRYPTED
  DEK-Info: AES-128-CBC,0B3908B11A8909BDEBB0FBD991D12FE5

  8fgALzSe3UWdWf0BgQJ24tUBPjJduvoGkfdrzE6g8fwx5VY/l1px4HCUsJp1Wt4i
  10lhvIBKfwmPWZxU3r0LH1I5WTn4uw5hl9BxnA33ATTZbhuCuRGa2M19mH8ZSUkV
  AJ55OYpxKzfeoFzfYtuvgttPc9ZW0uaY7+Hc8xKRukPBI+n0bysirRnA3wrDyV8x
  +KMyznMcNoviYZiYAYx3vVB5Rii2Ew9IqzrcYE1b8j64wIfsP80UWNp0kjUL1/5V
  FpZdeCskDThFSgZYJ5XswM+ncAjnL1vRpyWDRcZgbczvF9ino3DlQ9fJi45GSfwa
  PdSIqJ9h0RmBYeQSQ0Ax21RddBIzO/ez1oa4RYR0JjHNsiIvV82lNtA/T2DXNatZ
  cwn3oBX+kML/8wxbIMM3Q0n+vengaaJ3w/LeJLFNx/KL+hShQwquqISWUPJuTKuC
  maHlhB0uP/dlg2XYfQOk1oDZ+Pz/MBq+D2HmWpyH861Z+4S2bjiml8pp256Owq+1
  a8nxI+makbeSk9preXCCvd71FrdDgAe7VBHxUMFL/M77Ytt9N3Vy8kF4mroF2Y2S
  O1MhK0bSYYaPS27nb8hvpQCoLKa0ytsgco7Nb2/6g4ZG81Sqy4VuIwt4+sKQGeV7
  O8sUzJfuoawni4wNXSxF5ZnjpZ7igNkzfBVAolFoygyTO1oVsOrjJtcOOyPwMQKc
  sGGqLahD6fDaFQ5iuBef8PG9U8h7g0oVi4qpkute/6oMMh+aRQK75PBWvkxpyqe5
  NMDnOEob/D/9p5mKLXbuSetAkKSthiibESl1O43P07kpTpsMRJ2WKbxy3u4pSVXJ
  032HssmVtv8UCQGoBQvxDUdJqKE2g9Kl/o+vJenMUL/Vgu9N9PhX92XxhQw/9yKN
  18nh6/7Xp03TxllDPD3A2gRWlNuzFNXBNNytlrZcrsd85DSdJH4VLDKGK4Kd+AWQ
  FD9njiJPhtB0j4Me326tJ8346M636b8obceuRL/jyxhOuk4Fh9em5ounMvfa0NWR
  zATq379Bxa9beo+lkrwHPjfzIqkMOTGH3PZy0ANqs55uL4yrTCtG46oU3JAfOwwU
  SwW3MEcrzCeDKqQYNgsz8xcZySPDUMbEw60dX5294Kyk5/jaLe9ueozkxnAZ7vqp
  fMu75YyXcei3q2g9H8rM2AtSEqJ0UH84xUz+efYuigoABiqV2C3komlYYFsuP73N
  krDu1XOBywpNlgPWIyGgjXsFYpMuYZjDW4QmB2bgMC4IJq8X8Lns8Sl141Pr2lhZ
  AysEBd5LiY2XkTuHrg18TEq0ojcOP4co/p5NCTzen6YzuHukWxTJoHgDjX9Mv/5g
  wmVqNc9VQyZa73jVKIZjeCh8QhRd2vmK5MueADQnMAzcSLAOeppZFW3oX8QrZbCr
  SmHAHZzIdhFavK+jmpgsxYGe83g1iOQqG0Coyhjqr61GqJkDIaoDzoYQxf0baoz/
  kO687U5aGcveNbK6SLyYE71fvXKDhAe5uj0banXixmmWfrM/QHmcJll6PD6LxTdM
  3UqmC3N5zL3Ub2sUNL3MbhJIz3bSMa9hN6M6FoG1lxwT+ySEMFzjlWlxjuaaXW85
  -----END RSA PRIVATE KEY-----
  : 'asn1: structure error: superfluous leading zeros in length'', expected <nil>

  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:65
",O8sUzJfuoawni4wNXSxF5ZnjpZ7igNkzfBVAolFoygyTO1oVsOrjJtcOOyPwMQKc,https://github.com/kubernetes/kubernetes
55,21840.0,"• Failure [5.649 seconds]
SSH
/go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:92
  should SSH to all nodes and run commands [It]
  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:91

  Feb 23 13:29:02.551: Ran echo ""Hello"" on 104.154.89.141:22, got error error getting signer for provider gce: 'error parsing SSH key -----BEGIN RSA PRIVATE KEY-----
  Proc-Type: 4,ENCRYPTED
  DEK-Info: AES-128-CBC,0B3908B11A8909BDEBB0FBD991D12FE5

  8fgALzSe3UWdWf0BgQJ24tUBPjJduvoGkfdrzE6g8fwx5VY/l1px4HCUsJp1Wt4i
  10lhvIBKfwmPWZxU3r0LH1I5WTn4uw5hl9BxnA33ATTZbhuCuRGa2M19mH8ZSUkV
  AJ55OYpxKzfeoFzfYtuvgttPc9ZW0uaY7+Hc8xKRukPBI+n0bysirRnA3wrDyV8x
  +KMyznMcNoviYZiYAYx3vVB5Rii2Ew9IqzrcYE1b8j64wIfsP80UWNp0kjUL1/5V
  FpZdeCskDThFSgZYJ5XswM+ncAjnL1vRpyWDRcZgbczvF9ino3DlQ9fJi45GSfwa
  PdSIqJ9h0RmBYeQSQ0Ax21RddBIzO/ez1oa4RYR0JjHNsiIvV82lNtA/T2DXNatZ
  cwn3oBX+kML/8wxbIMM3Q0n+vengaaJ3w/LeJLFNx/KL+hShQwquqISWUPJuTKuC
  maHlhB0uP/dlg2XYfQOk1oDZ+Pz/MBq+D2HmWpyH861Z+4S2bjiml8pp256Owq+1
  a8nxI+makbeSk9preXCCvd71FrdDgAe7VBHxUMFL/M77Ytt9N3Vy8kF4mroF2Y2S
  O1MhK0bSYYaPS27nb8hvpQCoLKa0ytsgco7Nb2/6g4ZG81Sqy4VuIwt4+sKQGeV7
  O8sUzJfuoawni4wNXSxF5ZnjpZ7igNkzfBVAolFoygyTO1oVsOrjJtcOOyPwMQKc
  sGGqLahD6fDaFQ5iuBef8PG9U8h7g0oVi4qpkute/6oMMh+aRQK75PBWvkxpyqe5
  NMDnOEob/D/9p5mKLXbuSetAkKSthiibESl1O43P07kpTpsMRJ2WKbxy3u4pSVXJ
  032HssmVtv8UCQGoBQvxDUdJqKE2g9Kl/o+vJenMUL/Vgu9N9PhX92XxhQw/9yKN
  18nh6/7Xp03TxllDPD3A2gRWlNuzFNXBNNytlrZcrsd85DSdJH4VLDKGK4Kd+AWQ
  FD9njiJPhtB0j4Me326tJ8346M636b8obceuRL/jyxhOuk4Fh9em5ounMvfa0NWR
  zATq379Bxa9beo+lkrwHPjfzIqkMOTGH3PZy0ANqs55uL4yrTCtG46oU3JAfOwwU
  SwW3MEcrzCeDKqQYNgsz8xcZySPDUMbEw60dX5294Kyk5/jaLe9ueozkxnAZ7vqp
  fMu75YyXcei3q2g9H8rM2AtSEqJ0UH84xUz+efYuigoABiqV2C3komlYYFsuP73N
  krDu1XOBywpNlgPWIyGgjXsFYpMuYZjDW4QmB2bgMC4IJq8X8Lns8Sl141Pr2lhZ
  AysEBd5LiY2XkTuHrg18TEq0ojcOP4co/p5NCTzen6YzuHukWxTJoHgDjX9Mv/5g
  wmVqNc9VQyZa73jVKIZjeCh8QhRd2vmK5MueADQnMAzcSLAOeppZFW3oX8QrZbCr
  SmHAHZzIdhFavK+jmpgsxYGe83g1iOQqG0Coyhjqr61GqJkDIaoDzoYQxf0baoz/
  kO687U5aGcveNbK6SLyYE71fvXKDhAe5uj0banXixmmWfrM/QHmcJll6PD6LxTdM
  3UqmC3N5zL3Ub2sUNL3MbhJIz3bSMa9hN6M6FoG1lxwT+ySEMFzjlWlxjuaaXW85
  -----END RSA PRIVATE KEY-----
  : 'asn1: structure error: superfluous leading zeros in length'', expected <nil>

  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:65
",krDu1XOBywpNlgPWIyGgjXsFYpMuYZjDW4QmB2bgMC4IJq8X8Lns8Sl141Pr2lhZ,https://github.com/kubernetes/kubernetes
56,21840.0,"• Failure [5.649 seconds]
SSH
/go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:92
  should SSH to all nodes and run commands [It]
  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:91

  Feb 23 13:29:02.551: Ran echo ""Hello"" on 104.154.89.141:22, got error error getting signer for provider gce: 'error parsing SSH key -----BEGIN RSA PRIVATE KEY-----
  Proc-Type: 4,ENCRYPTED
  DEK-Info: AES-128-CBC,0B3908B11A8909BDEBB0FBD991D12FE5

  8fgALzSe3UWdWf0BgQJ24tUBPjJduvoGkfdrzE6g8fwx5VY/l1px4HCUsJp1Wt4i
  10lhvIBKfwmPWZxU3r0LH1I5WTn4uw5hl9BxnA33ATTZbhuCuRGa2M19mH8ZSUkV
  AJ55OYpxKzfeoFzfYtuvgttPc9ZW0uaY7+Hc8xKRukPBI+n0bysirRnA3wrDyV8x
  +KMyznMcNoviYZiYAYx3vVB5Rii2Ew9IqzrcYE1b8j64wIfsP80UWNp0kjUL1/5V
  FpZdeCskDThFSgZYJ5XswM+ncAjnL1vRpyWDRcZgbczvF9ino3DlQ9fJi45GSfwa
  PdSIqJ9h0RmBYeQSQ0Ax21RddBIzO/ez1oa4RYR0JjHNsiIvV82lNtA/T2DXNatZ
  cwn3oBX+kML/8wxbIMM3Q0n+vengaaJ3w/LeJLFNx/KL+hShQwquqISWUPJuTKuC
  maHlhB0uP/dlg2XYfQOk1oDZ+Pz/MBq+D2HmWpyH861Z+4S2bjiml8pp256Owq+1
  a8nxI+makbeSk9preXCCvd71FrdDgAe7VBHxUMFL/M77Ytt9N3Vy8kF4mroF2Y2S
  O1MhK0bSYYaPS27nb8hvpQCoLKa0ytsgco7Nb2/6g4ZG81Sqy4VuIwt4+sKQGeV7
  O8sUzJfuoawni4wNXSxF5ZnjpZ7igNkzfBVAolFoygyTO1oVsOrjJtcOOyPwMQKc
  sGGqLahD6fDaFQ5iuBef8PG9U8h7g0oVi4qpkute/6oMMh+aRQK75PBWvkxpyqe5
  NMDnOEob/D/9p5mKLXbuSetAkKSthiibESl1O43P07kpTpsMRJ2WKbxy3u4pSVXJ
  032HssmVtv8UCQGoBQvxDUdJqKE2g9Kl/o+vJenMUL/Vgu9N9PhX92XxhQw/9yKN
  18nh6/7Xp03TxllDPD3A2gRWlNuzFNXBNNytlrZcrsd85DSdJH4VLDKGK4Kd+AWQ
  FD9njiJPhtB0j4Me326tJ8346M636b8obceuRL/jyxhOuk4Fh9em5ounMvfa0NWR
  zATq379Bxa9beo+lkrwHPjfzIqkMOTGH3PZy0ANqs55uL4yrTCtG46oU3JAfOwwU
  SwW3MEcrzCeDKqQYNgsz8xcZySPDUMbEw60dX5294Kyk5/jaLe9ueozkxnAZ7vqp
  fMu75YyXcei3q2g9H8rM2AtSEqJ0UH84xUz+efYuigoABiqV2C3komlYYFsuP73N
  krDu1XOBywpNlgPWIyGgjXsFYpMuYZjDW4QmB2bgMC4IJq8X8Lns8Sl141Pr2lhZ
  AysEBd5LiY2XkTuHrg18TEq0ojcOP4co/p5NCTzen6YzuHukWxTJoHgDjX9Mv/5g
  wmVqNc9VQyZa73jVKIZjeCh8QhRd2vmK5MueADQnMAzcSLAOeppZFW3oX8QrZbCr
  SmHAHZzIdhFavK+jmpgsxYGe83g1iOQqG0Coyhjqr61GqJkDIaoDzoYQxf0baoz/
  kO687U5aGcveNbK6SLyYE71fvXKDhAe5uj0banXixmmWfrM/QHmcJll6PD6LxTdM
  3UqmC3N5zL3Ub2sUNL3MbhJIz3bSMa9hN6M6FoG1lxwT+ySEMFzjlWlxjuaaXW85
  -----END RSA PRIVATE KEY-----
  : 'asn1: structure error: superfluous leading zeros in length'', expected <nil>

  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:65
",10lhvIBKfwmPWZxU3r0LH1I5WTn4uw5hl9BxnA33ATTZbhuCuRGa2M19mH8ZSUkV,https://github.com/kubernetes/kubernetes
57,21840.0,"• Failure [5.649 seconds]
SSH
/go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:92
  should SSH to all nodes and run commands [It]
  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:91

  Feb 23 13:29:02.551: Ran echo ""Hello"" on 104.154.89.141:22, got error error getting signer for provider gce: 'error parsing SSH key -----BEGIN RSA PRIVATE KEY-----
  Proc-Type: 4,ENCRYPTED
  DEK-Info: AES-128-CBC,0B3908B11A8909BDEBB0FBD991D12FE5

  8fgALzSe3UWdWf0BgQJ24tUBPjJduvoGkfdrzE6g8fwx5VY/l1px4HCUsJp1Wt4i
  10lhvIBKfwmPWZxU3r0LH1I5WTn4uw5hl9BxnA33ATTZbhuCuRGa2M19mH8ZSUkV
  AJ55OYpxKzfeoFzfYtuvgttPc9ZW0uaY7+Hc8xKRukPBI+n0bysirRnA3wrDyV8x
  +KMyznMcNoviYZiYAYx3vVB5Rii2Ew9IqzrcYE1b8j64wIfsP80UWNp0kjUL1/5V
  FpZdeCskDThFSgZYJ5XswM+ncAjnL1vRpyWDRcZgbczvF9ino3DlQ9fJi45GSfwa
  PdSIqJ9h0RmBYeQSQ0Ax21RddBIzO/ez1oa4RYR0JjHNsiIvV82lNtA/T2DXNatZ
  cwn3oBX+kML/8wxbIMM3Q0n+vengaaJ3w/LeJLFNx/KL+hShQwquqISWUPJuTKuC
  maHlhB0uP/dlg2XYfQOk1oDZ+Pz/MBq+D2HmWpyH861Z+4S2bjiml8pp256Owq+1
  a8nxI+makbeSk9preXCCvd71FrdDgAe7VBHxUMFL/M77Ytt9N3Vy8kF4mroF2Y2S
  O1MhK0bSYYaPS27nb8hvpQCoLKa0ytsgco7Nb2/6g4ZG81Sqy4VuIwt4+sKQGeV7
  O8sUzJfuoawni4wNXSxF5ZnjpZ7igNkzfBVAolFoygyTO1oVsOrjJtcOOyPwMQKc
  sGGqLahD6fDaFQ5iuBef8PG9U8h7g0oVi4qpkute/6oMMh+aRQK75PBWvkxpyqe5
  NMDnOEob/D/9p5mKLXbuSetAkKSthiibESl1O43P07kpTpsMRJ2WKbxy3u4pSVXJ
  032HssmVtv8UCQGoBQvxDUdJqKE2g9Kl/o+vJenMUL/Vgu9N9PhX92XxhQw/9yKN
  18nh6/7Xp03TxllDPD3A2gRWlNuzFNXBNNytlrZcrsd85DSdJH4VLDKGK4Kd+AWQ
  FD9njiJPhtB0j4Me326tJ8346M636b8obceuRL/jyxhOuk4Fh9em5ounMvfa0NWR
  zATq379Bxa9beo+lkrwHPjfzIqkMOTGH3PZy0ANqs55uL4yrTCtG46oU3JAfOwwU
  SwW3MEcrzCeDKqQYNgsz8xcZySPDUMbEw60dX5294Kyk5/jaLe9ueozkxnAZ7vqp
  fMu75YyXcei3q2g9H8rM2AtSEqJ0UH84xUz+efYuigoABiqV2C3komlYYFsuP73N
  krDu1XOBywpNlgPWIyGgjXsFYpMuYZjDW4QmB2bgMC4IJq8X8Lns8Sl141Pr2lhZ
  AysEBd5LiY2XkTuHrg18TEq0ojcOP4co/p5NCTzen6YzuHukWxTJoHgDjX9Mv/5g
  wmVqNc9VQyZa73jVKIZjeCh8QhRd2vmK5MueADQnMAzcSLAOeppZFW3oX8QrZbCr
  SmHAHZzIdhFavK+jmpgsxYGe83g1iOQqG0Coyhjqr61GqJkDIaoDzoYQxf0baoz/
  kO687U5aGcveNbK6SLyYE71fvXKDhAe5uj0banXixmmWfrM/QHmcJll6PD6LxTdM
  3UqmC3N5zL3Ub2sUNL3MbhJIz3bSMa9hN6M6FoG1lxwT+ySEMFzjlWlxjuaaXW85
  -----END RSA PRIVATE KEY-----
  : 'asn1: structure error: superfluous leading zeros in length'', expected <nil>

  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:65
",a8nxI+makbeSk9preXCCvd71FrdDgAe7VBHxUMFL,https://github.com/kubernetes/kubernetes
58,21840.0,"• Failure [5.649 seconds]
SSH
/go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:92
  should SSH to all nodes and run commands [It]
  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:91

  Feb 23 13:29:02.551: Ran echo ""Hello"" on 104.154.89.141:22, got error error getting signer for provider gce: 'error parsing SSH key -----BEGIN RSA PRIVATE KEY-----
  Proc-Type: 4,ENCRYPTED
  DEK-Info: AES-128-CBC,0B3908B11A8909BDEBB0FBD991D12FE5

  8fgALzSe3UWdWf0BgQJ24tUBPjJduvoGkfdrzE6g8fwx5VY/l1px4HCUsJp1Wt4i
  10lhvIBKfwmPWZxU3r0LH1I5WTn4uw5hl9BxnA33ATTZbhuCuRGa2M19mH8ZSUkV
  AJ55OYpxKzfeoFzfYtuvgttPc9ZW0uaY7+Hc8xKRukPBI+n0bysirRnA3wrDyV8x
  +KMyznMcNoviYZiYAYx3vVB5Rii2Ew9IqzrcYE1b8j64wIfsP80UWNp0kjUL1/5V
  FpZdeCskDThFSgZYJ5XswM+ncAjnL1vRpyWDRcZgbczvF9ino3DlQ9fJi45GSfwa
  PdSIqJ9h0RmBYeQSQ0Ax21RddBIzO/ez1oa4RYR0JjHNsiIvV82lNtA/T2DXNatZ
  cwn3oBX+kML/8wxbIMM3Q0n+vengaaJ3w/LeJLFNx/KL+hShQwquqISWUPJuTKuC
  maHlhB0uP/dlg2XYfQOk1oDZ+Pz/MBq+D2HmWpyH861Z+4S2bjiml8pp256Owq+1
  a8nxI+makbeSk9preXCCvd71FrdDgAe7VBHxUMFL/M77Ytt9N3Vy8kF4mroF2Y2S
  O1MhK0bSYYaPS27nb8hvpQCoLKa0ytsgco7Nb2/6g4ZG81Sqy4VuIwt4+sKQGeV7
  O8sUzJfuoawni4wNXSxF5ZnjpZ7igNkzfBVAolFoygyTO1oVsOrjJtcOOyPwMQKc
  sGGqLahD6fDaFQ5iuBef8PG9U8h7g0oVi4qpkute/6oMMh+aRQK75PBWvkxpyqe5
  NMDnOEob/D/9p5mKLXbuSetAkKSthiibESl1O43P07kpTpsMRJ2WKbxy3u4pSVXJ
  032HssmVtv8UCQGoBQvxDUdJqKE2g9Kl/o+vJenMUL/Vgu9N9PhX92XxhQw/9yKN
  18nh6/7Xp03TxllDPD3A2gRWlNuzFNXBNNytlrZcrsd85DSdJH4VLDKGK4Kd+AWQ
  FD9njiJPhtB0j4Me326tJ8346M636b8obceuRL/jyxhOuk4Fh9em5ounMvfa0NWR
  zATq379Bxa9beo+lkrwHPjfzIqkMOTGH3PZy0ANqs55uL4yrTCtG46oU3JAfOwwU
  SwW3MEcrzCeDKqQYNgsz8xcZySPDUMbEw60dX5294Kyk5/jaLe9ueozkxnAZ7vqp
  fMu75YyXcei3q2g9H8rM2AtSEqJ0UH84xUz+efYuigoABiqV2C3komlYYFsuP73N
  krDu1XOBywpNlgPWIyGgjXsFYpMuYZjDW4QmB2bgMC4IJq8X8Lns8Sl141Pr2lhZ
  AysEBd5LiY2XkTuHrg18TEq0ojcOP4co/p5NCTzen6YzuHukWxTJoHgDjX9Mv/5g
  wmVqNc9VQyZa73jVKIZjeCh8QhRd2vmK5MueADQnMAzcSLAOeppZFW3oX8QrZbCr
  SmHAHZzIdhFavK+jmpgsxYGe83g1iOQqG0Coyhjqr61GqJkDIaoDzoYQxf0baoz/
  kO687U5aGcveNbK6SLyYE71fvXKDhAe5uj0banXixmmWfrM/QHmcJll6PD6LxTdM
  3UqmC3N5zL3Ub2sUNL3MbhJIz3bSMa9hN6M6FoG1lxwT+ySEMFzjlWlxjuaaXW85
  -----END RSA PRIVATE KEY-----
  : 'asn1: structure error: superfluous leading zeros in length'', expected <nil>

  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:65
",032HssmVtv8UCQGoBQvxDUdJqKE2g9Kl+vJenMUL,https://github.com/kubernetes/kubernetes
59,21840.0,"• Failure [5.649 seconds]
SSH
/go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:92
  should SSH to all nodes and run commands [It]
  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:91

  Feb 23 13:29:02.551: Ran echo ""Hello"" on 104.154.89.141:22, got error error getting signer for provider gce: 'error parsing SSH key -----BEGIN RSA PRIVATE KEY-----
  Proc-Type: 4,ENCRYPTED
  DEK-Info: AES-128-CBC,0B3908B11A8909BDEBB0FBD991D12FE5

  8fgALzSe3UWdWf0BgQJ24tUBPjJduvoGkfdrzE6g8fwx5VY/l1px4HCUsJp1Wt4i
  10lhvIBKfwmPWZxU3r0LH1I5WTn4uw5hl9BxnA33ATTZbhuCuRGa2M19mH8ZSUkV
  AJ55OYpxKzfeoFzfYtuvgttPc9ZW0uaY7+Hc8xKRukPBI+n0bysirRnA3wrDyV8x
  +KMyznMcNoviYZiYAYx3vVB5Rii2Ew9IqzrcYE1b8j64wIfsP80UWNp0kjUL1/5V
  FpZdeCskDThFSgZYJ5XswM+ncAjnL1vRpyWDRcZgbczvF9ino3DlQ9fJi45GSfwa
  PdSIqJ9h0RmBYeQSQ0Ax21RddBIzO/ez1oa4RYR0JjHNsiIvV82lNtA/T2DXNatZ
  cwn3oBX+kML/8wxbIMM3Q0n+vengaaJ3w/LeJLFNx/KL+hShQwquqISWUPJuTKuC
  maHlhB0uP/dlg2XYfQOk1oDZ+Pz/MBq+D2HmWpyH861Z+4S2bjiml8pp256Owq+1
  a8nxI+makbeSk9preXCCvd71FrdDgAe7VBHxUMFL/M77Ytt9N3Vy8kF4mroF2Y2S
  O1MhK0bSYYaPS27nb8hvpQCoLKa0ytsgco7Nb2/6g4ZG81Sqy4VuIwt4+sKQGeV7
  O8sUzJfuoawni4wNXSxF5ZnjpZ7igNkzfBVAolFoygyTO1oVsOrjJtcOOyPwMQKc
  sGGqLahD6fDaFQ5iuBef8PG9U8h7g0oVi4qpkute/6oMMh+aRQK75PBWvkxpyqe5
  NMDnOEob/D/9p5mKLXbuSetAkKSthiibESl1O43P07kpTpsMRJ2WKbxy3u4pSVXJ
  032HssmVtv8UCQGoBQvxDUdJqKE2g9Kl/o+vJenMUL/Vgu9N9PhX92XxhQw/9yKN
  18nh6/7Xp03TxllDPD3A2gRWlNuzFNXBNNytlrZcrsd85DSdJH4VLDKGK4Kd+AWQ
  FD9njiJPhtB0j4Me326tJ8346M636b8obceuRL/jyxhOuk4Fh9em5ounMvfa0NWR
  zATq379Bxa9beo+lkrwHPjfzIqkMOTGH3PZy0ANqs55uL4yrTCtG46oU3JAfOwwU
  SwW3MEcrzCeDKqQYNgsz8xcZySPDUMbEw60dX5294Kyk5/jaLe9ueozkxnAZ7vqp
  fMu75YyXcei3q2g9H8rM2AtSEqJ0UH84xUz+efYuigoABiqV2C3komlYYFsuP73N
  krDu1XOBywpNlgPWIyGgjXsFYpMuYZjDW4QmB2bgMC4IJq8X8Lns8Sl141Pr2lhZ
  AysEBd5LiY2XkTuHrg18TEq0ojcOP4co/p5NCTzen6YzuHukWxTJoHgDjX9Mv/5g
  wmVqNc9VQyZa73jVKIZjeCh8QhRd2vmK5MueADQnMAzcSLAOeppZFW3oX8QrZbCr
  SmHAHZzIdhFavK+jmpgsxYGe83g1iOQqG0Coyhjqr61GqJkDIaoDzoYQxf0baoz/
  kO687U5aGcveNbK6SLyYE71fvXKDhAe5uj0banXixmmWfrM/QHmcJll6PD6LxTdM
  3UqmC3N5zL3Ub2sUNL3MbhJIz3bSMa9hN6M6FoG1lxwT+ySEMFzjlWlxjuaaXW85
  -----END RSA PRIVATE KEY-----
  : 'asn1: structure error: superfluous leading zeros in length'', expected <nil>

  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:65
",lkrwHPjfzIqkMOTGH3PZy0ANqs55uL4yrTCtG46oU3JAfOwwU,https://github.com/kubernetes/kubernetes
60,21840.0,"• Failure [5.649 seconds]
SSH
/go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:92
  should SSH to all nodes and run commands [It]
  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:91

  Feb 23 13:29:02.551: Ran echo ""Hello"" on 104.154.89.141:22, got error error getting signer for provider gce: 'error parsing SSH key -----BEGIN RSA PRIVATE KEY-----
  Proc-Type: 4,ENCRYPTED
  DEK-Info: AES-128-CBC,0B3908B11A8909BDEBB0FBD991D12FE5

  8fgALzSe3UWdWf0BgQJ24tUBPjJduvoGkfdrzE6g8fwx5VY/l1px4HCUsJp1Wt4i
  10lhvIBKfwmPWZxU3r0LH1I5WTn4uw5hl9BxnA33ATTZbhuCuRGa2M19mH8ZSUkV
  AJ55OYpxKzfeoFzfYtuvgttPc9ZW0uaY7+Hc8xKRukPBI+n0bysirRnA3wrDyV8x
  +KMyznMcNoviYZiYAYx3vVB5Rii2Ew9IqzrcYE1b8j64wIfsP80UWNp0kjUL1/5V
  FpZdeCskDThFSgZYJ5XswM+ncAjnL1vRpyWDRcZgbczvF9ino3DlQ9fJi45GSfwa
  PdSIqJ9h0RmBYeQSQ0Ax21RddBIzO/ez1oa4RYR0JjHNsiIvV82lNtA/T2DXNatZ
  cwn3oBX+kML/8wxbIMM3Q0n+vengaaJ3w/LeJLFNx/KL+hShQwquqISWUPJuTKuC
  maHlhB0uP/dlg2XYfQOk1oDZ+Pz/MBq+D2HmWpyH861Z+4S2bjiml8pp256Owq+1
  a8nxI+makbeSk9preXCCvd71FrdDgAe7VBHxUMFL/M77Ytt9N3Vy8kF4mroF2Y2S
  O1MhK0bSYYaPS27nb8hvpQCoLKa0ytsgco7Nb2/6g4ZG81Sqy4VuIwt4+sKQGeV7
  O8sUzJfuoawni4wNXSxF5ZnjpZ7igNkzfBVAolFoygyTO1oVsOrjJtcOOyPwMQKc
  sGGqLahD6fDaFQ5iuBef8PG9U8h7g0oVi4qpkute/6oMMh+aRQK75PBWvkxpyqe5
  NMDnOEob/D/9p5mKLXbuSetAkKSthiibESl1O43P07kpTpsMRJ2WKbxy3u4pSVXJ
  032HssmVtv8UCQGoBQvxDUdJqKE2g9Kl/o+vJenMUL/Vgu9N9PhX92XxhQw/9yKN
  18nh6/7Xp03TxllDPD3A2gRWlNuzFNXBNNytlrZcrsd85DSdJH4VLDKGK4Kd+AWQ
  FD9njiJPhtB0j4Me326tJ8346M636b8obceuRL/jyxhOuk4Fh9em5ounMvfa0NWR
  zATq379Bxa9beo+lkrwHPjfzIqkMOTGH3PZy0ANqs55uL4yrTCtG46oU3JAfOwwU
  SwW3MEcrzCeDKqQYNgsz8xcZySPDUMbEw60dX5294Kyk5/jaLe9ueozkxnAZ7vqp
  fMu75YyXcei3q2g9H8rM2AtSEqJ0UH84xUz+efYuigoABiqV2C3komlYYFsuP73N
  krDu1XOBywpNlgPWIyGgjXsFYpMuYZjDW4QmB2bgMC4IJq8X8Lns8Sl141Pr2lhZ
  AysEBd5LiY2XkTuHrg18TEq0ojcOP4co/p5NCTzen6YzuHukWxTJoHgDjX9Mv/5g
  wmVqNc9VQyZa73jVKIZjeCh8QhRd2vmK5MueADQnMAzcSLAOeppZFW3oX8QrZbCr
  SmHAHZzIdhFavK+jmpgsxYGe83g1iOQqG0Coyhjqr61GqJkDIaoDzoYQxf0baoz/
  kO687U5aGcveNbK6SLyYE71fvXKDhAe5uj0banXixmmWfrM/QHmcJll6PD6LxTdM
  3UqmC3N5zL3Ub2sUNL3MbhJIz3bSMa9hN6M6FoG1lxwT+ySEMFzjlWlxjuaaXW85
  -----END RSA PRIVATE KEY-----
  : 'asn1: structure error: superfluous leading zeros in length'', expected <nil>

  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/ssh.go:65
",sGGqLahD6fDaFQ5iuBef8PG9U8h7g0oVi4qpkute,https://github.com/kubernetes/kubernetes
61,21530.0,"[https://console.cloud.google.com/m/cloudstorage/b/kubernetes-jenkins/o/pr-logs/pull/21369/kubernetes-pull-build-test-e2e-gce/29340/build-log.txt](https://console.cloud.google.com/m/cloudstorage/b/kubernetes-jenkins/o/pr-logs/pull/21369/kubernetes-pull-build-test-e2e-gce/29340/build-log.txt)

```
鈥� Failure [11.605 seconds]
ServiceAccounts
/go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/service_accounts.go:124
  should mount an API token into pods [Conformance] [It]
  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/service_accounts.go:123

  ""content of file \""/var/run/secrets/kubernetes.io/serviceaccount/token\"": eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJlMmUtdGVzdHMtc3ZjYWNjb3VudHMtY2pkZDIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiZGVmYXVsdC10b2tlbi1ldWE1ZiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYTQyMjI4ZjEtZDZkMi0xMWU1LWE0MmYtNDIwMTBhZjAwMDAyIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmUyZS10ZXN0cy1zdmNhY2NvdW50cy1jamRkMjpkZWZhdWx0In0.T_dLwS5K_x3rrmuC3iP-LY_lmPPiTxTnjais6tQkR-wkSR5XGzTnJW1xBCwsBXS2uGZi97Dug_l6i29cWt8TvRITMgQjLF5IT5Fi68FyRB0JfrBkCcDKRhPP8tH69rSNMWkuntpVZs3cXARlWPPuEXmxUPxUfPuhM8H1baYLg7i0hJveHVqNY5tlWEgYe7ujPUdxNvwUwTWtG3Lna-MgMtq7m5A5iEe9yh5ixeFM8URA_kHoAEQlxdKMR83XVkCfbKJxAUGuTvuA8PQ5fi8Wr6vFz1sAX8_NRTk0hstIYtCh-Y5xa5aHot75bKLkBFcGSFqgtUGX2_4beGIIOxZ3Cg"" in container output
  Expected
      <string>: content of file ""/var/run/secrets/kubernetes.io/serviceaccount/token"": eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJlMmUtdGVzdHMtc3ZjYWNjb3VudHMtY2pkZDIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiZGVmYXVsdC10b2tlbi1vMzZ5OCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYTQyMjI4ZjEtZDZkMi0xMWU1LWE0MmYtNDIwMTBhZjAwMDAyIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmUyZS10ZXN0cy1zdmNhY2NvdW50cy1jamRkMjpkZWZhdWx0In0.Wy5Iksh4SgXa32ERH5VRVbg-DsZ4SCEdfXGRdM6Nh_a5uhYRRyhCo5w6vRdi39dKeiVTFBwiHVJap2RQUQ6ivMo8_0O_lWlEsbVtFO7CC2cWKIEm-Pjx5958_3sv6kw8QW3ZM6-CWk7669idz-ApGzx-hkrlREvle0HoO2wErPAR4s_X5VIveOjDT5eW1shzazAKSWs1FjxHIw_oeVntyxcRW6i_PDMEDpXOJTC3vjIY2bTYJ9eHDEblXNgiwuIvb3lTQbTnV-1GDs0OPkhB52-jyHMOhK0PzkQp8jerGSF3fffiTu6h47riUWE5UfuCLHAU9RM0AKSZtDx5Z64xPA

  to contain substring
      <string>: content of file ""/var/run/secrets/kubernetes.io/serviceaccount/token"": eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJlMmUtdGVzdHMtc3ZjYWNjb3VudHMtY2pkZDIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiZGVmYXVsdC10b2tlbi1ldWE1ZiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYTQyMjI4ZjEtZDZkMi0xMWU1LWE0MmYtNDIwMTBhZjAwMDAyIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmUyZS10ZXN0cy1zdmNhY2NvdW50cy1jamRkMjpkZWZhdWx0In0.T_dLwS5K_x3rrmuC3iP-LY_lmPPiTxTnjais6tQkR-wkSR5XGzTnJW1xBCwsBXS2uGZi97Dug_l6i29cWt8TvRITMgQjLF5IT5Fi68FyRB0JfrBkCcDKRhPP8tH69rSNMWkuntpVZs3cXARlWPPuEXmxUPxUfPuhM8H1baYLg7i0hJveHVqNY5tlWEgYe7ujPUdxNvwUwTWtG3Lna-MgMtq7m5A5iEe9yh5ixeFM8URA_kHoAEQlxdKMR83XVkCfbKJxAUGuTvuA8PQ5fi8Wr6vFz1sAX8_NRTk0hstIYtCh-Y5xa5aHot75bKLkBFcGSFqgtUGX2_4beGIIOxZ3Cg
```
",LY_lmPPiTxTnjais6tQkR-wkSR5XGzTnJW1xBCwsBXS2uGZi97Dug_l6i29cWt8TvRITMgQjLF5IT5Fi68FyRB0JfrBkCcDKRhPP8tH69rSNMWkuntpVZs3cXARlWPPuEXmxUPxUfPuhM8H1baYLg7i0hJveHVqNY5tlWEgYe7ujPUdxNvwUwTWtG3Lna-MgMtq7m5A5iEe9yh5ixeFM8URA_kHoAEQlxdKMR83XVkCfbKJxAUGuTvuA8PQ5fi8Wr6vFz1sAX8_NRTk0hstIYtCh-Y5xa5aHot75bKLkBFcGSFqgtUGX2_4beGIIOxZ3Cg,https://github.com/kubernetes/kubernetes
62,17713.0,"i setup a k8s 2 nodes cluster on ubuntu, then i use kubectl to get nodes, it failed.
use k8s version:  v1.1.1
root@zgy:/home/zgy/code/master/src/kubernetes/cluster/ubuntu/binaries# ./kubectl -s http://127.0.0.1:8080 get nodes
error: couldn't read version from server: Get http://127.0.0.1:8080/api: dial tcp 127.0.0.1:8080: connection refused
root@zgy:/home/zgy/code/master/src/kubernetes/cluster/ubuntu/binaries# ./kubectl config view
apiVersion: v1
clusters:
- cluster:
  insecure-skip-tls-verify: true
  server: http://10.67.57.247:8080
  name: ubuntu
  contexts:
- context:
  cluster: ubuntu
  user: ubuntu
  name: ubuntu
  current-context: ubuntu
  kind: Config
  preferences: {}
  users:
- name: ubuntu
  user:
    password: cjh3dg8AO9AbPYaJ
    username: admin

root@zgy:/home/zgy/code/master/src/kubernetes/cluster/ubuntu/binaries# ./kubectl version
Client Version: version.Info{Major:""1"", Minor:""1"", GitVersion:""v1.1.1"", GitCommit:""92635e23dfafb2ddc828c8ac6c03c7a7205a84d8"", GitTreeState:""clean""}
^Croot@zgy:/home/zgy/code/master/src/kubernetes/cluster/ubuntu/binaries# 

Ref:  #10539
",cjh3dg8AO9AbPYaJ,https://github.com/kubernetes/kubernetes
63,17713.0,"i setup a k8s 2 nodes cluster on ubuntu, then i use kubectl to get nodes, it failed.
use k8s version:  v1.1.1
root@zgy:/home/zgy/code/master/src/kubernetes/cluster/ubuntu/binaries# ./kubectl -s http://127.0.0.1:8080 get nodes
error: couldn't read version from server: Get http://127.0.0.1:8080/api: dial tcp 127.0.0.1:8080: connection refused
root@zgy:/home/zgy/code/master/src/kubernetes/cluster/ubuntu/binaries# ./kubectl config view
apiVersion: v1
clusters:
- cluster:
  insecure-skip-tls-verify: true
  server: http://10.67.57.247:8080
  name: ubuntu
  contexts:
- context:
  cluster: ubuntu
  user: ubuntu
  name: ubuntu
  current-context: ubuntu
  kind: Config
  preferences: {}
  users:
- name: ubuntu
  user:
    password: cjh3dg8AO9AbPYaJ
    username: admin

root@zgy:/home/zgy/code/master/src/kubernetes/cluster/ubuntu/binaries# ./kubectl version
Client Version: version.Info{Major:""1"", Minor:""1"", GitVersion:""v1.1.1"", GitCommit:""92635e23dfafb2ddc828c8ac6c03c7a7205a84d8"", GitTreeState:""clean""}
^Croot@zgy:/home/zgy/code/master/src/kubernetes/cluster/ubuntu/binaries# 

Ref:  #10539
",root@zgy,https://github.com/kubernetes/kubernetes
64,14701.0,"The api doc shows:Kubernetes uses client certificates, tokens, or http basic auth to authenticate users for API calls.
So I tried to use basic auth to authenticate kubelet by set the --kubeconfig as config.yaml which generted by kubectl under ~/.kube/:

```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: http://master:8080
  name: ubuntu
contexts:
- context:
    cluster: """"
    user: """"
  name: development
- context:
    cluster: ubuntu
    user: ubuntu
  name: ubuntu
current-context: ubuntu
kind: Config
preferences: {}
users:
- name: ubuntu
  user:
    password: wpJjc2rKyCoiP7tb
    username: admin
```

But it did not work, so I thought whether the kubelet can use basic auth?
",wpJjc2rKyCoiP7tb,https://github.com/kubernetes/kubernetes
65,14701.0,"The api doc shows:Kubernetes uses client certificates, tokens, or http basic auth to authenticate users for API calls.
So I tried to use basic auth to authenticate kubelet by set the --kubeconfig as config.yaml which generted by kubectl under ~/.kube/:

```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: http://master:8080
  name: ubuntu
contexts:
- context:
    cluster: """"
    user: """"
  name: development
- context:
    cluster: ubuntu
    user: ubuntu
  name: ubuntu
current-context: ubuntu
kind: Config
preferences: {}
users:
- name: ubuntu
  user:
    password: wpJjc2rKyCoiP7tb
    username: admin
```

But it did not work, so I thought whether the kubelet can use basic auth?
",username,https://github.com/kubernetes/kubernetes
66,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ,https://github.com/kubernetes/kubernetes
67,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm,https://github.com/kubernetes/kubernetes
68,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G,https://github.com/kubernetes/kubernetes
69,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus,https://github.com/kubernetes/kubernetes
70,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy,https://github.com/kubernetes/kubernetes
71,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2,https://github.com/kubernetes/kubernetes
72,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB,https://github.com/kubernetes/kubernetes
73,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr,https://github.com/kubernetes/kubernetes
74,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1,https://github.com/kubernetes/kubernetes
75,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG,https://github.com/kubernetes/kubernetes
76,6387.0,"Accessing `https://<master-ip>/api/v1beta1/proxy/services/monitoring-heapster/` redirects to `https://<master-ip>/validate/` instead of ` `https://<master-ip>/api/v1beta1/proxy/services/monitoring-heapster/validate`

Here is a snapshot of the request and response headers:

```
Remote Address:104.197.10.177:443
Request URL:https://104.197.10.177/api/v1beta1/proxy/services/monitoring-heapster/
Request Method:GET
Status Code:307 Temporary Redirect
Request Headersview source
Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding:gzip, deflate, sdch
Accept-Language:en-US,en;q=0.8
Authorization:Basic YWRtaW46SXMwQkV0RDFrTmVRTENEcw==
Cache-Control:no-cache
Connection:keep-alive
DNT:1
Host:104.197.10.177
Pragma:no-cache
User-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36

Response Headers
Connection:keep-alive
Content-Length:46
Content-Type:text/html; charset=utf-8
Date:Thu, 02 Apr 2015 21:21:32 GMT
Location:/validate/
Server:nginx/1.2.1
```
",YWRtaW46SXMwQkV0RDFrTmVRTENEcw,https://github.com/kubernetes/kubernetes
77,6264.0,"Forked from: https://github.com/GoogleCloudPlatform/kubernetes/pull/6175

I started a cluster on GCE and sent a simple GET request at `https://104.155.58.27/api/v1beta1/proxy/services/monitoring-grafana` via browser and printed the request received by proxy.go.
This is the output:

```
&{GET /api/v1beta1/proxy/services/monitoring-grafana 
HTTP/1.1 1 1 
map[Accept:[text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8] 
User-Agent:[Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.89 Safari/537.36] 
Accept-Encoding:[gzip, deflate, sdch] 
Accept-Language:[en-US,en;q=0.8] 
Connection:[upgrade] 
Authorization:[Basic YWRtaW46SGY4d1BNSHloU3Q0cFJsZg==]] 
0x1329250 0 [] false 127.0.0.1:8080 map[] map[] <nil> map[] 127.0.0.1:40439 /api/v1beta1/proxy/services/monitoring-grafana <nil>}
```

The request has a `Connection:[upgrade]` header even tough the original request did not have it.
Clearly someone is adding this header. @lavalamp suggested that this is unexpected. No one should be modifying request headers.
The header is not added when the cluster is running on localhost

The Request headers in Network tab of Chrome are:

```
Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding:gzip, deflate, sdch
Accept-Language:en-US,en;q=0.8
Authorization:Basic YWRtaW46SGY4d1BNSHloU3Q0cFJsZg==
Cache-Control:max-age=0
Connection:keep-alive
Host:23.251.148.110
User-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.89 Safari/537.36
```
",YWRtaW46SGY4d1BNSHloU3Q0cFJsZg,https://github.com/kubernetes/kubernetes
0,,,,https://github.com/open-meteo/open-meteo
0,,,,https://github.com/redis/redis
0,15867.0,"Am up and going on Docker with no problems and trying to make an ""MVP"" for self-hosted auth within my company.

Trying to run a vanilla JS auth:
```
var SUPABASE_URL = 'http://10.195.246.14:3000/';
var SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE';
var supabase = supabase.createClient(SUPABASE_URL, SUPABASE_KEY)


window.userToken = null

document.addEventListener('DOMContentLoaded', function (event) {
  var signUpForm = document.querySelector('#sign-up')
  signUpForm.onsubmit = signUpSubmitted.bind(signUpForm)

  var logInForm = document.querySelector('#log-in')
  logInForm.onsubmit = logInSubmitted.bind(logInForm)

  var userDetailsButton = document.querySelector('#user-button')
  userDetailsButton.onclick = fetchUserDetails.bind(userDetailsButton)

  var logoutButton = document.querySelector('#logout-button')
  logoutButton.onclick = logoutSubmitted.bind(logoutButton)
})

const signUpSubmitted = (event) => {
  event.preventDefault()
  const email = event.target[0].value
  const password = event.target[1].value

  supabase.auth
    .signUp({ email, password })
    .then((response) => {
      response.error ? alert(response.error.message) : setToken(response)
    })
    .catch((err) => {
      alert(err)
    })
}
```

Was hit with the classic CORS error

<img width=""551"" alt=""image"" src=""https://github.com/supabase/supabase/assets/12734718/68ea97d7-6c86-406d-b30e-923da2306170"">

I stumbled upon [this tutorial](https://dev.to/the_cozma/kongplugin-cors-fixing-access-control-allow-origin-header-missing-error-iao) which suggested a modification to `kong.yml` but it did not work at all.

Where in the config can I specify to allow cors for the auth server?",DOMContentLoaded,https://github.com/supabase/supabase
1,15867.0,"Am up and going on Docker with no problems and trying to make an ""MVP"" for self-hosted auth within my company.

Trying to run a vanilla JS auth:
```
var SUPABASE_URL = 'http://10.195.246.14:3000/';
var SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE';
var supabase = supabase.createClient(SUPABASE_URL, SUPABASE_KEY)


window.userToken = null

document.addEventListener('DOMContentLoaded', function (event) {
  var signUpForm = document.querySelector('#sign-up')
  signUpForm.onsubmit = signUpSubmitted.bind(signUpForm)

  var logInForm = document.querySelector('#log-in')
  logInForm.onsubmit = logInSubmitted.bind(logInForm)

  var userDetailsButton = document.querySelector('#user-button')
  userDetailsButton.onclick = fetchUserDetails.bind(userDetailsButton)

  var logoutButton = document.querySelector('#logout-button')
  logoutButton.onclick = logoutSubmitted.bind(logoutButton)
})

const signUpSubmitted = (event) => {
  event.preventDefault()
  const email = event.target[0].value
  const password = event.target[1].value

  supabase.auth
    .signUp({ email, password })
    .then((response) => {
      response.error ? alert(response.error.message) : setToken(response)
    })
    .catch((err) => {
      alert(err)
    })
}
```

Was hit with the classic CORS error

<img width=""551"" alt=""image"" src=""https://github.com/supabase/supabase/assets/12734718/68ea97d7-6c86-406d-b30e-923da2306170"">

I stumbled upon [this tutorial](https://dev.to/the_cozma/kongplugin-cors-fixing-access-control-allow-origin-header-missing-error-iao) which suggested a modification to `kong.yml` but it did not work at all.

Where in the config can I specify to allow cors for the auth server?",response,https://github.com/supabase/supabase
2,10469.0,"# Bug report

## Describe the bug
When including `emailRedirectTo` value in the `generateLink()` of type 'signup', the returned 'action_link' and 'redirect_to' values contain my site url instead of the specified `emailRedirectTo` value. Even when this url is whitelisted (listed in the Redirect URLs) in the dashboard.

## To Reproduce

Steps to reproduce the behavior, please provide code snippets or a repository:
```
  const { data, error } = await supabase.auth.admin.generateLink({
    type: ""signup"",
    email: email,
    options: {
      password: ""password"",
      data: {
        first_name: firstName,
        last_name: lastName,
      },
      emailRedirectTo: ""https://portal.my-domain.com"",
    },
  });
```

## Expected behavior

The response to use the emailRedirectTo value instead of my site url.

This is what I get:
```
generateLink data {
  properties: {
    action_link: 'https://alkdjflskdjflwemnfoijsnelfk.supabase.co/auth/v1/verify?token=c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5&type=signup&redirect_to=https://www.my-domain.com',
    email_otp: '313413584',
    hashed_token: 'c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5',
    redirect_to: 'https://www.my-domain.com',
    verification_type: 'signup'
  },
     ...
```

This is what I expect:
```
generateLink data {
  properties: {
    action_link: 'https://alkdjflskdjflwemnfoijsnelfk.supabase.co/auth/v1/verify?token=c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5&type=signup&redirect_to=https://portal.my-domain.com',
    email_otp: '313413584',
    hashed_token: 'c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5',
    redirect_to: 'https://portal.my-domain.com',
    verification_type: 'signup'
  },
     ...
```

## System information

- OS: macOS
- Version of supabase-js: ""@supabase/supabase-js"": ""^2.1.0"",
- Version of Node.js: 18.12.1

",c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5,https://github.com/supabase/supabase
3,10469.0,"# Bug report

## Describe the bug
When including `emailRedirectTo` value in the `generateLink()` of type 'signup', the returned 'action_link' and 'redirect_to' values contain my site url instead of the specified `emailRedirectTo` value. Even when this url is whitelisted (listed in the Redirect URLs) in the dashboard.

## To Reproduce

Steps to reproduce the behavior, please provide code snippets or a repository:
```
  const { data, error } = await supabase.auth.admin.generateLink({
    type: ""signup"",
    email: email,
    options: {
      password: ""password"",
      data: {
        first_name: firstName,
        last_name: lastName,
      },
      emailRedirectTo: ""https://portal.my-domain.com"",
    },
  });
```

## Expected behavior

The response to use the emailRedirectTo value instead of my site url.

This is what I get:
```
generateLink data {
  properties: {
    action_link: 'https://alkdjflskdjflwemnfoijsnelfk.supabase.co/auth/v1/verify?token=c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5&type=signup&redirect_to=https://www.my-domain.com',
    email_otp: '313413584',
    hashed_token: 'c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5',
    redirect_to: 'https://www.my-domain.com',
    verification_type: 'signup'
  },
     ...
```

This is what I expect:
```
generateLink data {
  properties: {
    action_link: 'https://alkdjflskdjflwemnfoijsnelfk.supabase.co/auth/v1/verify?token=c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5&type=signup&redirect_to=https://portal.my-domain.com',
    email_otp: '313413584',
    hashed_token: 'c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5',
    redirect_to: 'https://portal.my-domain.com',
    verification_type: 'signup'
  },
     ...
```

## System information

- OS: macOS
- Version of supabase-js: ""@supabase/supabase-js"": ""^2.1.0"",
- Version of Node.js: 18.12.1

",password,https://github.com/supabase/supabase
4,9666.0,"# Bug report


## Describe the bug
when using following JWT_SECRET in /docker/.env file -> it keeps connecting as per screenshot
![image](https://user-images.githubusercontent.com/10296400/196603215-bf08be2d-2fc5-4b4b-aa1a-15545ba30837.png)
`JWT_SECRET=7dxxx5f1-xxxx-xxxx-xxxx-f6xxx27aa398`

issue is related with size of jwt_secret. it works good on using default jwt_secret provided in /docker/.env.example. Also note that value for jwt_secret I am using is 36 chars so it is > 32. so basically it won't allow any similar key with any other chars which is of this length.


## To Reproduce


1. change /docker/.env file to following: (I have only changed JWT_SECRET)
```
############
# Secrets 
# YOU MUST CHANGE THESE BEFORE GOING INTO PRODUCTION
############

POSTGRES_PASSWORD=your-super-secret-and-long-postgres-password
JWT_SECRET=7dxxx5f1-xxxx-xxxx-xxxx-f6xxx27aa398
ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE
SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q


############
# Database - You can change these to any PostgreSQL database that has logical replication enabled.
############

POSTGRES_HOST=db
POSTGRES_DB=postgres
POSTGRES_USER=postgres
POSTGRES_PORT=5432


############
# API Proxy - Configuration for the Kong Reverse proxy.
############

KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443


############
# API - Configuration for PostgREST.
############

PGRST_DB_SCHEMAS=public,storage,graphql_public


############
# Auth - Configuration for the GoTrue authentication server.
############

## General
SITE_URL=http://localhost:3000
ADDITIONAL_REDIRECT_URLS=
JWT_EXPIRY=3600
DISABLE_SIGNUP=false
API_EXTERNAL_URL=http://localhost:8000

## Mailer Config
MAILER_URLPATHS_CONFIRMATION=""/auth/v1/verify""
MAILER_URLPATHS_INVITE=""/auth/v1/verify""
MAILER_URLPATHS_RECOVERY=""/auth/v1/verify""
MAILER_URLPATHS_EMAIL_CHANGE=""/auth/v1/verify""

## Email auth
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=false
SMTP_ADMIN_EMAIL=admin@example.com
SMTP_HOST=mail
SMTP_PORT=2500
SMTP_USER=fake_mail_user
SMTP_PASS=fake_mail_password
SMTP_SENDER_NAME=fake_sender

## Phone auth
ENABLE_PHONE_SIGNUP=true
ENABLE_PHONE_AUTOCONFIRM=true


############
# Studio - Configuration for the Dashboard
############

STUDIO_ORGANIZATION_NAME=Default Organization
STUDIO_PROJECT_NAME=Default Project

STUDIO_PORT=3000
PUBLIC_REST_URL=http://localhost:8000/rest/v1/ # replace if you intend to use Studio outside of localhost

```
2. run `docker-compose up`
3. goto http://localhost:3000 & select default project
4. it keeps loading.....

## Expected behavior

it should load the project. Please allow shorter jwt_secret so we can use secrets generated by supabase cloud locally. 
 

## System information

- windows 11
- latest chrome
- master branch latest
- not relevant as I am using docker
 
",7dxxx5f1-xxxx-xxxx-xxxx-f6xxx27aa398,https://github.com/supabase/supabase
5,9666.0,"# Bug report


## Describe the bug
when using following JWT_SECRET in /docker/.env file -> it keeps connecting as per screenshot
![image](https://user-images.githubusercontent.com/10296400/196603215-bf08be2d-2fc5-4b4b-aa1a-15545ba30837.png)
`JWT_SECRET=7dxxx5f1-xxxx-xxxx-xxxx-f6xxx27aa398`

issue is related with size of jwt_secret. it works good on using default jwt_secret provided in /docker/.env.example. Also note that value for jwt_secret I am using is 36 chars so it is > 32. so basically it won't allow any similar key with any other chars which is of this length.


## To Reproduce


1. change /docker/.env file to following: (I have only changed JWT_SECRET)
```
############
# Secrets 
# YOU MUST CHANGE THESE BEFORE GOING INTO PRODUCTION
############

POSTGRES_PASSWORD=your-super-secret-and-long-postgres-password
JWT_SECRET=7dxxx5f1-xxxx-xxxx-xxxx-f6xxx27aa398
ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE
SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q


############
# Database - You can change these to any PostgreSQL database that has logical replication enabled.
############

POSTGRES_HOST=db
POSTGRES_DB=postgres
POSTGRES_USER=postgres
POSTGRES_PORT=5432


############
# API Proxy - Configuration for the Kong Reverse proxy.
############

KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443


############
# API - Configuration for PostgREST.
############

PGRST_DB_SCHEMAS=public,storage,graphql_public


############
# Auth - Configuration for the GoTrue authentication server.
############

## General
SITE_URL=http://localhost:3000
ADDITIONAL_REDIRECT_URLS=
JWT_EXPIRY=3600
DISABLE_SIGNUP=false
API_EXTERNAL_URL=http://localhost:8000

## Mailer Config
MAILER_URLPATHS_CONFIRMATION=""/auth/v1/verify""
MAILER_URLPATHS_INVITE=""/auth/v1/verify""
MAILER_URLPATHS_RECOVERY=""/auth/v1/verify""
MAILER_URLPATHS_EMAIL_CHANGE=""/auth/v1/verify""

## Email auth
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=false
SMTP_ADMIN_EMAIL=admin@example.com
SMTP_HOST=mail
SMTP_PORT=2500
SMTP_USER=fake_mail_user
SMTP_PASS=fake_mail_password
SMTP_SENDER_NAME=fake_sender

## Phone auth
ENABLE_PHONE_SIGNUP=true
ENABLE_PHONE_AUTOCONFIRM=true


############
# Studio - Configuration for the Dashboard
############

STUDIO_ORGANIZATION_NAME=Default Organization
STUDIO_PROJECT_NAME=Default Project

STUDIO_PORT=3000
PUBLIC_REST_URL=http://localhost:8000/rest/v1/ # replace if you intend to use Studio outside of localhost

```
2. run `docker-compose up`
3. goto http://localhost:3000 & select default project
4. it keeps loading.....

## Expected behavior

it should load the project. Please allow shorter jwt_secret so we can use secrets generated by supabase cloud locally. 
 

## System information

- windows 11
- latest chrome
- master branch latest
- not relevant as I am using docker
 
",postgres-password,https://github.com/supabase/supabase
6,9666.0,"# Bug report


## Describe the bug
when using following JWT_SECRET in /docker/.env file -> it keeps connecting as per screenshot
![image](https://user-images.githubusercontent.com/10296400/196603215-bf08be2d-2fc5-4b4b-aa1a-15545ba30837.png)
`JWT_SECRET=7dxxx5f1-xxxx-xxxx-xxxx-f6xxx27aa398`

issue is related with size of jwt_secret. it works good on using default jwt_secret provided in /docker/.env.example. Also note that value for jwt_secret I am using is 36 chars so it is > 32. so basically it won't allow any similar key with any other chars which is of this length.


## To Reproduce


1. change /docker/.env file to following: (I have only changed JWT_SECRET)
```
############
# Secrets 
# YOU MUST CHANGE THESE BEFORE GOING INTO PRODUCTION
############

POSTGRES_PASSWORD=your-super-secret-and-long-postgres-password
JWT_SECRET=7dxxx5f1-xxxx-xxxx-xxxx-f6xxx27aa398
ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE
SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q


############
# Database - You can change these to any PostgreSQL database that has logical replication enabled.
############

POSTGRES_HOST=db
POSTGRES_DB=postgres
POSTGRES_USER=postgres
POSTGRES_PORT=5432


############
# API Proxy - Configuration for the Kong Reverse proxy.
############

KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443


############
# API - Configuration for PostgREST.
############

PGRST_DB_SCHEMAS=public,storage,graphql_public


############
# Auth - Configuration for the GoTrue authentication server.
############

## General
SITE_URL=http://localhost:3000
ADDITIONAL_REDIRECT_URLS=
JWT_EXPIRY=3600
DISABLE_SIGNUP=false
API_EXTERNAL_URL=http://localhost:8000

## Mailer Config
MAILER_URLPATHS_CONFIRMATION=""/auth/v1/verify""
MAILER_URLPATHS_INVITE=""/auth/v1/verify""
MAILER_URLPATHS_RECOVERY=""/auth/v1/verify""
MAILER_URLPATHS_EMAIL_CHANGE=""/auth/v1/verify""

## Email auth
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=false
SMTP_ADMIN_EMAIL=admin@example.com
SMTP_HOST=mail
SMTP_PORT=2500
SMTP_USER=fake_mail_user
SMTP_PASS=fake_mail_password
SMTP_SENDER_NAME=fake_sender

## Phone auth
ENABLE_PHONE_SIGNUP=true
ENABLE_PHONE_AUTOCONFIRM=true


############
# Studio - Configuration for the Dashboard
############

STUDIO_ORGANIZATION_NAME=Default Organization
STUDIO_PROJECT_NAME=Default Project

STUDIO_PORT=3000
PUBLIC_REST_URL=http://localhost:8000/rest/v1/ # replace if you intend to use Studio outside of localhost

```
2. run `docker-compose up`
3. goto http://localhost:3000 & select default project
4. it keeps loading.....

## Expected behavior

it should load the project. Please allow shorter jwt_secret so we can use secrets generated by supabase cloud locally. 
 

## System information

- windows 11
- latest chrome
- master branch latest
- not relevant as I am using docker
 
",PHK5vgusbcbo7X36XVt4Q,https://github.com/supabase/supabase
7,9666.0,"# Bug report


## Describe the bug
when using following JWT_SECRET in /docker/.env file -> it keeps connecting as per screenshot
![image](https://user-images.githubusercontent.com/10296400/196603215-bf08be2d-2fc5-4b4b-aa1a-15545ba30837.png)
`JWT_SECRET=7dxxx5f1-xxxx-xxxx-xxxx-f6xxx27aa398`

issue is related with size of jwt_secret. it works good on using default jwt_secret provided in /docker/.env.example. Also note that value for jwt_secret I am using is 36 chars so it is > 32. so basically it won't allow any similar key with any other chars which is of this length.


## To Reproduce


1. change /docker/.env file to following: (I have only changed JWT_SECRET)
```
############
# Secrets 
# YOU MUST CHANGE THESE BEFORE GOING INTO PRODUCTION
############

POSTGRES_PASSWORD=your-super-secret-and-long-postgres-password
JWT_SECRET=7dxxx5f1-xxxx-xxxx-xxxx-f6xxx27aa398
ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE
SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q


############
# Database - You can change these to any PostgreSQL database that has logical replication enabled.
############

POSTGRES_HOST=db
POSTGRES_DB=postgres
POSTGRES_USER=postgres
POSTGRES_PORT=5432


############
# API Proxy - Configuration for the Kong Reverse proxy.
############

KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443


############
# API - Configuration for PostgREST.
############

PGRST_DB_SCHEMAS=public,storage,graphql_public


############
# Auth - Configuration for the GoTrue authentication server.
############

## General
SITE_URL=http://localhost:3000
ADDITIONAL_REDIRECT_URLS=
JWT_EXPIRY=3600
DISABLE_SIGNUP=false
API_EXTERNAL_URL=http://localhost:8000

## Mailer Config
MAILER_URLPATHS_CONFIRMATION=""/auth/v1/verify""
MAILER_URLPATHS_INVITE=""/auth/v1/verify""
MAILER_URLPATHS_RECOVERY=""/auth/v1/verify""
MAILER_URLPATHS_EMAIL_CHANGE=""/auth/v1/verify""

## Email auth
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=false
SMTP_ADMIN_EMAIL=admin@example.com
SMTP_HOST=mail
SMTP_PORT=2500
SMTP_USER=fake_mail_user
SMTP_PASS=fake_mail_password
SMTP_SENDER_NAME=fake_sender

## Phone auth
ENABLE_PHONE_SIGNUP=true
ENABLE_PHONE_AUTOCONFIRM=true


############
# Studio - Configuration for the Dashboard
############

STUDIO_ORGANIZATION_NAME=Default Organization
STUDIO_PROJECT_NAME=Default Project

STUDIO_PORT=3000
PUBLIC_REST_URL=http://localhost:8000/rest/v1/ # replace if you intend to use Studio outside of localhost

```
2. run `docker-compose up`
3. goto http://localhost:3000 & select default project
4. it keeps loading.....

## Expected behavior

it should load the project. Please allow shorter jwt_secret so we can use secrets generated by supabase cloud locally. 
 

## System information

- windows 11
- latest chrome
- master branch latest
- not relevant as I am using docker
 
",SMTP_SENDER_NAME=fake_sender,https://github.com/supabase/supabase
8,9666.0,"# Bug report


## Describe the bug
when using following JWT_SECRET in /docker/.env file -> it keeps connecting as per screenshot
![image](https://user-images.githubusercontent.com/10296400/196603215-bf08be2d-2fc5-4b4b-aa1a-15545ba30837.png)
`JWT_SECRET=7dxxx5f1-xxxx-xxxx-xxxx-f6xxx27aa398`

issue is related with size of jwt_secret. it works good on using default jwt_secret provided in /docker/.env.example. Also note that value for jwt_secret I am using is 36 chars so it is > 32. so basically it won't allow any similar key with any other chars which is of this length.


## To Reproduce


1. change /docker/.env file to following: (I have only changed JWT_SECRET)
```
############
# Secrets 
# YOU MUST CHANGE THESE BEFORE GOING INTO PRODUCTION
############

POSTGRES_PASSWORD=your-super-secret-and-long-postgres-password
JWT_SECRET=7dxxx5f1-xxxx-xxxx-xxxx-f6xxx27aa398
ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE
SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q


############
# Database - You can change these to any PostgreSQL database that has logical replication enabled.
############

POSTGRES_HOST=db
POSTGRES_DB=postgres
POSTGRES_USER=postgres
POSTGRES_PORT=5432


############
# API Proxy - Configuration for the Kong Reverse proxy.
############

KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443


############
# API - Configuration for PostgREST.
############

PGRST_DB_SCHEMAS=public,storage,graphql_public


############
# Auth - Configuration for the GoTrue authentication server.
############

## General
SITE_URL=http://localhost:3000
ADDITIONAL_REDIRECT_URLS=
JWT_EXPIRY=3600
DISABLE_SIGNUP=false
API_EXTERNAL_URL=http://localhost:8000

## Mailer Config
MAILER_URLPATHS_CONFIRMATION=""/auth/v1/verify""
MAILER_URLPATHS_INVITE=""/auth/v1/verify""
MAILER_URLPATHS_RECOVERY=""/auth/v1/verify""
MAILER_URLPATHS_EMAIL_CHANGE=""/auth/v1/verify""

## Email auth
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=false
SMTP_ADMIN_EMAIL=admin@example.com
SMTP_HOST=mail
SMTP_PORT=2500
SMTP_USER=fake_mail_user
SMTP_PASS=fake_mail_password
SMTP_SENDER_NAME=fake_sender

## Phone auth
ENABLE_PHONE_SIGNUP=true
ENABLE_PHONE_AUTOCONFIRM=true


############
# Studio - Configuration for the Dashboard
############

STUDIO_ORGANIZATION_NAME=Default Organization
STUDIO_PROJECT_NAME=Default Project

STUDIO_PORT=3000
PUBLIC_REST_URL=http://localhost:8000/rest/v1/ # replace if you intend to use Studio outside of localhost

```
2. run `docker-compose up`
3. goto http://localhost:3000 & select default project
4. it keeps loading.....

## Expected behavior

it should load the project. Please allow shorter jwt_secret so we can use secrets generated by supabase cloud locally. 
 

## System information

- windows 11
- latest chrome
- master branch latest
- not relevant as I am using docker
 
",xxxx-f6xxx27aa398,https://github.com/supabase/supabase
9,9666.0,"# Bug report


## Describe the bug
when using following JWT_SECRET in /docker/.env file -> it keeps connecting as per screenshot
![image](https://user-images.githubusercontent.com/10296400/196603215-bf08be2d-2fc5-4b4b-aa1a-15545ba30837.png)
`JWT_SECRET=7dxxx5f1-xxxx-xxxx-xxxx-f6xxx27aa398`

issue is related with size of jwt_secret. it works good on using default jwt_secret provided in /docker/.env.example. Also note that value for jwt_secret I am using is 36 chars so it is > 32. so basically it won't allow any similar key with any other chars which is of this length.


## To Reproduce


1. change /docker/.env file to following: (I have only changed JWT_SECRET)
```
############
# Secrets 
# YOU MUST CHANGE THESE BEFORE GOING INTO PRODUCTION
############

POSTGRES_PASSWORD=your-super-secret-and-long-postgres-password
JWT_SECRET=7dxxx5f1-xxxx-xxxx-xxxx-f6xxx27aa398
ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE
SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q


############
# Database - You can change these to any PostgreSQL database that has logical replication enabled.
############

POSTGRES_HOST=db
POSTGRES_DB=postgres
POSTGRES_USER=postgres
POSTGRES_PORT=5432


############
# API Proxy - Configuration for the Kong Reverse proxy.
############

KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443


############
# API - Configuration for PostgREST.
############

PGRST_DB_SCHEMAS=public,storage,graphql_public


############
# Auth - Configuration for the GoTrue authentication server.
############

## General
SITE_URL=http://localhost:3000
ADDITIONAL_REDIRECT_URLS=
JWT_EXPIRY=3600
DISABLE_SIGNUP=false
API_EXTERNAL_URL=http://localhost:8000

## Mailer Config
MAILER_URLPATHS_CONFIRMATION=""/auth/v1/verify""
MAILER_URLPATHS_INVITE=""/auth/v1/verify""
MAILER_URLPATHS_RECOVERY=""/auth/v1/verify""
MAILER_URLPATHS_EMAIL_CHANGE=""/auth/v1/verify""

## Email auth
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=false
SMTP_ADMIN_EMAIL=admin@example.com
SMTP_HOST=mail
SMTP_PORT=2500
SMTP_USER=fake_mail_user
SMTP_PASS=fake_mail_password
SMTP_SENDER_NAME=fake_sender

## Phone auth
ENABLE_PHONE_SIGNUP=true
ENABLE_PHONE_AUTOCONFIRM=true


############
# Studio - Configuration for the Dashboard
############

STUDIO_ORGANIZATION_NAME=Default Organization
STUDIO_PROJECT_NAME=Default Project

STUDIO_PORT=3000
PUBLIC_REST_URL=http://localhost:8000/rest/v1/ # replace if you intend to use Studio outside of localhost

```
2. run `docker-compose up`
3. goto http://localhost:3000 & select default project
4. it keeps loading.....

## Expected behavior

it should load the project. Please allow shorter jwt_secret so we can use secrets generated by supabase cloud locally. 
 

## System information

- windows 11
- latest chrome
- master branch latest
- not relevant as I am using docker
 
",password,https://github.com/supabase/supabase
10,5798.0,"# Bug report

## Describe the bug

While self hosting I get 404 ""We couldn't find the page you're looking for"" on all rest api endpoints.

## To Reproduce

1. Setup locally using docker-compose: https://supabase.com/docs/guides/hosting/docker
2. `cp .env.example .env`
3. `docker-compose up`
4. run sql `create table foo (bar text);`
5. run:
```
curl -v 'http://localhost:3000/rest/v1/foo?select=*' \
  -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q' \
  -H 'apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q' 
```

## Expected behavior

Should give the proper output to the query. Instead it looks like the request does not even reach the rest service but is 404ed by (probably) supabase-studio.
",PHK5vgusbcbo7X36XVt4Q,https://github.com/supabase/supabase
11,5096.0,"Hi,

I have multiple questions regarding authentication and cant really find anything that helps me.
Maybe its a bug maybe its missing documentation, an error on my part or just expected behavior, I don't know @kiwicopple 

**Token expiration and startup** 
If I set the expire token duration to 1 week I **can restore** the session within that week. 
If I set the expire token duration to 2 min and the user opens  the app after that duration no refresh is possible and **""Invalid JWT token""** error appears.

Thats my token with the Invalid JWT token error on my dev environment, not that critical to share.
`""{""currentSession"":{""access_token"":""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNjQyODA1ODIwLCJzdWIiOiIzMDc4ZjY2NS1jNjFiLTQ0Y2UtYjY3ZS1kNzIyOTNjMWFjMmMiLCJlbWFpbCI6InNlcmdlai5zYWNoc0BnbXguZGUiLCJwaG9uZSI6IiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7fSwicm9sZSI6ImF1dGhlbnRpY2F0ZWQifQ.QQaZpPDTy1urjbZNoMf88I15HIIHIoGRPJN152ht06U"",""expires_in"":120,""refresh_token"":""ybqC0YdCNlYxByvlQh5WQA"",""token_type"":""bearer"",""provider_token"":null,""user"":{""id"":""3078f665-c61b-44ce-b67e-d72293c1ac2c"",""app_metadata"":{""provider"":""email"",""providers"":[""email""]},""user_metadata"":{},""aud"":""authenticated"",""email"":""anymail@provider.com"",""created_at"":""2022-01-20T12:12:57.382314Z"",""confirmed_at"":""2022-01-20T12:12:57.387309Z"",""last_sign_in_at"":""2022-01-21T22:55:00.788920397Z"",""role"":""authenticated"",""updated_at"":""2022-01-21T22:55:00.790273Z""}},""expiresAt"":1642805820}""`

If I set the expiration to 2 min and close my app for that time, should I be able to refresh my session? Because one week would be short for logout on users that does not open an app in that timeframe.

**Expired token while app is running**
I saw a property called ""**autoRefreshTokens**"" but this don't happen if my app is running and my token expires.
If I want to call any database API I get ""**JWT token expired""** error back.

I tested it with 2 min JWT expiration duration and using the dart only library for this tests.","ybqC0YdCNlYxByvlQh5WQA,token_type:bearer,provider_token:null,",https://github.com/supabase/supabase
12,4040.0,"The user signup with his email, A confirmation email was sent in his inbox
```js
const {
    session: _session,
    error
} = await supabase.auth.signUp({
    email,
    password
}, {
    redirectTo: 'http://localhost:3000/login?message=Congratulations! Your email now is confirmed.'
});
if (error) {
    alert(error.message);
    return;
}
alert(`check your email!`);
```

When the user click on the verification link he get this:

```
http://localhost:3000/#error_code=404&error_description=Confirmation+Token+not+found
```

The link was like that:
```
https://glkylfhlgbxdibbqaqyg.supabase.co/auth/v1/verify?token=qFJNoSmSncg5cdZ0Bw6CXQ&type=signup&redirect_to=http://localhost:3000/
```

Another thing! The `{ redirectTo }` option is worked with the providers correctly, But with *email & password* it doesn't work!

#### Note
> The email verification link worked at the first try, But when i removed the user and trying again, the error above is happened",redirectTo,https://github.com/supabase/supabase
0,,,,https://github.com/umami-software/umami
0,2324.0,"As pointed out in https://spectrum.chat/zeit/now/now-dev-without-credentials~1a755ccf-ec83-4c81-a5aa-7e79574c73a2?m=MTU1NzIyODYyMzkzNw== we should consider removing the authentication requirement for `now dev`.

Asking for ZEIT credentials when running locally is unexpected and might become a blocker when using `now dev` in continuous-integration environments.",1a755ccf-ec83-4c81-a5aa-7e79574c73a2,https://github.com/vercel/vercel
0,,,,https://github.com/bkhezry/weather
0,19045.0,"I have created a EKS cluster for gitlab runners, when I execute the terraform operations the Container Pod ( Kubernetes Excutor) assumes Worker Node Role. AS per documentation of EKS and also Terraform 
[terraformdocs](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#codebuild-ecs-and-eks-roles)


The terraform init fails with below error ---

Initializing the backend...
2021/04/20 11:30:35 [INFO] Successfully derived credentials from session
2021/04/20 11:30:35 [INFO] AWS Auth provider used: ""EC2RoleProvider""
2021/04/20 11:30:35 [DEBUG] Trying to get account information via sts:GetCallerIdentity
2021/04/20 11:30:35 [DEBUG] [aws-sdk-go] DEBUG: Request sts/GetCallerIdentity Details:
---[ REQUEST POST-SIGN ]-----------------------------
POST / HTTP/1.1
Host: sts.amazonaws.com
User-Agent: aws-sdk-go/1.37.0 (go1.15.6; linux; amd64) APN/1.0 HashiCorp/1.0 Terraform/0.14.7
Content-Length: 43
Authorization: AWS4-HMAC-SHA256 Credential=ASIAV6U7E6GGBJ4F6ZZ5/20210420/us-east-1/sts/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-security-token, Signature=e614da49f0338e1e9045f09d1cd050d0ed2313acc689f4c8baf0f352f051f0fb
Content-Type: application/x-www-form-urlencoded; charset=utf-8
X-Amz-Date: 20210420T113035Z
X-Amz-Security-Token: xxxxxxxxxx
HTTP/1.1 200 OK
Connection: close
Content-Length: 462
Content-Type: text/xml
Date: Tue, 20 Apr 2021 11:30:34 GMT
X-Amzn-Requestid: 50c57d8f-66c4-4807-9eb9-4ba240f3fbdd
-----------------------------------------------------
2021/04/20 11:30:35 [DEBUG] [aws-sdk-go] <GetCallerIdentityResponse xmlns=""https://sts.amazonaws.com/doc/2011-06-15/"">
<GetCallerIdentityResult>
<Arn>arn:aws:sts::xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:assumed-role/dev-eks-node-role/i-9hjh76fffa85ccf9bfa252</Arn>
<UserId>xhjhkjhfhfhghjkljlk:i-08cda85ccf9bfa252</UserId>
<Account>11111111111111</Account>
</GetCallerIdentityResult>
<ResponseMetadata>
<RequestId>50c57d8f-gh909uhj-4807-9eb9-4ba240f3fbdd</RequestId>
</ResponseMetadata>
</GetCallerIdentityResponse>
2021/04/20 11:30:35 [DEBUG] checking for provisioner in "".""
2021/04/20 11:30:35 [DEBUG] checking for provisioner in ""/bin""
2021/04/20 11:30:35 [INFO] Failed to read plugin lock file .terraform/plugins/linux_amd64/lock.json: open .terraform/plugins/linux_amd64/lock.json: no such file or directory

Here as we can see the Runner makes call for Identity and gets eks-node role i.e worker node Role, instead of the Pod Role.
The AWS team has verified all the IAM role and eks cluster settings, its now terraform issue thats giving wrong output.

I have tried all suggestions from blogs but not able to get pass this worker node Role. I do not want the worker node role to come in picture, but Pod Role should be used. The Pod has AWS_ROLE_ARN set correctly.

Please assist asap",e614da49f0338e1e9045f09d1cd050d0ed2313acc689f4c8baf0f352f051f0fb,https://github.com/hashicorp/terraform-provider-aws
1,19045.0,"I have created a EKS cluster for gitlab runners, when I execute the terraform operations the Container Pod ( Kubernetes Excutor) assumes Worker Node Role. AS per documentation of EKS and also Terraform 
[terraformdocs](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#codebuild-ecs-and-eks-roles)


The terraform init fails with below error ---

Initializing the backend...
2021/04/20 11:30:35 [INFO] Successfully derived credentials from session
2021/04/20 11:30:35 [INFO] AWS Auth provider used: ""EC2RoleProvider""
2021/04/20 11:30:35 [DEBUG] Trying to get account information via sts:GetCallerIdentity
2021/04/20 11:30:35 [DEBUG] [aws-sdk-go] DEBUG: Request sts/GetCallerIdentity Details:
---[ REQUEST POST-SIGN ]-----------------------------
POST / HTTP/1.1
Host: sts.amazonaws.com
User-Agent: aws-sdk-go/1.37.0 (go1.15.6; linux; amd64) APN/1.0 HashiCorp/1.0 Terraform/0.14.7
Content-Length: 43
Authorization: AWS4-HMAC-SHA256 Credential=ASIAV6U7E6GGBJ4F6ZZ5/20210420/us-east-1/sts/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-security-token, Signature=e614da49f0338e1e9045f09d1cd050d0ed2313acc689f4c8baf0f352f051f0fb
Content-Type: application/x-www-form-urlencoded; charset=utf-8
X-Amz-Date: 20210420T113035Z
X-Amz-Security-Token: xxxxxxxxxx
HTTP/1.1 200 OK
Connection: close
Content-Length: 462
Content-Type: text/xml
Date: Tue, 20 Apr 2021 11:30:34 GMT
X-Amzn-Requestid: 50c57d8f-66c4-4807-9eb9-4ba240f3fbdd
-----------------------------------------------------
2021/04/20 11:30:35 [DEBUG] [aws-sdk-go] <GetCallerIdentityResponse xmlns=""https://sts.amazonaws.com/doc/2011-06-15/"">
<GetCallerIdentityResult>
<Arn>arn:aws:sts::xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:assumed-role/dev-eks-node-role/i-9hjh76fffa85ccf9bfa252</Arn>
<UserId>xhjhkjhfhfhghjkljlk:i-08cda85ccf9bfa252</UserId>
<Account>11111111111111</Account>
</GetCallerIdentityResult>
<ResponseMetadata>
<RequestId>50c57d8f-gh909uhj-4807-9eb9-4ba240f3fbdd</RequestId>
</ResponseMetadata>
</GetCallerIdentityResponse>
2021/04/20 11:30:35 [DEBUG] checking for provisioner in "".""
2021/04/20 11:30:35 [DEBUG] checking for provisioner in ""/bin""
2021/04/20 11:30:35 [INFO] Failed to read plugin lock file .terraform/plugins/linux_amd64/lock.json: open .terraform/plugins/linux_amd64/lock.json: no such file or directory

Here as we can see the Runner makes call for Identity and gets eks-node role i.e worker node Role, instead of the Pod Role.
The AWS team has verified all the IAM role and eks cluster settings, its now terraform issue thats giving wrong output.

I have tried all suggestions from blogs but not able to get pass this worker node Role. I do not want the worker node role to come in picture, but Pod Role should be used. The Pod has AWS_ROLE_ARN set correctly.

Please assist asap",ASIAV6U7E6GGBJ4F6ZZ5,https://github.com/hashicorp/terraform-provider-aws
2,19045.0,"I have created a EKS cluster for gitlab runners, when I execute the terraform operations the Container Pod ( Kubernetes Excutor) assumes Worker Node Role. AS per documentation of EKS and also Terraform 
[terraformdocs](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#codebuild-ecs-and-eks-roles)


The terraform init fails with below error ---

Initializing the backend...
2021/04/20 11:30:35 [INFO] Successfully derived credentials from session
2021/04/20 11:30:35 [INFO] AWS Auth provider used: ""EC2RoleProvider""
2021/04/20 11:30:35 [DEBUG] Trying to get account information via sts:GetCallerIdentity
2021/04/20 11:30:35 [DEBUG] [aws-sdk-go] DEBUG: Request sts/GetCallerIdentity Details:
---[ REQUEST POST-SIGN ]-----------------------------
POST / HTTP/1.1
Host: sts.amazonaws.com
User-Agent: aws-sdk-go/1.37.0 (go1.15.6; linux; amd64) APN/1.0 HashiCorp/1.0 Terraform/0.14.7
Content-Length: 43
Authorization: AWS4-HMAC-SHA256 Credential=ASIAV6U7E6GGBJ4F6ZZ5/20210420/us-east-1/sts/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-security-token, Signature=e614da49f0338e1e9045f09d1cd050d0ed2313acc689f4c8baf0f352f051f0fb
Content-Type: application/x-www-form-urlencoded; charset=utf-8
X-Amz-Date: 20210420T113035Z
X-Amz-Security-Token: xxxxxxxxxx
HTTP/1.1 200 OK
Connection: close
Content-Length: 462
Content-Type: text/xml
Date: Tue, 20 Apr 2021 11:30:34 GMT
X-Amzn-Requestid: 50c57d8f-66c4-4807-9eb9-4ba240f3fbdd
-----------------------------------------------------
2021/04/20 11:30:35 [DEBUG] [aws-sdk-go] <GetCallerIdentityResponse xmlns=""https://sts.amazonaws.com/doc/2011-06-15/"">
<GetCallerIdentityResult>
<Arn>arn:aws:sts::xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:assumed-role/dev-eks-node-role/i-9hjh76fffa85ccf9bfa252</Arn>
<UserId>xhjhkjhfhfhghjkljlk:i-08cda85ccf9bfa252</UserId>
<Account>11111111111111</Account>
</GetCallerIdentityResult>
<ResponseMetadata>
<RequestId>50c57d8f-gh909uhj-4807-9eb9-4ba240f3fbdd</RequestId>
</ResponseMetadata>
</GetCallerIdentityResponse>
2021/04/20 11:30:35 [DEBUG] checking for provisioner in "".""
2021/04/20 11:30:35 [DEBUG] checking for provisioner in ""/bin""
2021/04/20 11:30:35 [INFO] Failed to read plugin lock file .terraform/plugins/linux_amd64/lock.json: open .terraform/plugins/linux_amd64/lock.json: no such file or directory

Here as we can see the Runner makes call for Identity and gets eks-node role i.e worker node Role, instead of the Pod Role.
The AWS team has verified all the IAM role and eks cluster settings, its now terraform issue thats giving wrong output.

I have tried all suggestions from blogs but not able to get pass this worker node Role. I do not want the worker node role to come in picture, but Pod Role should be used. The Pod has AWS_ROLE_ARN set correctly.

Please assist asap",SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-,https://github.com/hashicorp/terraform-provider-aws
3,16350.0,"<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a 👍 [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave ""+1"" or other comments that do not add relevant new information or questions, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

### Description

<!--- Please leave a helpful description of the feature request here. --->

The aws_networkfirewall_firewall resource needs to expose the VPC endpoints created by the firewall for use in routing tables in order to actually use it.  These endpoints are exposed in the FirewallStatus structure returned by the API.

For example:
```
$ aws --region us-east-1 network-firewall describe-firewall --firewall-name dhagan-2020-11-20-002
{
    ""UpdateToken"": ""29c6147b-e772-4c46-8d78-7aa5f2b71aaf"",
    ""Firewall"": {
        ""FirewallName"": ""dhagan-2020-11-20-002"",
        ""FirewallArn"": ""arn:aws:network-firewall:us-east-1:xxx:firewall/dhagan-2020-11-20-002"",
        ""FirewallPolicyArn"": ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"",
        ""VpcId"": ""vpc-0b857b1a3686ae36d"",
        ""SubnetMappings"": [
            {
                ""SubnetId"": ""subnet-0f96d5471222feb28""
            },
            {
                ""SubnetId"": ""subnet-0f55ba6bdcc7357ca""
            },
            {
                ""SubnetId"": ""subnet-03c8e80f3c807fd2e""
            },
            {
                ""SubnetId"": ""subnet-05d7d553643f36d0e""
            },
            {
                ""SubnetId"": ""subnet-02e8df98316b27054""
            }
        ],
        ""DeleteProtection"": false,
        ""SubnetChangeProtection"": false,
        ""FirewallPolicyChangeProtection"": false,
        ""FirewallId"": ""b70bc32e-9753-4d7e-bb82-febfb362b72b"",
        ""Tags"": []
    },
    ""FirewallStatus"": {
        ""Status"": ""READY"",
        ""ConfigurationSyncStateSummary"": ""IN_SYNC"",
        ""SyncStates"": {
            ""us-east-1a"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-05d7d553643f36d0e"",
                    ""EndpointId"": ""vpce-0394425be976920e3"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1b"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-0f96d5471222feb28"",
                    ""EndpointId"": ""vpce-073e44a76dab0949e"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1c"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-0f55ba6bdcc7357ca"",
                    ""EndpointId"": ""vpce-0ae3a6d2b2c886215"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1d"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-02e8df98316b27054"",
                    ""EndpointId"": ""vpce-0006b35c0f00be77c"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1f"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-03c8e80f3c807fd2e"",
                    ""EndpointId"": ""vpce-0552034c8ae2b92ce"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            }
        }
    }
}
```


### New or Affected Resource(s)

<!--- Please list the new or affected resources and data sources. --->

* aws_networkfirewall_firewall

### Potential Terraform Configuration

<!--- Information about code formatting: https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code --->

```hcl
# Copy-paste your Terraform configurations here - for large Terraform configs,
# please use a service like Dropbox and share a link to the ZIP file. For
# security, you can also encrypt the files using our GPG public key.
```

### References

<!---
Information about referencing Github Issues: https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests

Are there any other GitHub issues (open or closed) or pull requests that should be linked here? Vendor blog posts or documentation? For example:

* https://aws.amazon.com/about-aws/whats-new/2018/04/introducing-amazon-ec2-fleet/
--->

* https://docs.aws.amazon.com/network-firewall/latest/APIReference/API_FirewallStatus.html
",FirewallPolicyChangeProtection,https://github.com/hashicorp/terraform-provider-aws
4,16350.0,"<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a 👍 [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave ""+1"" or other comments that do not add relevant new information or questions, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

### Description

<!--- Please leave a helpful description of the feature request here. --->

The aws_networkfirewall_firewall resource needs to expose the VPC endpoints created by the firewall for use in routing tables in order to actually use it.  These endpoints are exposed in the FirewallStatus structure returned by the API.

For example:
```
$ aws --region us-east-1 network-firewall describe-firewall --firewall-name dhagan-2020-11-20-002
{
    ""UpdateToken"": ""29c6147b-e772-4c46-8d78-7aa5f2b71aaf"",
    ""Firewall"": {
        ""FirewallName"": ""dhagan-2020-11-20-002"",
        ""FirewallArn"": ""arn:aws:network-firewall:us-east-1:xxx:firewall/dhagan-2020-11-20-002"",
        ""FirewallPolicyArn"": ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"",
        ""VpcId"": ""vpc-0b857b1a3686ae36d"",
        ""SubnetMappings"": [
            {
                ""SubnetId"": ""subnet-0f96d5471222feb28""
            },
            {
                ""SubnetId"": ""subnet-0f55ba6bdcc7357ca""
            },
            {
                ""SubnetId"": ""subnet-03c8e80f3c807fd2e""
            },
            {
                ""SubnetId"": ""subnet-05d7d553643f36d0e""
            },
            {
                ""SubnetId"": ""subnet-02e8df98316b27054""
            }
        ],
        ""DeleteProtection"": false,
        ""SubnetChangeProtection"": false,
        ""FirewallPolicyChangeProtection"": false,
        ""FirewallId"": ""b70bc32e-9753-4d7e-bb82-febfb362b72b"",
        ""Tags"": []
    },
    ""FirewallStatus"": {
        ""Status"": ""READY"",
        ""ConfigurationSyncStateSummary"": ""IN_SYNC"",
        ""SyncStates"": {
            ""us-east-1a"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-05d7d553643f36d0e"",
                    ""EndpointId"": ""vpce-0394425be976920e3"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1b"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-0f96d5471222feb28"",
                    ""EndpointId"": ""vpce-073e44a76dab0949e"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1c"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-0f55ba6bdcc7357ca"",
                    ""EndpointId"": ""vpce-0ae3a6d2b2c886215"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1d"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-02e8df98316b27054"",
                    ""EndpointId"": ""vpce-0006b35c0f00be77c"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1f"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-03c8e80f3c807fd2e"",
                    ""EndpointId"": ""vpce-0552034c8ae2b92ce"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            }
        }
    }
}
```


### New or Affected Resource(s)

<!--- Please list the new or affected resources and data sources. --->

* aws_networkfirewall_firewall

### Potential Terraform Configuration

<!--- Information about code formatting: https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code --->

```hcl
# Copy-paste your Terraform configurations here - for large Terraform configs,
# please use a service like Dropbox and share a link to the ZIP file. For
# security, you can also encrypt the files using our GPG public key.
```

### References

<!---
Information about referencing Github Issues: https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests

Are there any other GitHub issues (open or closed) or pull requests that should be linked here? Vendor blog posts or documentation? For example:

* https://aws.amazon.com/about-aws/whats-new/2018/04/introducing-amazon-ec2-fleet/
--->

* https://docs.aws.amazon.com/network-firewall/latest/APIReference/API_FirewallStatus.html
",29c6147b-e772-4c46-8d78-7aa5f2b71aaf,https://github.com/hashicorp/terraform-provider-aws
5,16350.0,"<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a 👍 [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave ""+1"" or other comments that do not add relevant new information or questions, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

### Description

<!--- Please leave a helpful description of the feature request here. --->

The aws_networkfirewall_firewall resource needs to expose the VPC endpoints created by the firewall for use in routing tables in order to actually use it.  These endpoints are exposed in the FirewallStatus structure returned by the API.

For example:
```
$ aws --region us-east-1 network-firewall describe-firewall --firewall-name dhagan-2020-11-20-002
{
    ""UpdateToken"": ""29c6147b-e772-4c46-8d78-7aa5f2b71aaf"",
    ""Firewall"": {
        ""FirewallName"": ""dhagan-2020-11-20-002"",
        ""FirewallArn"": ""arn:aws:network-firewall:us-east-1:xxx:firewall/dhagan-2020-11-20-002"",
        ""FirewallPolicyArn"": ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"",
        ""VpcId"": ""vpc-0b857b1a3686ae36d"",
        ""SubnetMappings"": [
            {
                ""SubnetId"": ""subnet-0f96d5471222feb28""
            },
            {
                ""SubnetId"": ""subnet-0f55ba6bdcc7357ca""
            },
            {
                ""SubnetId"": ""subnet-03c8e80f3c807fd2e""
            },
            {
                ""SubnetId"": ""subnet-05d7d553643f36d0e""
            },
            {
                ""SubnetId"": ""subnet-02e8df98316b27054""
            }
        ],
        ""DeleteProtection"": false,
        ""SubnetChangeProtection"": false,
        ""FirewallPolicyChangeProtection"": false,
        ""FirewallId"": ""b70bc32e-9753-4d7e-bb82-febfb362b72b"",
        ""Tags"": []
    },
    ""FirewallStatus"": {
        ""Status"": ""READY"",
        ""ConfigurationSyncStateSummary"": ""IN_SYNC"",
        ""SyncStates"": {
            ""us-east-1a"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-05d7d553643f36d0e"",
                    ""EndpointId"": ""vpce-0394425be976920e3"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1b"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-0f96d5471222feb28"",
                    ""EndpointId"": ""vpce-073e44a76dab0949e"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1c"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-0f55ba6bdcc7357ca"",
                    ""EndpointId"": ""vpce-0ae3a6d2b2c886215"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1d"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-02e8df98316b27054"",
                    ""EndpointId"": ""vpce-0006b35c0f00be77c"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1f"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-03c8e80f3c807fd2e"",
                    ""EndpointId"": ""vpce-0552034c8ae2b92ce"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            }
        }
    }
}
```


### New or Affected Resource(s)

<!--- Please list the new or affected resources and data sources. --->

* aws_networkfirewall_firewall

### Potential Terraform Configuration

<!--- Information about code formatting: https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code --->

```hcl
# Copy-paste your Terraform configurations here - for large Terraform configs,
# please use a service like Dropbox and share a link to the ZIP file. For
# security, you can also encrypt the files using our GPG public key.
```

### References

<!---
Information about referencing Github Issues: https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests

Are there any other GitHub issues (open or closed) or pull requests that should be linked here? Vendor blog posts or documentation? For example:

* https://aws.amazon.com/about-aws/whats-new/2018/04/introducing-amazon-ec2-fleet/
--->

* https://docs.aws.amazon.com/network-firewall/latest/APIReference/API_FirewallStatus.html
",8d78-7aa5f2b71aaf,https://github.com/hashicorp/terraform-provider-aws
6,10110.0,"<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a 👍 [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave ""+1"" or ""me too"" comments, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

### Description

Here is an example of a shared credentials file configuration that is supported by the [awscli](https://docs.aws.amazon.com/en_pv/cli/latest/userguide/cli-configure-role.html)
```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator]
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
```

This works by caching credentials in the `~/.aws/cli/cache` directory. The awscli can read from this cache but **terraform cannot**.

you will get the following error:

```
Error initializing session: SharedConfigAssumeRoleError: failed to load assume role for arn:aws:iam::12345678901:role/spectator, source profile has no shared credentials
```

### Work around

In order to support terraform, you will need something like:

```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator] # these are also fake credentials
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
aws_access_key_id = ASIA554SXXVIYYQRGGER
aws_secret_access_key = aw5/hbwzGP31s2lfC3ZQshKE+AZdlOYkqBUI4otp
aws_session_token = FQoGZXIvYXdHEY4aDDDbLp6g5sfNojzC6CKwAV+yefPfFg7y0xADMDECoddpj9WecBEReMtXkRjCVZfbSa1604EIK2q0zshlsP0PtF0e5wBZFDuZHTI464EpSQEXkJajksWeMMOe7PSzyJOX5Zqp8ve4ItHoE70tGxIVQjA06NbvodNjjOO/gsbDAcKHW1rx9wnq3RJ+dQbqqNq01R1vrDvTjxDNTrZr2wYI2qYrd9REP+mc44EeIO+3r0iuiwxRCL1UzS/4nG4IRYG2KMeo9esF
```

### References

<!---
Information about referencing Github Issues: https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests

Are there any other GitHub issues (open or closed) or pull requests that should be linked here? Vendor blog posts or documentation? For example:

* https://aws.amazon.com/about-aws/whats-new/2018/04/introducing-amazon-ec2-fleet/
--->

* https://github.com/gruntwork-io/terragrunt/issues/527
",yefPfFg7y0xADMDECoddpj9WecBEReMtXkRjCVZfbSa1604EIK2q0zshlsP0PtF0e5wBZFDuZ,https://github.com/hashicorp/terraform-provider-aws
7,10110.0,"<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a 👍 [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave ""+1"" or ""me too"" comments, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

### Description

Here is an example of a shared credentials file configuration that is supported by the [awscli](https://docs.aws.amazon.com/en_pv/cli/latest/userguide/cli-configure-role.html)
```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator]
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
```

This works by caching credentials in the `~/.aws/cli/cache` directory. The awscli can read from this cache but **terraform cannot**.

you will get the following error:

```
Error initializing session: SharedConfigAssumeRoleError: failed to load assume role for arn:aws:iam::12345678901:role/spectator, source profile has no shared credentials
```

### Work around

In order to support terraform, you will need something like:

```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator] # these are also fake credentials
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
aws_access_key_id = ASIA554SXXVIYYQRGGER
aws_secret_access_key = aw5/hbwzGP31s2lfC3ZQshKE+AZdlOYkqBUI4otp
aws_session_token = FQoGZXIvYXdHEY4aDDDbLp6g5sfNojzC6CKwAV+yefPfFg7y0xADMDECoddpj9WecBEReMtXkRjCVZfbSa1604EIK2q0zshlsP0PtF0e5wBZFDuZHTI464EpSQEXkJajksWeMMOe7PSzyJOX5Zqp8ve4ItHoE70tGxIVQjA06NbvodNjjOO/gsbDAcKHW1rx9wnq3RJ+dQbqqNq01R1vrDvTjxDNTrZr2wYI2qYrd9REP+mc44EeIO+3r0iuiwxRCL1UzS/4nG4IRYG2KMeo9esF
```

### References

<!---
Information about referencing Github Issues: https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests

Are there any other GitHub issues (open or closed) or pull requests that should be linked here? Vendor blog posts or documentation? For example:

* https://aws.amazon.com/about-aws/whats-new/2018/04/introducing-amazon-ec2-fleet/
--->

* https://github.com/gruntwork-io/terragrunt/issues/527
",yefPfFg7y0xADMDECoddpj9WecBEReMtXkRjCVZfbSa1604EIK2q0zshlsP0PtF0e5wBZFDuZHTI464EpSQEXkJajksWeMMOe7PSzyJOX5Zqp8ve4ItHoE70tGxIVQjA06NbvodNjjOO,https://github.com/hashicorp/terraform-provider-aws
8,10110.0,"<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a 👍 [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave ""+1"" or ""me too"" comments, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

### Description

Here is an example of a shared credentials file configuration that is supported by the [awscli](https://docs.aws.amazon.com/en_pv/cli/latest/userguide/cli-configure-role.html)
```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator]
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
```

This works by caching credentials in the `~/.aws/cli/cache` directory. The awscli can read from this cache but **terraform cannot**.

you will get the following error:

```
Error initializing session: SharedConfigAssumeRoleError: failed to load assume role for arn:aws:iam::12345678901:role/spectator, source profile has no shared credentials
```

### Work around

In order to support terraform, you will need something like:

```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator] # these are also fake credentials
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
aws_access_key_id = ASIA554SXXVIYYQRGGER
aws_secret_access_key = aw5/hbwzGP31s2lfC3ZQshKE+AZdlOYkqBUI4otp
aws_session_token = FQoGZXIvYXdHEY4aDDDbLp6g5sfNojzC6CKwAV+yefPfFg7y0xADMDECoddpj9WecBEReMtXkRjCVZfbSa1604EIK2q0zshlsP0PtF0e5wBZFDuZHTI464EpSQEXkJajksWeMMOe7PSzyJOX5Zqp8ve4ItHoE70tGxIVQjA06NbvodNjjOO/gsbDAcKHW1rx9wnq3RJ+dQbqqNq01R1vrDvTjxDNTrZr2wYI2qYrd9REP+mc44EeIO+3r0iuiwxRCL1UzS/4nG4IRYG2KMeo9esF
```

### References

<!---
Information about referencing Github Issues: https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests

Are there any other GitHub issues (open or closed) or pull requests that should be linked here? Vendor blog posts or documentation? For example:

* https://aws.amazon.com/about-aws/whats-new/2018/04/introducing-amazon-ec2-fleet/
--->

* https://github.com/gruntwork-io/terragrunt/issues/527
",ASIA554SXXVIYYQRGGER,https://github.com/hashicorp/terraform-provider-aws
9,10110.0,"<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a 👍 [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave ""+1"" or ""me too"" comments, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

### Description

Here is an example of a shared credentials file configuration that is supported by the [awscli](https://docs.aws.amazon.com/en_pv/cli/latest/userguide/cli-configure-role.html)
```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator]
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
```

This works by caching credentials in the `~/.aws/cli/cache` directory. The awscli can read from this cache but **terraform cannot**.

you will get the following error:

```
Error initializing session: SharedConfigAssumeRoleError: failed to load assume role for arn:aws:iam::12345678901:role/spectator, source profile has no shared credentials
```

### Work around

In order to support terraform, you will need something like:

```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator] # these are also fake credentials
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
aws_access_key_id = ASIA554SXXVIYYQRGGER
aws_secret_access_key = aw5/hbwzGP31s2lfC3ZQshKE+AZdlOYkqBUI4otp
aws_session_token = FQoGZXIvYXdHEY4aDDDbLp6g5sfNojzC6CKwAV+yefPfFg7y0xADMDECoddpj9WecBEReMtXkRjCVZfbSa1604EIK2q0zshlsP0PtF0e5wBZFDuZHTI464EpSQEXkJajksWeMMOe7PSzyJOX5Zqp8ve4ItHoE70tGxIVQjA06NbvodNjjOO/gsbDAcKHW1rx9wnq3RJ+dQbqqNq01R1vrDvTjxDNTrZr2wYI2qYrd9REP+mc44EeIO+3r0iuiwxRCL1UzS/4nG4IRYG2KMeo9esF
```

### References

<!---
Information about referencing Github Issues: https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests

Are there any other GitHub issues (open or closed) or pull requests that should be linked here? Vendor blog posts or documentation? For example:

* https://aws.amazon.com/about-aws/whats-new/2018/04/introducing-amazon-ec2-fleet/
--->

* https://github.com/gruntwork-io/terragrunt/issues/527
",ASIA554SXDVIHKO5ACW2,https://github.com/hashicorp/terraform-provider-aws
10,10110.0,"<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a 👍 [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave ""+1"" or ""me too"" comments, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

### Description

Here is an example of a shared credentials file configuration that is supported by the [awscli](https://docs.aws.amazon.com/en_pv/cli/latest/userguide/cli-configure-role.html)
```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator]
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
```

This works by caching credentials in the `~/.aws/cli/cache` directory. The awscli can read from this cache but **terraform cannot**.

you will get the following error:

```
Error initializing session: SharedConfigAssumeRoleError: failed to load assume role for arn:aws:iam::12345678901:role/spectator, source profile has no shared credentials
```

### Work around

In order to support terraform, you will need something like:

```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator] # these are also fake credentials
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
aws_access_key_id = ASIA554SXXVIYYQRGGER
aws_secret_access_key = aw5/hbwzGP31s2lfC3ZQshKE+AZdlOYkqBUI4otp
aws_session_token = FQoGZXIvYXdHEY4aDDDbLp6g5sfNojzC6CKwAV+yefPfFg7y0xADMDECoddpj9WecBEReMtXkRjCVZfbSa1604EIK2q0zshlsP0PtF0e5wBZFDuZHTI464EpSQEXkJajksWeMMOe7PSzyJOX5Zqp8ve4ItHoE70tGxIVQjA06NbvodNjjOO/gsbDAcKHW1rx9wnq3RJ+dQbqqNq01R1vrDvTjxDNTrZr2wYI2qYrd9REP+mc44EeIO+3r0iuiwxRCL1UzS/4nG4IRYG2KMeo9esF
```

### References

<!---
Information about referencing Github Issues: https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests

Are there any other GitHub issues (open or closed) or pull requests that should be linked here? Vendor blog posts or documentation? For example:

* https://aws.amazon.com/about-aws/whats-new/2018/04/introducing-amazon-ec2-fleet/
--->

* https://github.com/gruntwork-io/terragrunt/issues/527
",VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA,https://github.com/hashicorp/terraform-provider-aws
11,10110.0,"<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a 👍 [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave ""+1"" or ""me too"" comments, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

### Description

Here is an example of a shared credentials file configuration that is supported by the [awscli](https://docs.aws.amazon.com/en_pv/cli/latest/userguide/cli-configure-role.html)
```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator]
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
```

This works by caching credentials in the `~/.aws/cli/cache` directory. The awscli can read from this cache but **terraform cannot**.

you will get the following error:

```
Error initializing session: SharedConfigAssumeRoleError: failed to load assume role for arn:aws:iam::12345678901:role/spectator, source profile has no shared credentials
```

### Work around

In order to support terraform, you will need something like:

```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator] # these are also fake credentials
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
aws_access_key_id = ASIA554SXXVIYYQRGGER
aws_secret_access_key = aw5/hbwzGP31s2lfC3ZQshKE+AZdlOYkqBUI4otp
aws_session_token = FQoGZXIvYXdHEY4aDDDbLp6g5sfNojzC6CKwAV+yefPfFg7y0xADMDECoddpj9WecBEReMtXkRjCVZfbSa1604EIK2q0zshlsP0PtF0e5wBZFDuZHTI464EpSQEXkJajksWeMMOe7PSzyJOX5Zqp8ve4ItHoE70tGxIVQjA06NbvodNjjOO/gsbDAcKHW1rx9wnq3RJ+dQbqqNq01R1vrDvTjxDNTrZr2wYI2qYrd9REP+mc44EeIO+3r0iuiwxRCL1UzS/4nG4IRYG2KMeo9esF
```

### References

<!---
Information about referencing Github Issues: https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests

Are there any other GitHub issues (open or closed) or pull requests that should be linked here? Vendor blog posts or documentation? For example:

* https://aws.amazon.com/about-aws/whats-new/2018/04/introducing-amazon-ec2-fleet/
--->

* https://github.com/gruntwork-io/terragrunt/issues/527
",12345678901:role,https://github.com/hashicorp/terraform-provider-aws
12,10110.0,"<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a 👍 [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave ""+1"" or ""me too"" comments, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

### Description

Here is an example of a shared credentials file configuration that is supported by the [awscli](https://docs.aws.amazon.com/en_pv/cli/latest/userguide/cli-configure-role.html)
```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator]
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
```

This works by caching credentials in the `~/.aws/cli/cache` directory. The awscli can read from this cache but **terraform cannot**.

you will get the following error:

```
Error initializing session: SharedConfigAssumeRoleError: failed to load assume role for arn:aws:iam::12345678901:role/spectator, source profile has no shared credentials
```

### Work around

In order to support terraform, you will need something like:

```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator] # these are also fake credentials
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
aws_access_key_id = ASIA554SXXVIYYQRGGER
aws_secret_access_key = aw5/hbwzGP31s2lfC3ZQshKE+AZdlOYkqBUI4otp
aws_session_token = FQoGZXIvYXdHEY4aDDDbLp6g5sfNojzC6CKwAV+yefPfFg7y0xADMDECoddpj9WecBEReMtXkRjCVZfbSa1604EIK2q0zshlsP0PtF0e5wBZFDuZHTI464EpSQEXkJajksWeMMOe7PSzyJOX5Zqp8ve4ItHoE70tGxIVQjA06NbvodNjjOO/gsbDAcKHW1rx9wnq3RJ+dQbqqNq01R1vrDvTjxDNTrZr2wYI2qYrd9REP+mc44EeIO+3r0iuiwxRCL1UzS/4nG4IRYG2KMeo9esF
```

### References

<!---
Information about referencing Github Issues: https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests

Are there any other GitHub issues (open or closed) or pull requests that should be linked here? Vendor blog posts or documentation? For example:

* https://aws.amazon.com/about-aws/whats-new/2018/04/introducing-amazon-ec2-fleet/
--->

* https://github.com/gruntwork-io/terragrunt/issues/527
",FQoGZXIvYXdHEY4aDDDbLp6g5sfNojzC6CKwAV+,https://github.com/hashicorp/terraform-provider-aws
13,10110.0,"<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a 👍 [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave ""+1"" or ""me too"" comments, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

### Description

Here is an example of a shared credentials file configuration that is supported by the [awscli](https://docs.aws.amazon.com/en_pv/cli/latest/userguide/cli-configure-role.html)
```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator]
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
```

This works by caching credentials in the `~/.aws/cli/cache` directory. The awscli can read from this cache but **terraform cannot**.

you will get the following error:

```
Error initializing session: SharedConfigAssumeRoleError: failed to load assume role for arn:aws:iam::12345678901:role/spectator, source profile has no shared credentials
```

### Work around

In order to support terraform, you will need something like:

```
# ~/.aws/credentials

[bastion] # these are fake credentials
aws_access_key_id = ASIA554SXDVIHKO5ACW2
aws_secret_access_key = VLJQKLEqs37HCDG4HgSDrxl1vLNrk9Is8gm0VNfA

[dev-spectator] # these are also fake credentials
role_arn = arn:aws:iam::12345678901:role/spectator
source_profile = bastion
aws_access_key_id = ASIA554SXXVIYYQRGGER
aws_secret_access_key = aw5/hbwzGP31s2lfC3ZQshKE+AZdlOYkqBUI4otp
aws_session_token = FQoGZXIvYXdHEY4aDDDbLp6g5sfNojzC6CKwAV+yefPfFg7y0xADMDECoddpj9WecBEReMtXkRjCVZfbSa1604EIK2q0zshlsP0PtF0e5wBZFDuZHTI464EpSQEXkJajksWeMMOe7PSzyJOX5Zqp8ve4ItHoE70tGxIVQjA06NbvodNjjOO/gsbDAcKHW1rx9wnq3RJ+dQbqqNq01R1vrDvTjxDNTrZr2wYI2qYrd9REP+mc44EeIO+3r0iuiwxRCL1UzS/4nG4IRYG2KMeo9esF
```

### References

<!---
Information about referencing Github Issues: https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests

Are there any other GitHub issues (open or closed) or pull requests that should be linked here? Vendor blog posts or documentation? For example:

* https://aws.amazon.com/about-aws/whats-new/2018/04/introducing-amazon-ec2-fleet/
--->

* https://github.com/gruntwork-io/terragrunt/issues/527
",aws_secret_access_key,https://github.com/hashicorp/terraform-provider-aws
14,2671.0,"Hi there,

Thank you for opening an issue. Please note that we try to keep the Terraform issue tracker reserved for bug reports and feature requests. For general usage questions, please see: https://www.terraform.io/community.html.

### Terraform Version
Terraform v0.11.1
+ provider.aws v1.5.0

### Affected Resource(s)
Please list the resources as a list, for example:
- aws_dms_replication_instance
- aws_efs_filesystem

### Expected Behavior
Terraform should be ""smart enough"" to realize that when the result of describe-replication-instances attribute kms_key_arn will always be a KeyID, even when the create-replication-instance call was done with a key alias.  Terraform should lookup what keyid the alias points to, and when equal, then don't consider this field to be ""forces new resource"".

### Actual Behavior
      kms_key_arn:                        ""arn:aws:kms:us-east-1:{Redacted}:key/b0c45cd7-29fa-4b01-a24b-f2bbacbc385f"" => ""arn:aws:kms:us-east-1:{Redacted}:alias/iamtesting"" (forces new resource)


### Steps to Reproduce
Please list the steps required to reproduce the issue, for example:
1. `terraform plan`
2. `terraform apply`
3. `terraform plan` without any changes, will still force a  new resource due to this issue 

### Important Factoids
None

### References
None
",:us-east-1:{Redacted}:key,https://github.com/hashicorp/terraform-provider-aws
15,2671.0,"Hi there,

Thank you for opening an issue. Please note that we try to keep the Terraform issue tracker reserved for bug reports and feature requests. For general usage questions, please see: https://www.terraform.io/community.html.

### Terraform Version
Terraform v0.11.1
+ provider.aws v1.5.0

### Affected Resource(s)
Please list the resources as a list, for example:
- aws_dms_replication_instance
- aws_efs_filesystem

### Expected Behavior
Terraform should be ""smart enough"" to realize that when the result of describe-replication-instances attribute kms_key_arn will always be a KeyID, even when the create-replication-instance call was done with a key alias.  Terraform should lookup what keyid the alias points to, and when equal, then don't consider this field to be ""forces new resource"".

### Actual Behavior
      kms_key_arn:                        ""arn:aws:kms:us-east-1:{Redacted}:key/b0c45cd7-29fa-4b01-a24b-f2bbacbc385f"" => ""arn:aws:kms:us-east-1:{Redacted}:alias/iamtesting"" (forces new resource)


### Steps to Reproduce
Please list the steps required to reproduce the issue, for example:
1. `terraform plan`
2. `terraform apply`
3. `terraform plan` without any changes, will still force a  new resource due to this issue 

### Important Factoids
None

### References
None
",replication-instance,https://github.com/hashicorp/terraform-provider-aws
16,2663.0,"When removing the key_name from an existing launch configuration terraform configuration, terraform doesn't recreate or change the launch config. This means that the launch configuration still contains the key that isn't specified in the terraform code. 

### Terraform Version

```
Terraform v0.11.1
+ provider.aws v1.5.0
```

### Terraform Configuration Files

```hcl
provider ""aws"" {
  region = ""us-west-2""
}

resource ""aws_key_pair"" ""deployer"" {
  key_name   = ""deployer-key""
  public_key = ""ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD3F6tyPEFEzV0LX3X8BsXdMsQz1x2cEikKDEY0aIj41qgxMCP/iteneqXSIFZBp5vizPvaoIR3Um9xK7PGoW8giupGn+EPuxIA4cDM4vzOqOkiMPhz5XK0whEjkVzTo4+S0puvDZuwIsdiW9mxhJc7tgBNL0cYlWSYVkz4G/fslNfRPW5mYAM49f4fhtxPb5ok4Q2Lg9dPKVHO/Bgeu5woMc7RY0p1ej6D4CKFE6lymSDJpW0YHX/wqE9+cfEauh7xZcG0q9t2ta6F6fmX0agvpFyZo8aFbXeUBr7osSCJNgvavWbM/06niWrOvYX2xwWdhXmXSrbX8ZbabVohBK41 email@example.com""
}

resource ""aws_launch_configuration"" ""as_conf"" {
  name_prefix   = ""terraform-lc-example-""
  image_id      = ""ami-79ee4f01""
  instance_type = ""t2.micro""
  key_name      = ""${aws_key_pair.deployer.key_name}""

  lifecycle {
    create_before_destroy = true
  }
}
```

### Expected Behavior
<!--
What should have happened?
-->
After deleting the key_name parameter from the launch configuration, I'd expect the launch configuration to be changed (or recreated) to not include the original key_name. 

### Actual Behavior
<!--
What actually happened?
-->
After deleting the key_name parameter terraform doesn't recognise any changes, so the launch configuration isn't updated. 

### Steps to Reproduce
<!--
Please list the full steps required to reproduce the issue, for example: 
-->
Initially create the launch configuration including a key with the terraform code pasted above by running:
1. `terraform init`
2. `terraform plan`
3. `terraform apply`

Then remove the key_name parameter, and run those three terraform commands again. Nothing changes.",AAAAB3NzaC1yc2EAAAADAQABAAABAQD3F6tyPEFEzV0LX3X8BsXdMsQz1x2cEikKDEY0aIj41,https://github.com/hashicorp/terraform-provider-aws
17,2663.0,"When removing the key_name from an existing launch configuration terraform configuration, terraform doesn't recreate or change the launch config. This means that the launch configuration still contains the key that isn't specified in the terraform code. 

### Terraform Version

```
Terraform v0.11.1
+ provider.aws v1.5.0
```

### Terraform Configuration Files

```hcl
provider ""aws"" {
  region = ""us-west-2""
}

resource ""aws_key_pair"" ""deployer"" {
  key_name   = ""deployer-key""
  public_key = ""ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD3F6tyPEFEzV0LX3X8BsXdMsQz1x2cEikKDEY0aIj41qgxMCP/iteneqXSIFZBp5vizPvaoIR3Um9xK7PGoW8giupGn+EPuxIA4cDM4vzOqOkiMPhz5XK0whEjkVzTo4+S0puvDZuwIsdiW9mxhJc7tgBNL0cYlWSYVkz4G/fslNfRPW5mYAM49f4fhtxPb5ok4Q2Lg9dPKVHO/Bgeu5woMc7RY0p1ej6D4CKFE6lymSDJpW0YHX/wqE9+cfEauh7xZcG0q9t2ta6F6fmX0agvpFyZo8aFbXeUBr7osSCJNgvavWbM/06niWrOvYX2xwWdhXmXSrbX8ZbabVohBK41 email@example.com""
}

resource ""aws_launch_configuration"" ""as_conf"" {
  name_prefix   = ""terraform-lc-example-""
  image_id      = ""ami-79ee4f01""
  instance_type = ""t2.micro""
  key_name      = ""${aws_key_pair.deployer.key_name}""

  lifecycle {
    create_before_destroy = true
  }
}
```

### Expected Behavior
<!--
What should have happened?
-->
After deleting the key_name parameter from the launch configuration, I'd expect the launch configuration to be changed (or recreated) to not include the original key_name. 

### Actual Behavior
<!--
What actually happened?
-->
After deleting the key_name parameter terraform doesn't recognise any changes, so the launch configuration isn't updated. 

### Steps to Reproduce
<!--
Please list the full steps required to reproduce the issue, for example: 
-->
Initially create the launch configuration including a key with the terraform code pasted above by running:
1. `terraform init`
2. `terraform plan`
3. `terraform apply`

Then remove the key_name parameter, and run those three terraform commands again. Nothing changes.",AAAAB3NzaC1yc2EAAAADAQABAAABAQD3F6tyPEFEzV0LX3X8BsXdMsQz1x2cEikKDEY0aIj41qgxMCP,https://github.com/hashicorp/terraform-provider-aws
18,2663.0,"When removing the key_name from an existing launch configuration terraform configuration, terraform doesn't recreate or change the launch config. This means that the launch configuration still contains the key that isn't specified in the terraform code. 

### Terraform Version

```
Terraform v0.11.1
+ provider.aws v1.5.0
```

### Terraform Configuration Files

```hcl
provider ""aws"" {
  region = ""us-west-2""
}

resource ""aws_key_pair"" ""deployer"" {
  key_name   = ""deployer-key""
  public_key = ""ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD3F6tyPEFEzV0LX3X8BsXdMsQz1x2cEikKDEY0aIj41qgxMCP/iteneqXSIFZBp5vizPvaoIR3Um9xK7PGoW8giupGn+EPuxIA4cDM4vzOqOkiMPhz5XK0whEjkVzTo4+S0puvDZuwIsdiW9mxhJc7tgBNL0cYlWSYVkz4G/fslNfRPW5mYAM49f4fhtxPb5ok4Q2Lg9dPKVHO/Bgeu5woMc7RY0p1ej6D4CKFE6lymSDJpW0YHX/wqE9+cfEauh7xZcG0q9t2ta6F6fmX0agvpFyZo8aFbXeUBr7osSCJNgvavWbM/06niWrOvYX2xwWdhXmXSrbX8ZbabVohBK41 email@example.com""
}

resource ""aws_launch_configuration"" ""as_conf"" {
  name_prefix   = ""terraform-lc-example-""
  image_id      = ""ami-79ee4f01""
  instance_type = ""t2.micro""
  key_name      = ""${aws_key_pair.deployer.key_name}""

  lifecycle {
    create_before_destroy = true
  }
}
```

### Expected Behavior
<!--
What should have happened?
-->
After deleting the key_name parameter from the launch configuration, I'd expect the launch configuration to be changed (or recreated) to not include the original key_name. 

### Actual Behavior
<!--
What actually happened?
-->
After deleting the key_name parameter terraform doesn't recognise any changes, so the launch configuration isn't updated. 

### Steps to Reproduce
<!--
Please list the full steps required to reproduce the issue, for example: 
-->
Initially create the launch configuration including a key with the terraform code pasted above by running:
1. `terraform init`
2. `terraform plan`
3. `terraform apply`

Then remove the key_name parameter, and run those three terraform commands again. Nothing changes.",create_before_destroy,https://github.com/hashicorp/terraform-provider-aws
19,2133.0,"This is to address the following test failure:

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (22.41s)
    testing.go:492: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed setting KMS key rotation status to true: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2be74763-8842-4a25-bdbe-5c7ad655cd57' does not exist
            status code: 400, request id: 94ba7372-bed8-11e7-b066-975b24c8fa34
```",TestAccAWSKmsKey_isEnabled,https://github.com/hashicorp/terraform-provider-aws
20,2133.0,"This is to address the following test failure:

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (22.41s)
    testing.go:492: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed setting KMS key rotation status to true: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2be74763-8842-4a25-bdbe-5c7ad655cd57' does not exist
            status code: 400, request id: 94ba7372-bed8-11e7-b066-975b24c8fa34
```",west-2:*******:key,https://github.com/hashicorp/terraform-provider-aws
21,2133.0,"This is to address the following test failure:

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (22.41s)
    testing.go:492: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed setting KMS key rotation status to true: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2be74763-8842-4a25-bdbe-5c7ad655cd57' does not exist
            status code: 400, request id: 94ba7372-bed8-11e7-b066-975b24c8fa34
```",NotFoundException,https://github.com/hashicorp/terraform-provider-aws
22,1896.0,"This is to address the following test failure:

```
=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (24.56s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_alias.name_prefix: 1 error(s) occurred:
        
        * aws_kms_alias.name_prefix: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/d009dff4-27f4-4e10-ac07-aef1b74204e0' does not exist
            status code: 400, request id: 5334f913-b106-11e7-9f19-a3bd400081f8
```

Snippet from the log:
```
2017/10/14 17:37:17 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 387
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: 531d2abb-b106-11e7-9b02-a5418d0385e7


-----------------------------------------------------
2017/10/14 17:37:17 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""*REDACTED*"",""Arn"":""arn:aws:kms:us-west-2:*REDACTED*:key/d009dff4-27f4-4e10-ac07-aef1b74204e0"",""CreationDate"":1.508002637976E9,""Description"":""Terraform acc test One Sat, 14 Oct 2017 17:37:14 UTC"",""Enabled"":true,""KeyId"":""d009dff4-27f4-4e10-ac07-aef1b74204e0"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}

-----------------------------------------------------
2017/10/14 17:37:18 [DEBUG] [aws-sdk-go] DEBUG: Request kms/CreateAlias Details:
---[ REQUEST POST-SIGN ]-----------------------------
POST / HTTP/1.1
Host: kms.us-west-2.amazonaws.com
User-Agent: aws-sdk-go/1.12.8 (go1.9; linux; amd64) APN/1.0 HashiCorp/1.0 Terraform/0.10.0-dev
Content-Length: 101
Authorization: AWS4-HMAC-SHA256 Credential=*REDACTED*/20171014/us-west-2/kms/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-target, Signature=*REDACTED*
Content-Type: application/x-amz-json-1.1
X-Amz-Date: 20171014T173718Z
X-Amz-Target: TrentService.CreateAlias
Accept-Encoding: gzip

{""AliasName"":""alias/20171014173718010800000001"",""TargetKeyId"":""d009dff4-27f4-4e10-ac07-aef1b74204e0""}
-----------------------------------------------------

-----------------------------------------------------
2017/10/14 17:37:18 [DEBUG] [aws-sdk-go] DEBUG: Response kms/CreateAlias Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: 5334f913-b106-11e7-9f19-a3bd400081f8


-----------------------------------------------------
2017/10/14 17:37:18 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:187416307283:key/d009dff4-27f4-4e10-ac07-aef1b74204e0' does not exist""}
```",187416307283:key,https://github.com/hashicorp/terraform-provider-aws
23,1896.0,"This is to address the following test failure:

```
=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (24.56s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_alias.name_prefix: 1 error(s) occurred:
        
        * aws_kms_alias.name_prefix: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/d009dff4-27f4-4e10-ac07-aef1b74204e0' does not exist
            status code: 400, request id: 5334f913-b106-11e7-9f19-a3bd400081f8
```

Snippet from the log:
```
2017/10/14 17:37:17 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 387
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: 531d2abb-b106-11e7-9b02-a5418d0385e7


-----------------------------------------------------
2017/10/14 17:37:17 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""*REDACTED*"",""Arn"":""arn:aws:kms:us-west-2:*REDACTED*:key/d009dff4-27f4-4e10-ac07-aef1b74204e0"",""CreationDate"":1.508002637976E9,""Description"":""Terraform acc test One Sat, 14 Oct 2017 17:37:14 UTC"",""Enabled"":true,""KeyId"":""d009dff4-27f4-4e10-ac07-aef1b74204e0"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}

-----------------------------------------------------
2017/10/14 17:37:18 [DEBUG] [aws-sdk-go] DEBUG: Request kms/CreateAlias Details:
---[ REQUEST POST-SIGN ]-----------------------------
POST / HTTP/1.1
Host: kms.us-west-2.amazonaws.com
User-Agent: aws-sdk-go/1.12.8 (go1.9; linux; amd64) APN/1.0 HashiCorp/1.0 Terraform/0.10.0-dev
Content-Length: 101
Authorization: AWS4-HMAC-SHA256 Credential=*REDACTED*/20171014/us-west-2/kms/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-target, Signature=*REDACTED*
Content-Type: application/x-amz-json-1.1
X-Amz-Date: 20171014T173718Z
X-Amz-Target: TrentService.CreateAlias
Accept-Encoding: gzip

{""AliasName"":""alias/20171014173718010800000001"",""TargetKeyId"":""d009dff4-27f4-4e10-ac07-aef1b74204e0""}
-----------------------------------------------------

-----------------------------------------------------
2017/10/14 17:37:18 [DEBUG] [aws-sdk-go] DEBUG: Response kms/CreateAlias Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: 5334f913-b106-11e7-9f19-a3bd400081f8


-----------------------------------------------------
2017/10/14 17:37:18 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:187416307283:key/d009dff4-27f4-4e10-ac07-aef1b74204e0' does not exist""}
```","arn:aws:kms:us-west-2:*REDACTED*:key,CreationDate:,Description:",https://github.com/hashicorp/terraform-provider-aws
24,1896.0,"This is to address the following test failure:

```
=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (24.56s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_alias.name_prefix: 1 error(s) occurred:
        
        * aws_kms_alias.name_prefix: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/d009dff4-27f4-4e10-ac07-aef1b74204e0' does not exist
            status code: 400, request id: 5334f913-b106-11e7-9f19-a3bd400081f8
```

Snippet from the log:
```
2017/10/14 17:37:17 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 387
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: 531d2abb-b106-11e7-9b02-a5418d0385e7


-----------------------------------------------------
2017/10/14 17:37:17 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""*REDACTED*"",""Arn"":""arn:aws:kms:us-west-2:*REDACTED*:key/d009dff4-27f4-4e10-ac07-aef1b74204e0"",""CreationDate"":1.508002637976E9,""Description"":""Terraform acc test One Sat, 14 Oct 2017 17:37:14 UTC"",""Enabled"":true,""KeyId"":""d009dff4-27f4-4e10-ac07-aef1b74204e0"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}

-----------------------------------------------------
2017/10/14 17:37:18 [DEBUG] [aws-sdk-go] DEBUG: Request kms/CreateAlias Details:
---[ REQUEST POST-SIGN ]-----------------------------
POST / HTTP/1.1
Host: kms.us-west-2.amazonaws.com
User-Agent: aws-sdk-go/1.12.8 (go1.9; linux; amd64) APN/1.0 HashiCorp/1.0 Terraform/0.10.0-dev
Content-Length: 101
Authorization: AWS4-HMAC-SHA256 Credential=*REDACTED*/20171014/us-west-2/kms/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-target, Signature=*REDACTED*
Content-Type: application/x-amz-json-1.1
X-Amz-Date: 20171014T173718Z
X-Amz-Target: TrentService.CreateAlias
Accept-Encoding: gzip

{""AliasName"":""alias/20171014173718010800000001"",""TargetKeyId"":""d009dff4-27f4-4e10-ac07-aef1b74204e0""}
-----------------------------------------------------

-----------------------------------------------------
2017/10/14 17:37:18 [DEBUG] [aws-sdk-go] DEBUG: Response kms/CreateAlias Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: 5334f913-b106-11e7-9f19-a3bd400081f8


-----------------------------------------------------
2017/10/14 17:37:18 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:187416307283:key/d009dff4-27f4-4e10-ac07-aef1b74204e0' does not exist""}
```",west-2:*******:key,https://github.com/hashicorp/terraform-provider-aws
25,1896.0,"This is to address the following test failure:

```
=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (24.56s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_alias.name_prefix: 1 error(s) occurred:
        
        * aws_kms_alias.name_prefix: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/d009dff4-27f4-4e10-ac07-aef1b74204e0' does not exist
            status code: 400, request id: 5334f913-b106-11e7-9f19-a3bd400081f8
```

Snippet from the log:
```
2017/10/14 17:37:17 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 387
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: 531d2abb-b106-11e7-9b02-a5418d0385e7


-----------------------------------------------------
2017/10/14 17:37:17 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""*REDACTED*"",""Arn"":""arn:aws:kms:us-west-2:*REDACTED*:key/d009dff4-27f4-4e10-ac07-aef1b74204e0"",""CreationDate"":1.508002637976E9,""Description"":""Terraform acc test One Sat, 14 Oct 2017 17:37:14 UTC"",""Enabled"":true,""KeyId"":""d009dff4-27f4-4e10-ac07-aef1b74204e0"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}

-----------------------------------------------------
2017/10/14 17:37:18 [DEBUG] [aws-sdk-go] DEBUG: Request kms/CreateAlias Details:
---[ REQUEST POST-SIGN ]-----------------------------
POST / HTTP/1.1
Host: kms.us-west-2.amazonaws.com
User-Agent: aws-sdk-go/1.12.8 (go1.9; linux; amd64) APN/1.0 HashiCorp/1.0 Terraform/0.10.0-dev
Content-Length: 101
Authorization: AWS4-HMAC-SHA256 Credential=*REDACTED*/20171014/us-west-2/kms/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-target, Signature=*REDACTED*
Content-Type: application/x-amz-json-1.1
X-Amz-Date: 20171014T173718Z
X-Amz-Target: TrentService.CreateAlias
Accept-Encoding: gzip

{""AliasName"":""alias/20171014173718010800000001"",""TargetKeyId"":""d009dff4-27f4-4e10-ac07-aef1b74204e0""}
-----------------------------------------------------

-----------------------------------------------------
2017/10/14 17:37:18 [DEBUG] [aws-sdk-go] DEBUG: Response kms/CreateAlias Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: 5334f913-b106-11e7-9f19-a3bd400081f8


-----------------------------------------------------
2017/10/14 17:37:18 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:187416307283:key/d009dff4-27f4-4e10-ac07-aef1b74204e0' does not exist""}
```",-length;content-type;host;x-amz-date;x-amz-target,https://github.com/hashicorp/terraform-provider-aws
26,1896.0,"This is to address the following test failure:

```
=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (24.56s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_alias.name_prefix: 1 error(s) occurred:
        
        * aws_kms_alias.name_prefix: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/d009dff4-27f4-4e10-ac07-aef1b74204e0' does not exist
            status code: 400, request id: 5334f913-b106-11e7-9f19-a3bd400081f8
```

Snippet from the log:
```
2017/10/14 17:37:17 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 387
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: 531d2abb-b106-11e7-9b02-a5418d0385e7


-----------------------------------------------------
2017/10/14 17:37:17 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""*REDACTED*"",""Arn"":""arn:aws:kms:us-west-2:*REDACTED*:key/d009dff4-27f4-4e10-ac07-aef1b74204e0"",""CreationDate"":1.508002637976E9,""Description"":""Terraform acc test One Sat, 14 Oct 2017 17:37:14 UTC"",""Enabled"":true,""KeyId"":""d009dff4-27f4-4e10-ac07-aef1b74204e0"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}

-----------------------------------------------------
2017/10/14 17:37:18 [DEBUG] [aws-sdk-go] DEBUG: Request kms/CreateAlias Details:
---[ REQUEST POST-SIGN ]-----------------------------
POST / HTTP/1.1
Host: kms.us-west-2.amazonaws.com
User-Agent: aws-sdk-go/1.12.8 (go1.9; linux; amd64) APN/1.0 HashiCorp/1.0 Terraform/0.10.0-dev
Content-Length: 101
Authorization: AWS4-HMAC-SHA256 Credential=*REDACTED*/20171014/us-west-2/kms/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-target, Signature=*REDACTED*
Content-Type: application/x-amz-json-1.1
X-Amz-Date: 20171014T173718Z
X-Amz-Target: TrentService.CreateAlias
Accept-Encoding: gzip

{""AliasName"":""alias/20171014173718010800000001"",""TargetKeyId"":""d009dff4-27f4-4e10-ac07-aef1b74204e0""}
-----------------------------------------------------

-----------------------------------------------------
2017/10/14 17:37:18 [DEBUG] [aws-sdk-go] DEBUG: Response kms/CreateAlias Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: 5334f913-b106-11e7-9f19-a3bd400081f8


-----------------------------------------------------
2017/10/14 17:37:18 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:187416307283:key/d009dff4-27f4-4e10-ac07-aef1b74204e0' does not exist""}
```","KeyUsage:ENCRYPT_DECRYPT,Origin:AWS_KMS",https://github.com/hashicorp/terraform-provider-aws
27,1854.0,"This is to address the following test failure from this morning:

```
=== RUN   TestAccAWSEBSVolume_kmsKey
--- FAIL: TestAccAWSEBSVolume_kmsKey (22.84s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist
            status code: 400, request id: f2006223-ad80-11e7-8981-d922c7ad0e59
```

Snippet from related debug log:

```
-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 373
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: f1fe8d88-ad80-11e7-a270-333f20b6475c


-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""187416307283"",""Arn"":""arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""CreationDate"":1.507615498459E9,""Description"":""Terraform acc test 4796457295038973391"",""Enabled"":true,""KeyId"":""eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Request kms/GetKeyPolicy Details:
---[ REQUEST POST-SIGN ]-----------------------------
POST / HTTP/1.1
Host: kms.us-west-2.amazonaws.com
User-Agent: aws-sdk-go/1.12.6 (go1.9; linux; amd64) APN/1.0 HashiCorp/1.0 Terraform/0.10.0-dev
Content-Length: 71
Authorization: AWS4-HMAC-SHA256 Credential=*REDACTED/20171010/us-west-2/kms/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-target, Signature=*REDACTED*
Content-Type: application/x-amz-json-1.1
X-Amz-Date: 20171010T060458Z
X-Amz-Target: TrentService.GetKeyPolicy
Accept-Encoding: gzip

{""KeyId"":""eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""PolicyName"":""default""}
-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Response kms/GetKeyPolicy Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: f2006223-ad80-11e7-8981-d922c7ad0e59


-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist""}
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Validate Response kms/GetKeyPolicy failed, not retrying, error NotFoundException: Key 'arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist
	status code: 400, request id: f2006223-ad80-11e7-8981-d922c7ad0e59
```

![kitty-whack-a-mole1](https://user-images.githubusercontent.com/287584/31406016-b5c46140-adf7-11e7-8bd5-57357966668c.gif)
",187416307283:key,https://github.com/hashicorp/terraform-provider-aws
28,1854.0,"This is to address the following test failure from this morning:

```
=== RUN   TestAccAWSEBSVolume_kmsKey
--- FAIL: TestAccAWSEBSVolume_kmsKey (22.84s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist
            status code: 400, request id: f2006223-ad80-11e7-8981-d922c7ad0e59
```

Snippet from related debug log:

```
-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 373
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: f1fe8d88-ad80-11e7-a270-333f20b6475c


-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""187416307283"",""Arn"":""arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""CreationDate"":1.507615498459E9,""Description"":""Terraform acc test 4796457295038973391"",""Enabled"":true,""KeyId"":""eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Request kms/GetKeyPolicy Details:
---[ REQUEST POST-SIGN ]-----------------------------
POST / HTTP/1.1
Host: kms.us-west-2.amazonaws.com
User-Agent: aws-sdk-go/1.12.6 (go1.9; linux; amd64) APN/1.0 HashiCorp/1.0 Terraform/0.10.0-dev
Content-Length: 71
Authorization: AWS4-HMAC-SHA256 Credential=*REDACTED/20171010/us-west-2/kms/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-target, Signature=*REDACTED*
Content-Type: application/x-amz-json-1.1
X-Amz-Date: 20171010T060458Z
X-Amz-Target: TrentService.GetKeyPolicy
Accept-Encoding: gzip

{""KeyId"":""eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""PolicyName"":""default""}
-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Response kms/GetKeyPolicy Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: f2006223-ad80-11e7-8981-d922c7ad0e59


-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist""}
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Validate Response kms/GetKeyPolicy failed, not retrying, error NotFoundException: Key 'arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist
	status code: 400, request id: f2006223-ad80-11e7-8981-d922c7ad0e59
```

![kitty-whack-a-mole1](https://user-images.githubusercontent.com/287584/31406016-b5c46140-adf7-11e7-8bd5-57357966668c.gif)
",length;content-type;host;x-amz-date;x-amz-target,https://github.com/hashicorp/terraform-provider-aws
29,1854.0,"This is to address the following test failure from this morning:

```
=== RUN   TestAccAWSEBSVolume_kmsKey
--- FAIL: TestAccAWSEBSVolume_kmsKey (22.84s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist
            status code: 400, request id: f2006223-ad80-11e7-8981-d922c7ad0e59
```

Snippet from related debug log:

```
-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 373
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: f1fe8d88-ad80-11e7-a270-333f20b6475c


-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""187416307283"",""Arn"":""arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""CreationDate"":1.507615498459E9,""Description"":""Terraform acc test 4796457295038973391"",""Enabled"":true,""KeyId"":""eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Request kms/GetKeyPolicy Details:
---[ REQUEST POST-SIGN ]-----------------------------
POST / HTTP/1.1
Host: kms.us-west-2.amazonaws.com
User-Agent: aws-sdk-go/1.12.6 (go1.9; linux; amd64) APN/1.0 HashiCorp/1.0 Terraform/0.10.0-dev
Content-Length: 71
Authorization: AWS4-HMAC-SHA256 Credential=*REDACTED/20171010/us-west-2/kms/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-target, Signature=*REDACTED*
Content-Type: application/x-amz-json-1.1
X-Amz-Date: 20171010T060458Z
X-Amz-Target: TrentService.GetKeyPolicy
Accept-Encoding: gzip

{""KeyId"":""eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""PolicyName"":""default""}
-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Response kms/GetKeyPolicy Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: f2006223-ad80-11e7-8981-d922c7ad0e59


-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist""}
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Validate Response kms/GetKeyPolicy failed, not retrying, error NotFoundException: Key 'arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist
	status code: 400, request id: f2006223-ad80-11e7-8981-d922c7ad0e59
```

![kitty-whack-a-mole1](https://user-images.githubusercontent.com/287584/31406016-b5c46140-adf7-11e7-8bd5-57357966668c.gif)
",PolicyName:default,https://github.com/hashicorp/terraform-provider-aws
30,1854.0,"This is to address the following test failure from this morning:

```
=== RUN   TestAccAWSEBSVolume_kmsKey
--- FAIL: TestAccAWSEBSVolume_kmsKey (22.84s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist
            status code: 400, request id: f2006223-ad80-11e7-8981-d922c7ad0e59
```

Snippet from related debug log:

```
-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 373
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: f1fe8d88-ad80-11e7-a270-333f20b6475c


-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""187416307283"",""Arn"":""arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""CreationDate"":1.507615498459E9,""Description"":""Terraform acc test 4796457295038973391"",""Enabled"":true,""KeyId"":""eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Request kms/GetKeyPolicy Details:
---[ REQUEST POST-SIGN ]-----------------------------
POST / HTTP/1.1
Host: kms.us-west-2.amazonaws.com
User-Agent: aws-sdk-go/1.12.6 (go1.9; linux; amd64) APN/1.0 HashiCorp/1.0 Terraform/0.10.0-dev
Content-Length: 71
Authorization: AWS4-HMAC-SHA256 Credential=*REDACTED/20171010/us-west-2/kms/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-target, Signature=*REDACTED*
Content-Type: application/x-amz-json-1.1
X-Amz-Date: 20171010T060458Z
X-Amz-Target: TrentService.GetKeyPolicy
Accept-Encoding: gzip

{""KeyId"":""eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""PolicyName"":""default""}
-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Response kms/GetKeyPolicy Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: f2006223-ad80-11e7-8981-d922c7ad0e59


-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist""}
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Validate Response kms/GetKeyPolicy failed, not retrying, error NotFoundException: Key 'arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist
	status code: 400, request id: f2006223-ad80-11e7-8981-d922c7ad0e59
```

![kitty-whack-a-mole1](https://user-images.githubusercontent.com/287584/31406016-b5c46140-adf7-11e7-8bd5-57357966668c.gif)
","arn:aws:kms:us-west-2:187416307283:key,CreationDate:,Description",https://github.com/hashicorp/terraform-provider-aws
31,1854.0,"This is to address the following test failure from this morning:

```
=== RUN   TestAccAWSEBSVolume_kmsKey
--- FAIL: TestAccAWSEBSVolume_kmsKey (22.84s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist
            status code: 400, request id: f2006223-ad80-11e7-8981-d922c7ad0e59
```

Snippet from related debug log:

```
-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 373
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: f1fe8d88-ad80-11e7-a270-333f20b6475c


-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""187416307283"",""Arn"":""arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""CreationDate"":1.507615498459E9,""Description"":""Terraform acc test 4796457295038973391"",""Enabled"":true,""KeyId"":""eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Request kms/GetKeyPolicy Details:
---[ REQUEST POST-SIGN ]-----------------------------
POST / HTTP/1.1
Host: kms.us-west-2.amazonaws.com
User-Agent: aws-sdk-go/1.12.6 (go1.9; linux; amd64) APN/1.0 HashiCorp/1.0 Terraform/0.10.0-dev
Content-Length: 71
Authorization: AWS4-HMAC-SHA256 Credential=*REDACTED/20171010/us-west-2/kms/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-target, Signature=*REDACTED*
Content-Type: application/x-amz-json-1.1
X-Amz-Date: 20171010T060458Z
X-Amz-Target: TrentService.GetKeyPolicy
Accept-Encoding: gzip

{""KeyId"":""eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""PolicyName"":""default""}
-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Response kms/GetKeyPolicy Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: f2006223-ad80-11e7-8981-d922c7ad0e59


-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist""}
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Validate Response kms/GetKeyPolicy failed, not retrying, error NotFoundException: Key 'arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist
	status code: 400, request id: f2006223-ad80-11e7-8981-d922c7ad0e59
```

![kitty-whack-a-mole1](https://user-images.githubusercontent.com/287584/31406016-b5c46140-adf7-11e7-8bd5-57357966668c.gif)
",TestAccAWSEBSVolume_kmsKey,https://github.com/hashicorp/terraform-provider-aws
32,1854.0,"This is to address the following test failure from this morning:

```
=== RUN   TestAccAWSEBSVolume_kmsKey
--- FAIL: TestAccAWSEBSVolume_kmsKey (22.84s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist
            status code: 400, request id: f2006223-ad80-11e7-8981-d922c7ad0e59
```

Snippet from related debug log:

```
-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 373
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: f1fe8d88-ad80-11e7-a270-333f20b6475c


-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""187416307283"",""Arn"":""arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""CreationDate"":1.507615498459E9,""Description"":""Terraform acc test 4796457295038973391"",""Enabled"":true,""KeyId"":""eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Request kms/GetKeyPolicy Details:
---[ REQUEST POST-SIGN ]-----------------------------
POST / HTTP/1.1
Host: kms.us-west-2.amazonaws.com
User-Agent: aws-sdk-go/1.12.6 (go1.9; linux; amd64) APN/1.0 HashiCorp/1.0 Terraform/0.10.0-dev
Content-Length: 71
Authorization: AWS4-HMAC-SHA256 Credential=*REDACTED/20171010/us-west-2/kms/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-target, Signature=*REDACTED*
Content-Type: application/x-amz-json-1.1
X-Amz-Date: 20171010T060458Z
X-Amz-Target: TrentService.GetKeyPolicy
Accept-Encoding: gzip

{""KeyId"":""eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""PolicyName"":""default""}
-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Response kms/GetKeyPolicy Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: f2006223-ad80-11e7-8981-d922c7ad0e59


-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist""}
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Validate Response kms/GetKeyPolicy failed, not retrying, error NotFoundException: Key 'arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist
	status code: 400, request id: f2006223-ad80-11e7-8981-d922c7ad0e59
```

![kitty-whack-a-mole1](https://user-images.githubusercontent.com/287584/31406016-b5c46140-adf7-11e7-8bd5-57357966668c.gif)
",west-2:*******:key,https://github.com/hashicorp/terraform-provider-aws
33,1854.0,"This is to address the following test failure from this morning:

```
=== RUN   TestAccAWSEBSVolume_kmsKey
--- FAIL: TestAccAWSEBSVolume_kmsKey (22.84s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist
            status code: 400, request id: f2006223-ad80-11e7-8981-d922c7ad0e59
```

Snippet from related debug log:

```
-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 373
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: f1fe8d88-ad80-11e7-a270-333f20b6475c


-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""187416307283"",""Arn"":""arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""CreationDate"":1.507615498459E9,""Description"":""Terraform acc test 4796457295038973391"",""Enabled"":true,""KeyId"":""eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Request kms/GetKeyPolicy Details:
---[ REQUEST POST-SIGN ]-----------------------------
POST / HTTP/1.1
Host: kms.us-west-2.amazonaws.com
User-Agent: aws-sdk-go/1.12.6 (go1.9; linux; amd64) APN/1.0 HashiCorp/1.0 Terraform/0.10.0-dev
Content-Length: 71
Authorization: AWS4-HMAC-SHA256 Credential=*REDACTED/20171010/us-west-2/kms/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-amz-target, Signature=*REDACTED*
Content-Type: application/x-amz-json-1.1
X-Amz-Date: 20171010T060458Z
X-Amz-Target: TrentService.GetKeyPolicy
Accept-Encoding: gzip

{""KeyId"":""eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40"",""PolicyName"":""default""}
-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Response kms/GetKeyPolicy Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
X-Amzn-Requestid: f2006223-ad80-11e7-8981-d922c7ad0e59


-----------------------------------------------------
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist""}
2017/10/10 06:04:58 [DEBUG] [aws-sdk-go] DEBUG: Validate Response kms/GetKeyPolicy failed, not retrying, error NotFoundException: Key 'arn:aws:kms:us-west-2:187416307283:key/eb421bb3-2865-4d7d-b7c6-2c2c3a07dc40' does not exist
	status code: 400, request id: f2006223-ad80-11e7-8981-d922c7ad0e59
```

![kitty-whack-a-mole1](https://user-images.githubusercontent.com/287584/31406016-b5c46140-adf7-11e7-8bd5-57357966668c.gif)
","KeyUsage:ENCRYPT_DECRYPT,Origin:AWS_KMS",https://github.com/hashicorp/terraform-provider-aws
34,1818.0,"This is to address the following test failure:
```
=== RUN   TestAccDataSourceAwsKmsCiphertext_basic
--- FAIL: TestAccDataSourceAwsKmsCiphertext_basic (31.03s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/20505b0e-764f-4ef5-8f1b-73a2686fd11b' does not exist
            status code: 400, request id: a92026f9-a994-11e7-bbbb-41668ba48bea
```

Snippet from debug log:

```
2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 383
Content-Type: application/x-amz-json-1.1
Date: Thu, 05 Oct 2017 06:16:01 GMT
Server: Server
X-Amzn-Requestid: a91885e4-a994-11e7-9579-2da1021b9d1d


-----------------------------------------------------
2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""*REDACTED*"",""Arn"":""arn:aws:kms:us-west-2:*REDACTED*:key/20505b0e-764f-4ef5-8f1b-73a2686fd11b"",""CreationDate"":1.507184161473E9,""Description"":""tf-test-acc-data-source-aws-kms-ciphertext-basic"",""Enabled"":true,""KeyId"":""20505b0e-764f-4ef5-8f1b-73a2686fd11b"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}

2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] DEBUG: Response kms/GetKeyRotationStatus Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
Date: Thu, 05 Oct 2017 06:16:01 GMT
Server: Server
X-Amzn-Requestid: a92026f9-a994-11e7-bbbb-41668ba48bea


-----------------------------------------------------
2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:*REDACTED*:key/20505b0e-764f-4ef5-8f1b-73a2686fd11b' does not exist""}
```","KeyUsage:ENCRYPT_DECRYPT,Origin:AWS_KMS",https://github.com/hashicorp/terraform-provider-aws
35,1818.0,"This is to address the following test failure:
```
=== RUN   TestAccDataSourceAwsKmsCiphertext_basic
--- FAIL: TestAccDataSourceAwsKmsCiphertext_basic (31.03s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/20505b0e-764f-4ef5-8f1b-73a2686fd11b' does not exist
            status code: 400, request id: a92026f9-a994-11e7-bbbb-41668ba48bea
```

Snippet from debug log:

```
2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 383
Content-Type: application/x-amz-json-1.1
Date: Thu, 05 Oct 2017 06:16:01 GMT
Server: Server
X-Amzn-Requestid: a91885e4-a994-11e7-9579-2da1021b9d1d


-----------------------------------------------------
2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""*REDACTED*"",""Arn"":""arn:aws:kms:us-west-2:*REDACTED*:key/20505b0e-764f-4ef5-8f1b-73a2686fd11b"",""CreationDate"":1.507184161473E9,""Description"":""tf-test-acc-data-source-aws-kms-ciphertext-basic"",""Enabled"":true,""KeyId"":""20505b0e-764f-4ef5-8f1b-73a2686fd11b"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}

2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] DEBUG: Response kms/GetKeyRotationStatus Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
Date: Thu, 05 Oct 2017 06:16:01 GMT
Server: Server
X-Amzn-Requestid: a92026f9-a994-11e7-bbbb-41668ba48bea


-----------------------------------------------------
2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:*REDACTED*:key/20505b0e-764f-4ef5-8f1b-73a2686fd11b' does not exist""}
```","arn:aws:kms:us-west-2:*REDACTED*:key,CreationDate:,Description:",https://github.com/hashicorp/terraform-provider-aws
36,1818.0,"This is to address the following test failure:
```
=== RUN   TestAccDataSourceAwsKmsCiphertext_basic
--- FAIL: TestAccDataSourceAwsKmsCiphertext_basic (31.03s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/20505b0e-764f-4ef5-8f1b-73a2686fd11b' does not exist
            status code: 400, request id: a92026f9-a994-11e7-bbbb-41668ba48bea
```

Snippet from debug log:

```
2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 383
Content-Type: application/x-amz-json-1.1
Date: Thu, 05 Oct 2017 06:16:01 GMT
Server: Server
X-Amzn-Requestid: a91885e4-a994-11e7-9579-2da1021b9d1d


-----------------------------------------------------
2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""*REDACTED*"",""Arn"":""arn:aws:kms:us-west-2:*REDACTED*:key/20505b0e-764f-4ef5-8f1b-73a2686fd11b"",""CreationDate"":1.507184161473E9,""Description"":""tf-test-acc-data-source-aws-kms-ciphertext-basic"",""Enabled"":true,""KeyId"":""20505b0e-764f-4ef5-8f1b-73a2686fd11b"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}

2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] DEBUG: Response kms/GetKeyRotationStatus Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
Date: Thu, 05 Oct 2017 06:16:01 GMT
Server: Server
X-Amzn-Requestid: a92026f9-a994-11e7-bbbb-41668ba48bea


-----------------------------------------------------
2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:*REDACTED*:key/20505b0e-764f-4ef5-8f1b-73a2686fd11b' does not exist""}
```",west-2:*******:key,https://github.com/hashicorp/terraform-provider-aws
37,1818.0,"This is to address the following test failure:
```
=== RUN   TestAccDataSourceAwsKmsCiphertext_basic
--- FAIL: TestAccDataSourceAwsKmsCiphertext_basic (31.03s)
    testing.go:434: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/20505b0e-764f-4ef5-8f1b-73a2686fd11b' does not exist
            status code: 400, request id: a92026f9-a994-11e7-bbbb-41668ba48bea
```

Snippet from debug log:

```
2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] DEBUG: Response kms/DescribeKey Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 200 OK
Connection: close
Content-Length: 383
Content-Type: application/x-amz-json-1.1
Date: Thu, 05 Oct 2017 06:16:01 GMT
Server: Server
X-Amzn-Requestid: a91885e4-a994-11e7-9579-2da1021b9d1d


-----------------------------------------------------
2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] {""KeyMetadata"":{""AWSAccountId"":""*REDACTED*"",""Arn"":""arn:aws:kms:us-west-2:*REDACTED*:key/20505b0e-764f-4ef5-8f1b-73a2686fd11b"",""CreationDate"":1.507184161473E9,""Description"":""tf-test-acc-data-source-aws-kms-ciphertext-basic"",""Enabled"":true,""KeyId"":""20505b0e-764f-4ef5-8f1b-73a2686fd11b"",""KeyManager"":""CUSTOMER"",""KeyState"":""Enabled"",""KeyUsage"":""ENCRYPT_DECRYPT"",""Origin"":""AWS_KMS""}}

2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] DEBUG: Response kms/GetKeyRotationStatus Details:
---[ RESPONSE ]--------------------------------------
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 139
Content-Type: application/x-amz-json-1.1
Date: Thu, 05 Oct 2017 06:16:01 GMT
Server: Server
X-Amzn-Requestid: a92026f9-a994-11e7-bbbb-41668ba48bea


-----------------------------------------------------
2017/10/05 06:16:00 [DEBUG] [aws-sdk-go] {""__type"":""NotFoundException"",""message"":""Key 'arn:aws:kms:us-west-2:*REDACTED*:key/20505b0e-764f-4ef5-8f1b-73a2686fd11b' does not exist""}
```",2:*REDACTED*:key,https://github.com/hashicorp/terraform-provider-aws
38,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.",c98e0539-7d2a-4bdf-9380-0a5258a69b44,https://github.com/hashicorp/terraform-provider-aws
39,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.",0750e54a-1bd6-4ae8-830b-a019ad0601ec,https://github.com/hashicorp/terraform-provider-aws
40,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.",e47b525d-38b2-4402-aee1-0be1292d9c4a,https://github.com/hashicorp/terraform-provider-aws
41,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.",aee1-0be1292d9c4a,https://github.com/hashicorp/terraform-provider-aws
42,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.",deletion_window_in_days,https://github.com/hashicorp/terraform-provider-aws
43,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.",TestAccAWSKmsKey_policy,https://github.com/hashicorp/terraform-provider-aws
44,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.",TestAccAWSKmsKey_disappears,https://github.com/hashicorp/terraform-provider-aws
45,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.",TestAccAWSKmsKey_importBasic,https://github.com/hashicorp/terraform-provider-aws
46,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.",TestAccAWSKmsKey_isEnabled,https://github.com/hashicorp/terraform-provider-aws
47,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.",9380-0a5258a69b44,https://github.com/hashicorp/terraform-provider-aws
48,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.",west-2:*******:key,https://github.com/hashicorp/terraform-provider-aws
49,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.",:*******:key\n\tstatus,https://github.com/hashicorp/terraform-provider-aws
50,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.","Effect:Allow,Principal:{AWS:arn:aws:iam::*******:root},Resource",https://github.com/hashicorp/terraform-provider-aws
51,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.",TestAccAWSKmsKey_basic,https://github.com/hashicorp/terraform-provider-aws
52,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.",830b-a019ad0601ec,https://github.com/hashicorp/terraform-provider-aws
53,1039.0,"This is to address the following test failures:

```
=== RUN   TestAccAWSKmsAlias_basic
--- FAIL: TestAccAWSKmsAlias_basic (24.96s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c857a00e-1276-4e08-8e08-d5b9d0b75e41' does not exist
            status code: 400, request id: 0eba259a-5a3b-11e7-b344-c7ea9798df62

=== RUN   TestAccAWSKmsAlias_importBasic
--- FAIL: TestAccAWSKmsAlias_importBasic (25.91s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.one: 1 error(s) occurred:
        
        * aws_kms_key.one: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/118a3530-5361-4649-8536-a93f2ede591a' does not exist
            status code: 400, request id: 9898277d-5c8a-11e7-abbd-b9503fe779e7

=== RUN   TestAccAWSKmsAlias_multiple
--- FAIL: TestAccAWSKmsAlias_multiple (22.69s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.single: 1 error(s) occurred:
        
        * aws_kms_key.single: Failed to get KMS key tags (key: e47b525d-38b2-4402-aee1-0be1292d9c4a): NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/e47b525d-38b2-4402-aee1-0be1292d9c4a' does not exist
            status code: 400, request id: 078d3a84-5329-11e7-a59b-71d56abfc9fc

=== RUN   TestAccAWSKmsAlias_name_prefix
--- FAIL: TestAccAWSKmsAlias_name_prefix (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/620c5864-ab1e-4f32-8615-a39552d0c6b8' does not exist
            status code: 400, request id: e963e5c2-50cf-11e7-9c90-87b19212a0de

=== RUN   TestAccAWSKmsAlias_no_name
--- FAIL: TestAccAWSKmsAlias_no_name (23.85s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.two: 1 error(s) occurred:
        
        * aws_kms_key.two: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/03d28cdc-f477-43d0-9605-d52de2e0ff76' does not exist
            status code: 400, request id: fb98019c-54bb-11e7-8cee-9f3a8216e097

=== RUN   TestAccAWSKmsKey_basic
--- FAIL: TestAccAWSKmsKey_basic (22.54s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/adeb6095-616a-4b50-958d-0325dac6ae4f' does not exist
            status code: 400, request id: 9fcce70a-45cc-11e7-87aa-cb3194a8108b

=== RUN   TestAccAWSKmsKey_disappears
--- FAIL: TestAccAWSKmsKey_disappears (3.09s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/2520d4af-7071-4b39-9bec-8c75e3b46032' does not exist
            status code: 400, request id: 5ec12c47-32ef-11e7-ac0c-1feea159ca97

=== RUN   TestAccAWSKmsKey_importBasic
--- FAIL: TestAccAWSKmsKey_importBasic (23.50s)
    testing.go:280: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/161bfac9-279f-470b-8c4d-c8eed3783c3a' does not exist
            status code: 400, request id: 6d7093c7-4a76-11e7-b6df-cb1b052b0f43

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (21.54s)
    testing.go:265: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""0750e54a-1bd6-4ae8-830b-a019ad0601ec"" to true: ""NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/0750e54a-1bd6-4ae8-830b-a019ad0601ec' does not exist\n\tstatus code: 400, request id: 8c1c8664-f5a4-11e6-bd72-9d8ac691c38b""

=== RUN   TestAccAWSKmsKey_policy
--- FAIL: TestAccAWSKmsKey_policy (22.99s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/b0bc93e2-b846-4d38-afa0-5c41a23fd3b3' does not exist
            status code: 400, request id: eeafefd9-5f41-11e7-932d-7b4776770aa1

=== RUN   TestAccAWSKmsKey_tags
--- FAIL: TestAccAWSKmsKey_tags (23.16s)
    testing.go:428: Step 0 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.foo: 1 error(s) occurred:
        
        * aws_kms_key.foo: NotFoundException: Key 'arn:aws:kms:us-west-2:*******:key/c0468528-75cd-46a4-941d-38cbab46cda9' does not exist
            status code: 400, request id: 00e0034e-50d0-11e7-b0df-ed08666dd37a
```

this one

```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (100.82s)
    testing.go:428: Step 1 error: After applying this step and refreshing, the plan was not empty:
        
        DIFF:
        
        UPDATE: aws_kms_key.bar
          is_enabled: ""true"" => ""false""
        
        STATE:
        
        aws_kms_key.bar:
          ID = 331666bc-e480-4bbd-8e94-19457be08dcc
          arn = arn:aws:kms:us-west-2:*******:key/331666bc-e480-4bbd-8e94-19457be08dcc
          deletion_window_in_days = 7
          description = Terraform acc test is_enabled Sun, 25 Jun 2017 06:53:24 UTC
          enable_key_rotation = false
          is_enabled = true
          key_id = 331666bc-e480-4bbd-8e94-19457be08dcc
          key_usage = ENCRYPT_DECRYPT
          policy = {""Id"":""key-default-1"",""Statement"":[{""Action"":""kms:*"",""Effect"":""Allow"",""Principal"":{""AWS"":""arn:aws:iam::*******:root""},""Resource"":""*"",""Sid"":""Enable IAM User Permissions""}],""Version"":""2012-10-17""}
          tags.% = 0

=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (76.05s)
    testing.go:265: Step 1 error: Check failed: Check 2/4 error: aws_kms_key.bar: Attribute 'is_enabled' expected ""false"", got ""true""
```
and this one
```
=== RUN   TestAccAWSKmsKey_isEnabled
--- FAIL: TestAccAWSKmsKey_isEnabled (229.51s)
    testing.go:280: Step 2 error: Error applying: 1 error(s) occurred:
        
        * aws_kms_key.bar: 1 error(s) occurred:
        
        * aws_kms_key.bar: Failed to set key rotation for ""c98e0539-7d2a-4bdf-9380-0a5258a69b44"" to true: ""DisabledException: arn:aws:kms:us-west-2:*******:key/c98e0539-7d2a-4bdf-9380-0a5258a69b44 is disabled.\n\tstatus code: 400, request id: 6a240630-2b16-11e7-b764-abbc11cb3f70""
```

and maybe a some more caused by the same error code.",TestAccAWSKmsKey_tags,https://github.com/hashicorp/terraform-provider-aws
54,436.0,"_This issue was originally opened by @morfien101 as hashicorp/terraform#10835. It was migrated here as part of the [provider split](https://www.hashicorp.com/blog/upcoming-provider-changes-in-terraform-0-10/). The original body of the issue is below._

<hr>

Hi Guys,

I am trying to make use of the new feature in Terraform 0.8.0.
https://github.com/hashicorp/terraform/pull/10615

The PGP key here is just a test key so there is no issue with it being compromised.

```
variable aws_region {}

provider ""aws"" {
    region = ""${var.aws_region}""
}

resource ""aws_iam_user"" ""ecr_user"" {
    name = ""ecr_user""
    force_destroy = true
}

resource ""aws_iam_access_key"" ""ecr_user"" {
    user = ""${aws_iam_user.ecr_user.name}""
    pgp_key = ""LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tDQpWZXJzaW9uOiBLZXliYXNlIE9wZW5QR1AgdjEuMC4wDQpDb21tZW50OiBodHRwczovL2tleWJhc2UuaW8vY3J5cHRvDQoNCnhtOEVXRmZVQ1JNRks0RUVBQ0lEQXdUbERnenlmYzNvSlAzV0lPcTFTaTRsUUpUNW9lUEszVEdqeGZHQU5KRVQNCjhFSkt2Y3g5MkMxUGFlTEVieEJhT2Q0S0xRWThkdFFYOHVNRndqTm95bUpDaE1KMmJGdTZGS3F2aG1FVUNRUWUNCnkrK2dVYWpRWFlRcTFVYmVNNjdyVmNyTkxYSmhibVI1SUdOdlluVnliaUE4Y21GdVpIa3VZMjlpZFhKdVFHNWwNCmQzWnZhV05sYldWa2FXRXVZMjl0UHNLUEJCTVRDZ0FYQlFKWVY5UUpBaHN2QXdzSkJ3TVZDZ2dDSGdFQ0Y0QUENCkNna1FrMER6MHZZYmc2dWZ0UUYvUW4vemoway9WOVdLY051aThWT3hlTFZpcWFxN1lGYXZ4NGhNRmp1S1BFRjMNCnM0SGd5NnJmV2FrNWlRbXd1Rkt6QVg5WFo1VEVZZmkyWlFsekIrSlRNOU1nTVJMSUpEWFdtL0xLZ3JWWUh3by8NCjZjZ3k5WFE2YTlQMk1QYkwvc05yc2dET1VnUllWOVFKRXdncWhrak9QUU1CQndJREJNMVlBNGt2b1BNRWttK2YNCkRCVlNyNE1Ybkgvd3JzdjZCc3FESXNSUW8ySjlzTVYyWEp2YzMxMndLdXc3KzlkR2xzS3VZR0Y2NzRLN3l3NGgNCi84NHhoRmJDd0NjRUdCTUtBQThGQWxoWDFBa0ZDUThKbkFBQ0d5NEFhZ2tRazBEejB2WWJnNnRmSUFRWkV3b0ENCkJnVUNXRmZVQ1FBS0NSRFN4cklOZ29nelM3UVFBUURZa0t5bEVMeU1wR2N2cFdOL0w4aUpjajd1c0dtK0NVQjMNCjBQOEhnVHJMSUFEL1MrRkpEM0lyN1NhSjJiMUFGWU1IOVgwZ2UweFhBM1dLQ1F0OEVMcjE1bFQ5cUFHQWh3SHkNCkowMFczUmkzRXVpZnFWQjJucHNPdVVNb3N6OHZzYXFoa1BDaXZ3bHpmKzBiZjUyaXRUL3lhTk9hN1ZnOEFZQ3ENCm13QVducFB3bnFaYnIzemx2RVBmVXZTYWJHc0RUQUZjQldmVGNFdUczSUIyU2dRbUFqdDFOZkdwQTN5Q3M4dk8NClVnUllWOVFKRXdncWhrak9QUU1CQndJREJDQ25Nc05HN05XSFQ2bTBlQ3lMLzEraDJVUE9mdWRoWittOGhqOFUNCkdCTzh6dEZ3dHJyeUdQczJNYStVZ1hRYnJ6ME1zR0NnRDRmNHpHY1Z2UkduVG8zQ3dDY0VHQk1LQUE4RkFsaFgNCjFBa0ZDUThKbkFBQ0d5NEFhZ2tRazBEejB2WWJnNnRmSUFRWkV3b0FCZ1VDV0ZmVUNRQUtDUkNQWlkyekw5R3oNCklUOFlBUUNQU0dreEdRNEpDcEhXc0dNVndXQVdYSkdaZjJyYnhseDh6ckMrOSs0T0R3RUEvZ3ZpT1orcXFhN0oNCitHZC9xanpsSGxjMzFZeEY1bmxrQW9YRGM1Vk5Zbk0zamdGL2FCclpGTkkzNmlvMHdYODVjdUtPU2hsRFk0TzUNCmhEWHdpNkMzVXQvZUVTQXJJQXF5QnpmTmx3cG83Y3lyQXhTTUFZRGVGcklMTElwM0VnbHF1N0NaNHlFbnVIZXYNCnFObGRrd3kvRHVMSStIM0hoQ2hqSzNwR3FnS3hkL2JQMTVGYVN4WT0NCj05NWE3DQotLS0tLUVORCBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tDQo=""
}

output ""user_secret"" {
    value = ""${aws_iam_access_key.ecr_user.encrypted_secret}""
}
```

Unfortunately when I use this I get the following error.
```
Error applying plan:
1 error(s) occurred:
* aws_iam_access_key.ecr_user: Error encrypting IAM Access Key Secret: Error parsing given PGP key: openpgp: invalid data: tag byte does not have MSB set
```

I made a key like this:

```
root@runner:~# gpg --gen-key
gpg (GnuPG) 1.4.16; Copyright (C) 2013 Free Software Foundation
, Inc.
This is free software: you are free to change and redistribute
it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
Your selection? 1
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048) 4096
Requested keysize is 4096 bits
Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 1y
Key expires at Tue 19 Dec 2017 11:48:23 AM UTC
Is this correct? (y/N) y

You need a user ID to identify your key; the software construct
s the user ID
from the Real Name, Comment and Email Address in this form:
    ""Heinrich Heine (Der Dichter) <heinrichh@duesseldorf.de>""

Real name: Randy Coburn
Email address: randy.coburn@email.com
Comment: Test Key
You selected this USER-ID:
    ""Randy Coburn (Test Key) <randy.coburn@email.com>""

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
You need a Passphrase to protect your secret key.

gpg: gpg-agent is not available in this session
We need to generate a lot of random bytes. It is a good idea to
 perform
some other action (type on the keyboard, move the mouse, utiliz
e the
disks) during the prime generation; this gives the random numbe
r
generator a better chance to gain enough entropy.

Not enough random bytes available.  Please do some other work t
o give
the OS a chance to collect more entropy! (Need 288 more bytes)
......+++++
.............................................+++++
We need to generate a lot of random bytes. It is a good idea to
 perform
some other action (type on the keyboard, move the mouse, utiliz
e the
disks) during the prime generation; this gives the random numbe
r
generator a better chance to gain enough entropy.
....................+++++
...................+++++
gpg: /root/.gnupg/trustdb.gpg: trustdb created
gpg: key DB74EF86 marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust mode
l
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m,
0f, 1u
gpg: next trustdb check due at 2017-12-19
pub   4096R/DB74EF86 2016-12-19 [expires: 2017-12-19]
      Key fingerprint = FA8F 2A3D 9D1C 1AD6 1082  3C0B 1503 914
7 DB74 EF86
uid                  Randy Coburn (Test Key) <randy.coburn@email.com>
sub   4096R/822FDB0A 2016-12-19 [expires: 2017-12-19]
```

Then exported it like this:
```
gpg --export -a ""Randy Coburn"" | base64
```",LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tDQpWZXJzaW9uOiBLZXliYXNlI,https://github.com/hashicorp/terraform-provider-aws
55,436.0,"_This issue was originally opened by @morfien101 as hashicorp/terraform#10835. It was migrated here as part of the [provider split](https://www.hashicorp.com/blog/upcoming-provider-changes-in-terraform-0-10/). The original body of the issue is below._

<hr>

Hi Guys,

I am trying to make use of the new feature in Terraform 0.8.0.
https://github.com/hashicorp/terraform/pull/10615

The PGP key here is just a test key so there is no issue with it being compromised.

```
variable aws_region {}

provider ""aws"" {
    region = ""${var.aws_region}""
}

resource ""aws_iam_user"" ""ecr_user"" {
    name = ""ecr_user""
    force_destroy = true
}

resource ""aws_iam_access_key"" ""ecr_user"" {
    user = ""${aws_iam_user.ecr_user.name}""
    pgp_key = ""LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tDQpWZXJzaW9uOiBLZXliYXNlIE9wZW5QR1AgdjEuMC4wDQpDb21tZW50OiBodHRwczovL2tleWJhc2UuaW8vY3J5cHRvDQoNCnhtOEVXRmZVQ1JNRks0RUVBQ0lEQXdUbERnenlmYzNvSlAzV0lPcTFTaTRsUUpUNW9lUEszVEdqeGZHQU5KRVQNCjhFSkt2Y3g5MkMxUGFlTEVieEJhT2Q0S0xRWThkdFFYOHVNRndqTm95bUpDaE1KMmJGdTZGS3F2aG1FVUNRUWUNCnkrK2dVYWpRWFlRcTFVYmVNNjdyVmNyTkxYSmhibVI1SUdOdlluVnliaUE4Y21GdVpIa3VZMjlpZFhKdVFHNWwNCmQzWnZhV05sYldWa2FXRXVZMjl0UHNLUEJCTVRDZ0FYQlFKWVY5UUpBaHN2QXdzSkJ3TVZDZ2dDSGdFQ0Y0QUENCkNna1FrMER6MHZZYmc2dWZ0UUYvUW4vemoway9WOVdLY051aThWT3hlTFZpcWFxN1lGYXZ4NGhNRmp1S1BFRjMNCnM0SGd5NnJmV2FrNWlRbXd1Rkt6QVg5WFo1VEVZZmkyWlFsekIrSlRNOU1nTVJMSUpEWFdtL0xLZ3JWWUh3by8NCjZjZ3k5WFE2YTlQMk1QYkwvc05yc2dET1VnUllWOVFKRXdncWhrak9QUU1CQndJREJNMVlBNGt2b1BNRWttK2YNCkRCVlNyNE1Ybkgvd3JzdjZCc3FESXNSUW8ySjlzTVYyWEp2YzMxMndLdXc3KzlkR2xzS3VZR0Y2NzRLN3l3NGgNCi84NHhoRmJDd0NjRUdCTUtBQThGQWxoWDFBa0ZDUThKbkFBQ0d5NEFhZ2tRazBEejB2WWJnNnRmSUFRWkV3b0ENCkJnVUNXRmZVQ1FBS0NSRFN4cklOZ29nelM3UVFBUURZa0t5bEVMeU1wR2N2cFdOL0w4aUpjajd1c0dtK0NVQjMNCjBQOEhnVHJMSUFEL1MrRkpEM0lyN1NhSjJiMUFGWU1IOVgwZ2UweFhBM1dLQ1F0OEVMcjE1bFQ5cUFHQWh3SHkNCkowMFczUmkzRXVpZnFWQjJucHNPdVVNb3N6OHZzYXFoa1BDaXZ3bHpmKzBiZjUyaXRUL3lhTk9hN1ZnOEFZQ3ENCm13QVducFB3bnFaYnIzemx2RVBmVXZTYWJHc0RUQUZjQldmVGNFdUczSUIyU2dRbUFqdDFOZkdwQTN5Q3M4dk8NClVnUllWOVFKRXdncWhrak9QUU1CQndJREJDQ25Nc05HN05XSFQ2bTBlQ3lMLzEraDJVUE9mdWRoWittOGhqOFUNCkdCTzh6dEZ3dHJyeUdQczJNYStVZ1hRYnJ6ME1zR0NnRDRmNHpHY1Z2UkduVG8zQ3dDY0VHQk1LQUE4RkFsaFgNCjFBa0ZDUThKbkFBQ0d5NEFhZ2tRazBEejB2WWJnNnRmSUFRWkV3b0FCZ1VDV0ZmVUNRQUtDUkNQWlkyekw5R3oNCklUOFlBUUNQU0dreEdRNEpDcEhXc0dNVndXQVdYSkdaZjJyYnhseDh6ckMrOSs0T0R3RUEvZ3ZpT1orcXFhN0oNCitHZC9xanpsSGxjMzFZeEY1bmxrQW9YRGM1Vk5Zbk0zamdGL2FCclpGTkkzNmlvMHdYODVjdUtPU2hsRFk0TzUNCmhEWHdpNkMzVXQvZUVTQXJJQXF5QnpmTmx3cG83Y3lyQXhTTUFZRGVGcklMTElwM0VnbHF1N0NaNHlFbnVIZXYNCnFObGRrd3kvRHVMSStIM0hoQ2hqSzNwR3FnS3hkL2JQMTVGYVN4WT0NCj05NWE3DQotLS0tLUVORCBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tDQo=""
}

output ""user_secret"" {
    value = ""${aws_iam_access_key.ecr_user.encrypted_secret}""
}
```

Unfortunately when I use this I get the following error.
```
Error applying plan:
1 error(s) occurred:
* aws_iam_access_key.ecr_user: Error encrypting IAM Access Key Secret: Error parsing given PGP key: openpgp: invalid data: tag byte does not have MSB set
```

I made a key like this:

```
root@runner:~# gpg --gen-key
gpg (GnuPG) 1.4.16; Copyright (C) 2013 Free Software Foundation
, Inc.
This is free software: you are free to change and redistribute
it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
Your selection? 1
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048) 4096
Requested keysize is 4096 bits
Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 1y
Key expires at Tue 19 Dec 2017 11:48:23 AM UTC
Is this correct? (y/N) y

You need a user ID to identify your key; the software construct
s the user ID
from the Real Name, Comment and Email Address in this form:
    ""Heinrich Heine (Der Dichter) <heinrichh@duesseldorf.de>""

Real name: Randy Coburn
Email address: randy.coburn@email.com
Comment: Test Key
You selected this USER-ID:
    ""Randy Coburn (Test Key) <randy.coburn@email.com>""

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
You need a Passphrase to protect your secret key.

gpg: gpg-agent is not available in this session
We need to generate a lot of random bytes. It is a good idea to
 perform
some other action (type on the keyboard, move the mouse, utiliz
e the
disks) during the prime generation; this gives the random numbe
r
generator a better chance to gain enough entropy.

Not enough random bytes available.  Please do some other work t
o give
the OS a chance to collect more entropy! (Need 288 more bytes)
......+++++
.............................................+++++
We need to generate a lot of random bytes. It is a good idea to
 perform
some other action (type on the keyboard, move the mouse, utiliz
e the
disks) during the prime generation; this gives the random numbe
r
generator a better chance to gain enough entropy.
....................+++++
...................+++++
gpg: /root/.gnupg/trustdb.gpg: trustdb created
gpg: key DB74EF86 marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust mode
l
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m,
0f, 1u
gpg: next trustdb check due at 2017-12-19
pub   4096R/DB74EF86 2016-12-19 [expires: 2017-12-19]
      Key fingerprint = FA8F 2A3D 9D1C 1AD6 1082  3C0B 1503 914
7 DB74 EF86
uid                  Randy Coburn (Test Key) <randy.coburn@email.com>
sub   4096R/822FDB0A 2016-12-19 [expires: 2017-12-19]
```

Then exported it like this:
```
gpg --export -a ""Randy Coburn"" | base64
```",LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tDQpWZXJzaW9uOiBLZXliYXNlIE9wZW5QR1AgdjEuMC4wDQpDb21tZW50OiBodHRwczovL2tleWJhc2UuaW8vY3J5cHRvDQoNCnhtOEVXRmZVQ1JNRks0RUVBQ0lEQXdUbERnenlmYzNvSlAzV0lPcTFTaTRsUUpUNW9lUEszVEdqeGZHQU5KRVQNCjhFSkt2Y3g5MkMxUGFlTEVieEJhT2Q0S0xRWThkdFFYOHVNRndqTm95bUpDaE1KMmJGdTZGS3F2aG1FVUNRUWUNCnkrK2dVYWpRWFlRcTFVYmVNNjdyVmNyTkxYSmhibVI1SUdOdlluVnliaUE4Y21GdVpIa3VZMjlpZFhKdVFHNWwNCmQzWnZhV05sYldWa2FXRXVZMjl0UHNLUEJCTVRDZ0FYQlFKWVY5UUpBaHN2QXdzSkJ3TVZDZ2dDSGdFQ0Y0QUENCkNna1FrMER6MHZZYmc2dWZ0UUYvUW4vemoway9WOVdLY051aThWT3hlTFZpcWFxN1lGYXZ4NGhNRmp1S1BFRjMNCnM0SGd5NnJmV2FrNWlRbXd1Rkt6QVg5WFo1VEVZZmkyWlFsekIrSlRNOU1nTVJMSUpEWFdtL0xLZ3JWWUh3by8NCjZjZ3k5WFE2YTlQMk1QYkwvc05yc2dET1VnUllWOVFKRXdncWhrak9QUU1CQndJREJNMVlBNGt2b1BNRWttK2YNCkRCVlNyNE1Ybkgvd3JzdjZCc3FESXNSUW8ySjlzTVYyWEp2YzMxMndLdXc3KzlkR2xzS3VZR0Y2NzRLN3l3NGgNCi84NHhoRmJDd0NjRUdCTUtBQThGQWxoWDFBa0ZDUThKbkFBQ0d5NEFhZ2tRazBEejB2WWJnNnRmSUFRWkV3b0ENCkJnVUNXRmZVQ1FBS0NSRFN4cklOZ29nelM3UVFBUURZa0t5bEVMeU1wR2N2cFdOL0w4aUpjajd1c0dtK0NVQjMNCjBQOEhnVHJMSUFEL1MrRkpEM0lyN1NhSjJiMUFGWU1IOVgwZ2UweFhBM1dLQ1F0OEVMcjE1bFQ5cUFHQWh3SHkNCkowMFczUmkzRXVpZnFWQjJucHNPdVVNb3N6OHZzYXFoa1BDaXZ3bHpmKzBiZjUyaXRUL3lhTk9hN1ZnOEFZQ3ENCm13QVducFB3bnFaYnIzemx2RVBmVXZTYWJHc0RUQUZjQldmVGNFdUczSUIyU2dRbUFqdDFOZkdwQTN5Q3M4dk8NClVnUllWOVFKRXdncWhrak9QUU1CQndJREJDQ25Nc05HN05XSFQ2bTBlQ3lMLzEraDJVUE9mdWRoWittOGhqOFUNCkdCTzh6dEZ3dHJyeUdQczJNYStVZ1hRYnJ6ME1zR0NnRDRmNHpHY1Z2UkduVG8zQ3dDY0VHQk1LQUE4RkFsaFgNCjFBa0ZDUThKbkFBQ0d5NEFhZ2tRazBEejB2WWJnNnRmSUFRWkV3b0FCZ1VDV0ZmVUNRQUtDUkNQWlkyekw5R3oNCklUOFlBUUNQU0dreEdRNEpDcEhXc0dNVndXQVdYSkdaZjJyYnhseDh6ckMrOSs0T0R3RUEvZ3ZpT1orcXFhN0oNCitHZC9xanpsSGxjMzFZeEY1bmxrQW9YRGM1Vk5Zbk0zamdGL2FCclpGTkkzNmlvMHdYODVjdUtPU2hsRFk0TzUNCmhEWHdpNkMzVXQvZUVTQXJJQXF5QnpmTmx3cG83Y3lyQXhTTUFZRGVGcklMTElwM0VnbHF1N0NaNHlFbnVIZXYNCnFObGRrd3kvRHVMSStIM0hoQ2hqSzNwR3FnS3hkL2JQMTVGYVN4WT0NCj05NWE3DQotLS0tLUVORCBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tDQo,https://github.com/hashicorp/terraform-provider-aws
56,436.0,"_This issue was originally opened by @morfien101 as hashicorp/terraform#10835. It was migrated here as part of the [provider split](https://www.hashicorp.com/blog/upcoming-provider-changes-in-terraform-0-10/). The original body of the issue is below._

<hr>

Hi Guys,

I am trying to make use of the new feature in Terraform 0.8.0.
https://github.com/hashicorp/terraform/pull/10615

The PGP key here is just a test key so there is no issue with it being compromised.

```
variable aws_region {}

provider ""aws"" {
    region = ""${var.aws_region}""
}

resource ""aws_iam_user"" ""ecr_user"" {
    name = ""ecr_user""
    force_destroy = true
}

resource ""aws_iam_access_key"" ""ecr_user"" {
    user = ""${aws_iam_user.ecr_user.name}""
    pgp_key = ""LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tDQpWZXJzaW9uOiBLZXliYXNlIE9wZW5QR1AgdjEuMC4wDQpDb21tZW50OiBodHRwczovL2tleWJhc2UuaW8vY3J5cHRvDQoNCnhtOEVXRmZVQ1JNRks0RUVBQ0lEQXdUbERnenlmYzNvSlAzV0lPcTFTaTRsUUpUNW9lUEszVEdqeGZHQU5KRVQNCjhFSkt2Y3g5MkMxUGFlTEVieEJhT2Q0S0xRWThkdFFYOHVNRndqTm95bUpDaE1KMmJGdTZGS3F2aG1FVUNRUWUNCnkrK2dVYWpRWFlRcTFVYmVNNjdyVmNyTkxYSmhibVI1SUdOdlluVnliaUE4Y21GdVpIa3VZMjlpZFhKdVFHNWwNCmQzWnZhV05sYldWa2FXRXVZMjl0UHNLUEJCTVRDZ0FYQlFKWVY5UUpBaHN2QXdzSkJ3TVZDZ2dDSGdFQ0Y0QUENCkNna1FrMER6MHZZYmc2dWZ0UUYvUW4vemoway9WOVdLY051aThWT3hlTFZpcWFxN1lGYXZ4NGhNRmp1S1BFRjMNCnM0SGd5NnJmV2FrNWlRbXd1Rkt6QVg5WFo1VEVZZmkyWlFsekIrSlRNOU1nTVJMSUpEWFdtL0xLZ3JWWUh3by8NCjZjZ3k5WFE2YTlQMk1QYkwvc05yc2dET1VnUllWOVFKRXdncWhrak9QUU1CQndJREJNMVlBNGt2b1BNRWttK2YNCkRCVlNyNE1Ybkgvd3JzdjZCc3FESXNSUW8ySjlzTVYyWEp2YzMxMndLdXc3KzlkR2xzS3VZR0Y2NzRLN3l3NGgNCi84NHhoRmJDd0NjRUdCTUtBQThGQWxoWDFBa0ZDUThKbkFBQ0d5NEFhZ2tRazBEejB2WWJnNnRmSUFRWkV3b0ENCkJnVUNXRmZVQ1FBS0NSRFN4cklOZ29nelM3UVFBUURZa0t5bEVMeU1wR2N2cFdOL0w4aUpjajd1c0dtK0NVQjMNCjBQOEhnVHJMSUFEL1MrRkpEM0lyN1NhSjJiMUFGWU1IOVgwZ2UweFhBM1dLQ1F0OEVMcjE1bFQ5cUFHQWh3SHkNCkowMFczUmkzRXVpZnFWQjJucHNPdVVNb3N6OHZzYXFoa1BDaXZ3bHpmKzBiZjUyaXRUL3lhTk9hN1ZnOEFZQ3ENCm13QVducFB3bnFaYnIzemx2RVBmVXZTYWJHc0RUQUZjQldmVGNFdUczSUIyU2dRbUFqdDFOZkdwQTN5Q3M4dk8NClVnUllWOVFKRXdncWhrak9QUU1CQndJREJDQ25Nc05HN05XSFQ2bTBlQ3lMLzEraDJVUE9mdWRoWittOGhqOFUNCkdCTzh6dEZ3dHJyeUdQczJNYStVZ1hRYnJ6ME1zR0NnRDRmNHpHY1Z2UkduVG8zQ3dDY0VHQk1LQUE4RkFsaFgNCjFBa0ZDUThKbkFBQ0d5NEFhZ2tRazBEejB2WWJnNnRmSUFRWkV3b0FCZ1VDV0ZmVUNRQUtDUkNQWlkyekw5R3oNCklUOFlBUUNQU0dreEdRNEpDcEhXc0dNVndXQVdYSkdaZjJyYnhseDh6ckMrOSs0T0R3RUEvZ3ZpT1orcXFhN0oNCitHZC9xanpsSGxjMzFZeEY1bmxrQW9YRGM1Vk5Zbk0zamdGL2FCclpGTkkzNmlvMHdYODVjdUtPU2hsRFk0TzUNCmhEWHdpNkMzVXQvZUVTQXJJQXF5QnpmTmx3cG83Y3lyQXhTTUFZRGVGcklMTElwM0VnbHF1N0NaNHlFbnVIZXYNCnFObGRrd3kvRHVMSStIM0hoQ2hqSzNwR3FnS3hkL2JQMTVGYVN4WT0NCj05NWE3DQotLS0tLUVORCBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tDQo=""
}

output ""user_secret"" {
    value = ""${aws_iam_access_key.ecr_user.encrypted_secret}""
}
```

Unfortunately when I use this I get the following error.
```
Error applying plan:
1 error(s) occurred:
* aws_iam_access_key.ecr_user: Error encrypting IAM Access Key Secret: Error parsing given PGP key: openpgp: invalid data: tag byte does not have MSB set
```

I made a key like this:

```
root@runner:~# gpg --gen-key
gpg (GnuPG) 1.4.16; Copyright (C) 2013 Free Software Foundation
, Inc.
This is free software: you are free to change and redistribute
it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
Your selection? 1
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048) 4096
Requested keysize is 4096 bits
Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 1y
Key expires at Tue 19 Dec 2017 11:48:23 AM UTC
Is this correct? (y/N) y

You need a user ID to identify your key; the software construct
s the user ID
from the Real Name, Comment and Email Address in this form:
    ""Heinrich Heine (Der Dichter) <heinrichh@duesseldorf.de>""

Real name: Randy Coburn
Email address: randy.coburn@email.com
Comment: Test Key
You selected this USER-ID:
    ""Randy Coburn (Test Key) <randy.coburn@email.com>""

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
You need a Passphrase to protect your secret key.

gpg: gpg-agent is not available in this session
We need to generate a lot of random bytes. It is a good idea to
 perform
some other action (type on the keyboard, move the mouse, utiliz
e the
disks) during the prime generation; this gives the random numbe
r
generator a better chance to gain enough entropy.

Not enough random bytes available.  Please do some other work t
o give
the OS a chance to collect more entropy! (Need 288 more bytes)
......+++++
.............................................+++++
We need to generate a lot of random bytes. It is a good idea to
 perform
some other action (type on the keyboard, move the mouse, utiliz
e the
disks) during the prime generation; this gives the random numbe
r
generator a better chance to gain enough entropy.
....................+++++
...................+++++
gpg: /root/.gnupg/trustdb.gpg: trustdb created
gpg: key DB74EF86 marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust mode
l
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m,
0f, 1u
gpg: next trustdb check due at 2017-12-19
pub   4096R/DB74EF86 2016-12-19 [expires: 2017-12-19]
      Key fingerprint = FA8F 2A3D 9D1C 1AD6 1082  3C0B 1503 914
7 DB74 EF86
uid                  Randy Coburn (Test Key) <randy.coburn@email.com>
sub   4096R/822FDB0A 2016-12-19 [expires: 2017-12-19]
```

Then exported it like this:
```
gpg --export -a ""Randy Coburn"" | base64
```",LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tDQ,https://github.com/hashicorp/terraform-provider-aws
