,Issue ID,Issue Body,Candidate String,RepoName,is_secret_human_label,is_secret_predicted_label
0,9571.0,"It seems that `infrastructureEncryption` is no longer supported. 


1. create a postgresql server in `default` mode with `""infrastructureEncryption"": ""Enabled""` :
Request: 
PUT /subscriptions/85b3dbca-5974-4067-9669-67a141095a76/resourceGroups/rg-wlynx/providers/Microsoft.DBforPostgreSQL/servers/psql-wlynx?api-version=2017-12-01 HTTP/1.1
```
{
    ""location"": ""eastus"",
    ""properties"": {
        ""administratorLogin"": ""psqladmin"",
        ""administratorLoginPassword"": ""LNg1gDLB4pUIUhO7"",
        ""createMode"": ""Default"",
        ""infrastructureEncryption"": ""Enabled"",
        ""minimalTlsVersion"": ""TLS1_2"",
        ""publicNetworkAccess"": ""Enabled"",
        ""sslEnforcement"": ""Enabled"",
        ""storageProfile"": {
            ""backupRetentionDays"": 30,
            ""geoRedundantBackup"": ""Enabled"",
            ""storageMB"": 640000,
            ""storageAutogrow"": ""Enabled""
        },
        ""version"": ""11""
    },
    ""sku"": {
        ""name"": ""GP_Gen5_2"",
        ""tier"": ""GeneralPurpose"",
        ""capacity"": 2,
        ""family"": ""Gen5""
    },
    ""tags"": {}
}
```
Response:
202 Accepted
get the async operation link:
https://management.azure.com/subscriptions/85b3dbca-5974-4067-9669-67a141095a76/providers/Microsoft.DBforPostgreSQL/locations/eastus/azureAsyncOperation/a0b9c97f-8183-4319-9ec9-a7aa93af0959?api-version=2017-12-01
{
    ""name"": ""9a02c714-6cfb-4673-b0a0-7ce54f2c976e"",
    ""status"": ""Failed"",
    ""startTime"": ""2020-05-25T06:40:03.113Z"",
    ""error"": {
        ""code"": ""OperationTimedOut"",
        ""message"": ""The operation timed out and automatically rolled back. Please retry the operation.""
    }
}

2. create a postgresql server in `default` mode with `""infrastructureEncryption"": ""Disabled""` , success
",9a02c714-6cfb-4673-b0a0-7ce54f2c976e,Azure_API,,1
1,9571.0,"It seems that `infrastructureEncryption` is no longer supported. 


1. create a postgresql server in `default` mode with `""infrastructureEncryption"": ""Enabled""` :
Request: 
PUT /subscriptions/85b3dbca-5974-4067-9669-67a141095a76/resourceGroups/rg-wlynx/providers/Microsoft.DBforPostgreSQL/servers/psql-wlynx?api-version=2017-12-01 HTTP/1.1
```
{
    ""location"": ""eastus"",
    ""properties"": {
        ""administratorLogin"": ""psqladmin"",
        ""administratorLoginPassword"": ""LNg1gDLB4pUIUhO7"",
        ""createMode"": ""Default"",
        ""infrastructureEncryption"": ""Enabled"",
        ""minimalTlsVersion"": ""TLS1_2"",
        ""publicNetworkAccess"": ""Enabled"",
        ""sslEnforcement"": ""Enabled"",
        ""storageProfile"": {
            ""backupRetentionDays"": 30,
            ""geoRedundantBackup"": ""Enabled"",
            ""storageMB"": 640000,
            ""storageAutogrow"": ""Enabled""
        },
        ""version"": ""11""
    },
    ""sku"": {
        ""name"": ""GP_Gen5_2"",
        ""tier"": ""GeneralPurpose"",
        ""capacity"": 2,
        ""family"": ""Gen5""
    },
    ""tags"": {}
}
```
Response:
202 Accepted
get the async operation link:
https://management.azure.com/subscriptions/85b3dbca-5974-4067-9669-67a141095a76/providers/Microsoft.DBforPostgreSQL/locations/eastus/azureAsyncOperation/a0b9c97f-8183-4319-9ec9-a7aa93af0959?api-version=2017-12-01
{
    ""name"": ""9a02c714-6cfb-4673-b0a0-7ce54f2c976e"",
    ""status"": ""Failed"",
    ""startTime"": ""2020-05-25T06:40:03.113Z"",
    ""error"": {
        ""code"": ""OperationTimedOut"",
        ""message"": ""The operation timed out and automatically rolled back. Please retry the operation.""
    }
}

2. create a postgresql server in `default` mode with `""infrastructureEncryption"": ""Disabled""` , success
",LNg1gDLB4pUIUhO7,Azure_API,1,1
2,9571.0,"It seems that `infrastructureEncryption` is no longer supported. 


1. create a postgresql server in `default` mode with `""infrastructureEncryption"": ""Enabled""` :
Request: 
PUT /subscriptions/85b3dbca-5974-4067-9669-67a141095a76/resourceGroups/rg-wlynx/providers/Microsoft.DBforPostgreSQL/servers/psql-wlynx?api-version=2017-12-01 HTTP/1.1
```
{
    ""location"": ""eastus"",
    ""properties"": {
        ""administratorLogin"": ""psqladmin"",
        ""administratorLoginPassword"": ""LNg1gDLB4pUIUhO7"",
        ""createMode"": ""Default"",
        ""infrastructureEncryption"": ""Enabled"",
        ""minimalTlsVersion"": ""TLS1_2"",
        ""publicNetworkAccess"": ""Enabled"",
        ""sslEnforcement"": ""Enabled"",
        ""storageProfile"": {
            ""backupRetentionDays"": 30,
            ""geoRedundantBackup"": ""Enabled"",
            ""storageMB"": 640000,
            ""storageAutogrow"": ""Enabled""
        },
        ""version"": ""11""
    },
    ""sku"": {
        ""name"": ""GP_Gen5_2"",
        ""tier"": ""GeneralPurpose"",
        ""capacity"": 2,
        ""family"": ""Gen5""
    },
    ""tags"": {}
}
```
Response:
202 Accepted
get the async operation link:
https://management.azure.com/subscriptions/85b3dbca-5974-4067-9669-67a141095a76/providers/Microsoft.DBforPostgreSQL/locations/eastus/azureAsyncOperation/a0b9c97f-8183-4319-9ec9-a7aa93af0959?api-version=2017-12-01
{
    ""name"": ""9a02c714-6cfb-4673-b0a0-7ce54f2c976e"",
    ""status"": ""Failed"",
    ""startTime"": ""2020-05-25T06:40:03.113Z"",
    ""error"": {
        ""code"": ""OperationTimedOut"",
        ""message"": ""The operation timed out and automatically rolled back. Please retry the operation.""
    }
}

2. create a postgresql server in `default` mode with `""infrastructureEncryption"": ""Disabled""` , success
",createMode,Azure_API,,1
3,75.0,"Commands that are called using a direct command work, while using the same command with the batch commands fail.

For example, this function sets up a client mirror subscription command (in a module later required as ""glass""):

```
exports.subscribeGlassCallbacksCmd = function( user ){
  var baseUrl = exports.BASE_URL;
  var subscribeUrl = baseUrl+""/incoming/callback"";
  if( subscribeUrl.indexOf(""http:"") === 0 ){
    subscribeUrl = ""https://mirrornotifications.appspot.com/forward?url=""+subscribeUrl;
  }

  // Subscribe to updates from Glass
  var subscription = {
    collection: ""timeline"",
    callbackUrl: subscribeUrl,
    userToken: user.id
  };
  console.log( 'subscribeGlassCallbacksCmd', subscription );

  var cmd = client.mirror.subscriptions.insert(subscription);
  return cmd;
};
```

Calling it directly using these commands appear to work:

```
    var subc = glass.subscribeGlassCallbacksCmd(req.user);
    subc.withAuthClient(req.user.auth).execute(function(err,result){
      console.log( 'subc', err, result );
    });
```

err is null and result is set to the JSON representing the subscription:

```
subc null { kind: 'mirror#subscription',
  id: 'timeline',
  updated: '2013-08-06T11:33:56.772Z',
  collection: 'timeline',
  callbackUrl: 'https://prisoner.com/dev/glass-drive/incoming/callback',
  userToken: '101852559274654726533' }
```

Calling it using the following batch commands, however, don't:

```
    var batch = client.newBatchRequest();
    batch.add( glass.subscribeGlassCallbacksCmd(req.user) );
    batch.withAuthClient(req.user.auth).execute(cb);
```

the error that gets returned is 

```
{ errors: 
   [ { domain: 'global',
       reason: 'required',
       message: 'collection field is required for Subscription' },
     { domain: 'global',
       reason: 'required',
       message: 'callbackUrl field is required for Subscription' } ],
  code: 400,
  message: 'collection field is required for Subscription' }
```

I've tried other combinations of the parameters to the call to list, but they don't appear to work any better.
",subscribeGlassCallbacksCmd,Google_API,,1
4,75.0,"Commands that are called using a direct command work, while using the same command with the batch commands fail.

For example, this function sets up a client mirror subscription command (in a module later required as ""glass""):

```
exports.subscribeGlassCallbacksCmd = function( user ){
  var baseUrl = exports.BASE_URL;
  var subscribeUrl = baseUrl+""/incoming/callback"";
  if( subscribeUrl.indexOf(""http:"") === 0 ){
    subscribeUrl = ""https://mirrornotifications.appspot.com/forward?url=""+subscribeUrl;
  }

  // Subscribe to updates from Glass
  var subscription = {
    collection: ""timeline"",
    callbackUrl: subscribeUrl,
    userToken: user.id
  };
  console.log( 'subscribeGlassCallbacksCmd', subscription );

  var cmd = client.mirror.subscriptions.insert(subscription);
  return cmd;
};
```

Calling it directly using these commands appear to work:

```
    var subc = glass.subscribeGlassCallbacksCmd(req.user);
    subc.withAuthClient(req.user.auth).execute(function(err,result){
      console.log( 'subc', err, result );
    });
```

err is null and result is set to the JSON representing the subscription:

```
subc null { kind: 'mirror#subscription',
  id: 'timeline',
  updated: '2013-08-06T11:33:56.772Z',
  collection: 'timeline',
  callbackUrl: 'https://prisoner.com/dev/glass-drive/incoming/callback',
  userToken: '101852559274654726533' }
```

Calling it using the following batch commands, however, don't:

```
    var batch = client.newBatchRequest();
    batch.add( glass.subscribeGlassCallbacksCmd(req.user) );
    batch.withAuthClient(req.user.auth).execute(cb);
```

the error that gets returned is 

```
{ errors: 
   [ { domain: 'global',
       reason: 'required',
       message: 'collection field is required for Subscription' },
     { domain: 'global',
       reason: 'required',
       message: 'callbackUrl field is required for Subscription' } ],
  code: 400,
  message: 'collection field is required for Subscription' }
```

I've tried other combinations of the parameters to the call to list, but they don't appear to work any better.
",101852559274654726533,Google_API,1,1
5,11561.0,"### Describe the bug

I am trying to migrate 2FA configurations (Google Authenticator) from legacy system to keycloak.
We generate random secrets which includes non ascii characters, porting these to keycloak (in `credentials` table) does not work.

For example, base32 encoded secret key for google authenticator is `CDLYAYRJ73ORTU4PUWWATWSYQCP4H2QL`.
When I decode this key which results into this `◊Äb)˛›”è•¨	⁄XÄü√Í`

Inserting this secret in `credentials` table does not work

### Version

18.0.0

### Expected behavior

_No response_

### Actual behavior

_No response_

### How to Reproduce?

_No response_

### Anything else?

_No response_",CDLYAYRJ73ORTU4PUWWATWSYQCP4H2QL,Keycloak,,1
6,11284.0,"### Describe the bug

The policy endpoint returns error response when a user who was used in a policy got deleted from the realm (see reproduce steps for more details)

This issue is critical as the user management is not under control of a resource server. It's realm administrator's task. Once it happens, the resource server is no longer able to manage policies anymore.  

### Version

17.0.1

### Expected behavior

At minimal, deleting users should not affect the policy endpoint. The list policy endpoint should still work. Ideally, when a user is deleted, all policies should be updated to reflect the changes.

### Actual behavior

When a user used in a policy was deleted from the realm, list all policy endpoint stop working. It returned unknown error response. 

### How to Reproduce?

1) create a test realm
	login to Administration Console, Add realm ""Test""
	
2) add test client
	select the ""Test"" realm, go to ""Clients"" -> ""Create"" and select the attached client json file ""bug-test"" (see Anything else), and ""Save"".
	
3) add a user ""testuser""
	go to ""Users"", add a user ""testuser""
	
4) register a protected resource
	get a client token (replace hostname:port in the curl requests)
	$curl --location --request POST 'http://hostname:port/auth/realms/Test/protocol/openid-connect/token' \
       --header 'Content-Type: application/x-www-form-urlencoded' \
       --data-urlencode 'grant_type=client_credentials' \
       --data-urlencode 'client_id=bug-test' \
       --data-urlencode 'client_secret=KlCEOISCILLXARITyE09zfo9wnOxAlci'
	   
	register a protected resource ""test-protected-resource"" (replace the <access_token> in the request with the one got above)
	curl --location --request POST 'http://hostname:port/auth/realms/Test/authz/protection/resource_set' \
       --header 'Content-Type: application/json' \
       --header 'Authorization: Bearer <access_token>' \
       --data-raw '{
           ""name"": ""test-protected-resource"",
           ""ownerManagedAccess"": true,
           ""scopes"": [""read"", ""write""]
       }'
	   
	write down the resource id (_id property in the response).
	
5) add an UMA policy
	add an UMA policy with the user ""testuser"" to the resource created above (replace the <resource_id>)
	curl --location --request POST 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy/<resource_id>' \
       --header 'Authorization: Bearer <access token>' \
       --header 'Content-Type: application/json' \
       --data-raw '{
               ""name"": ""test-policy"",
               ""decisionStrategy"": ""AFFIRMATIVE"",
               ""scopes"": [""read""],
               ""users"": [""testuser""]
       }'
	write down the policy id (id property in the response).
	
6) query policy
	search all policies
	curl --location --request GET 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy' \
		--header 'Authorization: Bearer <access token>'
	
	you should see one policy in response.
	
7) reproduce the bug by deleteing the user ""testuser"" from Administration Console
	login to Administration Console, go to ""Users"", and delete the user ""testuser"" in ""Test"" realm.
	search all policies again,
	
	curl --location --request GET 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy' \
		--header 'Authorization: Bearer <access token>'

	you will get an error response ""{""error"":""unknown_error""}"". keycloak server log shows a NullPointerException thrown.
	

### Anything else?

bug-test.json

```
{
    ""clientId"": ""bug-test"",
	""secret"": ""KlCEOISCILLXARITyE09zfo9wnOxAlci"",
    ""enabled"": true,
    ""clientAuthenticatorType"": ""client-secret"",
    ""redirectUris"": [
        ""*""
    ],
    ""serviceAccountsEnabled"": true,
    ""authorizationServicesEnabled"": true,
	""authorizationSettings"": {
      ""allowRemoteResourceManagement"": true,
      ""decisionStrategy"": ""AFFIRMATIVE""
	},
    ""publicClient"": false,
    ""protocol"": ""openid-connect""
}
```

A quick fix could be:

```
 .../policy/provider/permission/UMAPolicyProviderFactory.java        | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java b/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
index 51107ae8a2..db0daec628 100644
--- a/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
+++ b/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
@@ -33,6 +33,7 @@ import org.keycloak.models.KeycloakSession;
 import org.keycloak.models.KeycloakSessionFactory;
 import org.keycloak.models.RealmModel;
 import org.keycloak.models.RoleModel;
+import org.keycloak.models.UserModel;
 import org.keycloak.models.utils.KeycloakModelUtils;
 import org.keycloak.models.utils.ModelToRepresentation;
 import org.keycloak.models.utils.RepresentationToModel;
@@ -349,7 +350,10 @@ public class UMAPolicyProviderFactory implements PolicyProviderFactory<UmaPermis
                 UserPolicyRepresentation rep = UserPolicyRepresentation.class.cast(associatedRep);
 
                 for (String user : rep.getUsers()) {
-                    representation.addUser(authorization.getKeycloakSession().users().getUserById(realm, user).getUsername());
+                    UserModel userModel = authorization.getKeycloakSession().users().getUserById(realm, user);
+                    if (userModel != null) {
+                        representation.addUser(userModel.getUsername());
+                    }
                 }
             }
         }
```",KlCEOISCILLXARITyE09zfo9wnOxAlci,Keycloak,1,1
7,11284.0,"### Describe the bug

The policy endpoint returns error response when a user who was used in a policy got deleted from the realm (see reproduce steps for more details)

This issue is critical as the user management is not under control of a resource server. It's realm administrator's task. Once it happens, the resource server is no longer able to manage policies anymore.  

### Version

17.0.1

### Expected behavior

At minimal, deleting users should not affect the policy endpoint. The list policy endpoint should still work. Ideally, when a user is deleted, all policies should be updated to reflect the changes.

### Actual behavior

When a user used in a policy was deleted from the realm, list all policy endpoint stop working. It returned unknown error response. 

### How to Reproduce?

1) create a test realm
	login to Administration Console, Add realm ""Test""
	
2) add test client
	select the ""Test"" realm, go to ""Clients"" -> ""Create"" and select the attached client json file ""bug-test"" (see Anything else), and ""Save"".
	
3) add a user ""testuser""
	go to ""Users"", add a user ""testuser""
	
4) register a protected resource
	get a client token (replace hostname:port in the curl requests)
	$curl --location --request POST 'http://hostname:port/auth/realms/Test/protocol/openid-connect/token' \
       --header 'Content-Type: application/x-www-form-urlencoded' \
       --data-urlencode 'grant_type=client_credentials' \
       --data-urlencode 'client_id=bug-test' \
       --data-urlencode 'client_secret=KlCEOISCILLXARITyE09zfo9wnOxAlci'
	   
	register a protected resource ""test-protected-resource"" (replace the <access_token> in the request with the one got above)
	curl --location --request POST 'http://hostname:port/auth/realms/Test/authz/protection/resource_set' \
       --header 'Content-Type: application/json' \
       --header 'Authorization: Bearer <access_token>' \
       --data-raw '{
           ""name"": ""test-protected-resource"",
           ""ownerManagedAccess"": true,
           ""scopes"": [""read"", ""write""]
       }'
	   
	write down the resource id (_id property in the response).
	
5) add an UMA policy
	add an UMA policy with the user ""testuser"" to the resource created above (replace the <resource_id>)
	curl --location --request POST 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy/<resource_id>' \
       --header 'Authorization: Bearer <access token>' \
       --header 'Content-Type: application/json' \
       --data-raw '{
               ""name"": ""test-policy"",
               ""decisionStrategy"": ""AFFIRMATIVE"",
               ""scopes"": [""read""],
               ""users"": [""testuser""]
       }'
	write down the policy id (id property in the response).
	
6) query policy
	search all policies
	curl --location --request GET 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy' \
		--header 'Authorization: Bearer <access token>'
	
	you should see one policy in response.
	
7) reproduce the bug by deleteing the user ""testuser"" from Administration Console
	login to Administration Console, go to ""Users"", and delete the user ""testuser"" in ""Test"" realm.
	search all policies again,
	
	curl --location --request GET 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy' \
		--header 'Authorization: Bearer <access token>'

	you will get an error response ""{""error"":""unknown_error""}"". keycloak server log shows a NullPointerException thrown.
	

### Anything else?

bug-test.json

```
{
    ""clientId"": ""bug-test"",
	""secret"": ""KlCEOISCILLXARITyE09zfo9wnOxAlci"",
    ""enabled"": true,
    ""clientAuthenticatorType"": ""client-secret"",
    ""redirectUris"": [
        ""*""
    ],
    ""serviceAccountsEnabled"": true,
    ""authorizationServicesEnabled"": true,
	""authorizationSettings"": {
      ""allowRemoteResourceManagement"": true,
      ""decisionStrategy"": ""AFFIRMATIVE""
	},
    ""publicClient"": false,
    ""protocol"": ""openid-connect""
}
```

A quick fix could be:

```
 .../policy/provider/permission/UMAPolicyProviderFactory.java        | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java b/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
index 51107ae8a2..db0daec628 100644
--- a/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
+++ b/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
@@ -33,6 +33,7 @@ import org.keycloak.models.KeycloakSession;
 import org.keycloak.models.KeycloakSessionFactory;
 import org.keycloak.models.RealmModel;
 import org.keycloak.models.RoleModel;
+import org.keycloak.models.UserModel;
 import org.keycloak.models.utils.KeycloakModelUtils;
 import org.keycloak.models.utils.ModelToRepresentation;
 import org.keycloak.models.utils.RepresentationToModel;
@@ -349,7 +350,10 @@ public class UMAPolicyProviderFactory implements PolicyProviderFactory<UmaPermis
                 UserPolicyRepresentation rep = UserPolicyRepresentation.class.cast(associatedRep);
 
                 for (String user : rep.getUsers()) {
-                    representation.addUser(authorization.getKeycloakSession().users().getUserById(realm, user).getUsername());
+                    UserModel userModel = authorization.getKeycloakSession().users().getUserById(realm, user);
+                    if (userModel != null) {
+                        representation.addUser(userModel.getUsername());
+                    }
                 }
             }
         }
```",client_id=bug-test,Keycloak,,1
8,11284.0,"### Describe the bug

The policy endpoint returns error response when a user who was used in a policy got deleted from the realm (see reproduce steps for more details)

This issue is critical as the user management is not under control of a resource server. It's realm administrator's task. Once it happens, the resource server is no longer able to manage policies anymore.  

### Version

17.0.1

### Expected behavior

At minimal, deleting users should not affect the policy endpoint. The list policy endpoint should still work. Ideally, when a user is deleted, all policies should be updated to reflect the changes.

### Actual behavior

When a user used in a policy was deleted from the realm, list all policy endpoint stop working. It returned unknown error response. 

### How to Reproduce?

1) create a test realm
	login to Administration Console, Add realm ""Test""
	
2) add test client
	select the ""Test"" realm, go to ""Clients"" -> ""Create"" and select the attached client json file ""bug-test"" (see Anything else), and ""Save"".
	
3) add a user ""testuser""
	go to ""Users"", add a user ""testuser""
	
4) register a protected resource
	get a client token (replace hostname:port in the curl requests)
	$curl --location --request POST 'http://hostname:port/auth/realms/Test/protocol/openid-connect/token' \
       --header 'Content-Type: application/x-www-form-urlencoded' \
       --data-urlencode 'grant_type=client_credentials' \
       --data-urlencode 'client_id=bug-test' \
       --data-urlencode 'client_secret=KlCEOISCILLXARITyE09zfo9wnOxAlci'
	   
	register a protected resource ""test-protected-resource"" (replace the <access_token> in the request with the one got above)
	curl --location --request POST 'http://hostname:port/auth/realms/Test/authz/protection/resource_set' \
       --header 'Content-Type: application/json' \
       --header 'Authorization: Bearer <access_token>' \
       --data-raw '{
           ""name"": ""test-protected-resource"",
           ""ownerManagedAccess"": true,
           ""scopes"": [""read"", ""write""]
       }'
	   
	write down the resource id (_id property in the response).
	
5) add an UMA policy
	add an UMA policy with the user ""testuser"" to the resource created above (replace the <resource_id>)
	curl --location --request POST 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy/<resource_id>' \
       --header 'Authorization: Bearer <access token>' \
       --header 'Content-Type: application/json' \
       --data-raw '{
               ""name"": ""test-policy"",
               ""decisionStrategy"": ""AFFIRMATIVE"",
               ""scopes"": [""read""],
               ""users"": [""testuser""]
       }'
	write down the policy id (id property in the response).
	
6) query policy
	search all policies
	curl --location --request GET 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy' \
		--header 'Authorization: Bearer <access token>'
	
	you should see one policy in response.
	
7) reproduce the bug by deleteing the user ""testuser"" from Administration Console
	login to Administration Console, go to ""Users"", and delete the user ""testuser"" in ""Test"" realm.
	search all policies again,
	
	curl --location --request GET 'http://hostname:port/auth/realms/Test/authz/protection/uma-policy' \
		--header 'Authorization: Bearer <access token>'

	you will get an error response ""{""error"":""unknown_error""}"". keycloak server log shows a NullPointerException thrown.
	

### Anything else?

bug-test.json

```
{
    ""clientId"": ""bug-test"",
	""secret"": ""KlCEOISCILLXARITyE09zfo9wnOxAlci"",
    ""enabled"": true,
    ""clientAuthenticatorType"": ""client-secret"",
    ""redirectUris"": [
        ""*""
    ],
    ""serviceAccountsEnabled"": true,
    ""authorizationServicesEnabled"": true,
	""authorizationSettings"": {
      ""allowRemoteResourceManagement"": true,
      ""decisionStrategy"": ""AFFIRMATIVE""
	},
    ""publicClient"": false,
    ""protocol"": ""openid-connect""
}
```

A quick fix could be:

```
 .../policy/provider/permission/UMAPolicyProviderFactory.java        | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java b/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
index 51107ae8a2..db0daec628 100644
--- a/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
+++ b/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/UMAPolicyProviderFactory.java
@@ -33,6 +33,7 @@ import org.keycloak.models.KeycloakSession;
 import org.keycloak.models.KeycloakSessionFactory;
 import org.keycloak.models.RealmModel;
 import org.keycloak.models.RoleModel;
+import org.keycloak.models.UserModel;
 import org.keycloak.models.utils.KeycloakModelUtils;
 import org.keycloak.models.utils.ModelToRepresentation;
 import org.keycloak.models.utils.RepresentationToModel;
@@ -349,7 +350,10 @@ public class UMAPolicyProviderFactory implements PolicyProviderFactory<UmaPermis
                 UserPolicyRepresentation rep = UserPolicyRepresentation.class.cast(associatedRep);
 
                 for (String user : rep.getUsers()) {
-                    representation.addUser(authorization.getKeycloakSession().users().getUserById(realm, user).getUsername());
+                    UserModel userModel = authorization.getKeycloakSession().users().getUserById(realm, user);
+                    if (userModel != null) {
+                        representation.addUser(userModel.getUsername());
+                    }
                 }
             }
         }
```",NullPointerException,Keycloak,,1
9,7650.0,"<!---
Please read https://github.com/keycloak/keycloak/blob/master/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak
-->
Allow using Client Java for token exchanging. E.g.
```lang-kotlin
fun main() {
    val authzClient = AuthzClient.create()
    val request = TokenExchangeRequest()
    request.clientId = ""training-service""
    request.clientSecret = ""b56e9bb4-5037-32aa-b823-3f59f231e418""
    request.subjectToken = ""eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJMZ3pHN1dBOWZWNXE4Wl94TEVmOFNkRl94LWx3NWF6cnY0SUxoNjdTNEdZIn0.eyJleHAiOjE2MDY3NzE3ODksImlhdCI6MTYwNjczNTc5MCwiYXV0aF90aW1lIjoxNjA2NzM1Nzg5LCJqdGkiOiI4NDdjMTJlNi04M2Y1LTQ5MmEtYTI1My05OTVkYWM0ZDA0MWUiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0L2F1dGgvcmVhbG1zL2Jhc2tldG1hc3RlciIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI4MzgxYjYyOS01ZjEwLTQwMWMtYWU5MC1iYjM3NzY5ZTVmNzAiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZWFtcy1mcm9udGVuZCIsIm5vbmNlIjoiMmExYzRkZGItYTk2YS00YjRkLWE0ZDUtNmY4ZmVkOGIzOGI4Iiwic2Vzc2lvbl9zdGF0ZSI6IjUwMjJhYTE3LTlkZjEtNDc2My1hMmY4LWMxY2JkNGQ2ODYwMSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIGVtYWlsIHByb2ZpbGUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IlRlc3QgRmlyc3QiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0IiwiZ2l2ZW5fbmFtZSI6IlRlc3QiLCJmYW1pbHlfbmFtZSI6IkZpcnN0IiwiZW1haWwiOiJ0ZXN0QGludmVudC5jb20ifQ.gIYCFqoW9qQ-BKlOJbOslYuGmC0Fhncwu868tKwV8tk_GX06p39Xh6lf6r3_zDI7QBKmZeZZzQFIpsYWv9JvvAFzLm2js0BFOHPTHIxsx74rgHi-Q9p4S1b7P0jMoK4A3vgRtywC2djhWfs639A2kcBRM2PDIr-TWAsCs9CAML3-ilPb6_LGiCRKkO28BCZFxLQ0XEpg2h_0Z_vD93y1HQOZtEK9kxLrzxPFFNcV1t03x3JxcHrJzsNTtmHkOFqakpBcLNddbsMISusFo-HkOefs4tpaUZpaqukoIPYjcWSQf_UN1n3AVga2SSSLO77WuG8Bu6Pnc_iZqxt7aY1s_A""
    request.audience = ""training-service""
    val tokenResponse = authzClient.exchange().exchange(request)
    println(tokenResponse.token)
}
```",b56e9bb4-5037-32aa-b823-3f59f231e418,Keycloak,1,1
10,7650.0,"<!---
Please read https://github.com/keycloak/keycloak/blob/master/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak
-->
Allow using Client Java for token exchanging. E.g.
```lang-kotlin
fun main() {
    val authzClient = AuthzClient.create()
    val request = TokenExchangeRequest()
    request.clientId = ""training-service""
    request.clientSecret = ""b56e9bb4-5037-32aa-b823-3f59f231e418""
    request.subjectToken = ""eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJMZ3pHN1dBOWZWNXE4Wl94TEVmOFNkRl94LWx3NWF6cnY0SUxoNjdTNEdZIn0.eyJleHAiOjE2MDY3NzE3ODksImlhdCI6MTYwNjczNTc5MCwiYXV0aF90aW1lIjoxNjA2NzM1Nzg5LCJqdGkiOiI4NDdjMTJlNi04M2Y1LTQ5MmEtYTI1My05OTVkYWM0ZDA0MWUiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0L2F1dGgvcmVhbG1zL2Jhc2tldG1hc3RlciIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI4MzgxYjYyOS01ZjEwLTQwMWMtYWU5MC1iYjM3NzY5ZTVmNzAiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZWFtcy1mcm9udGVuZCIsIm5vbmNlIjoiMmExYzRkZGItYTk2YS00YjRkLWE0ZDUtNmY4ZmVkOGIzOGI4Iiwic2Vzc2lvbl9zdGF0ZSI6IjUwMjJhYTE3LTlkZjEtNDc2My1hMmY4LWMxY2JkNGQ2ODYwMSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIGVtYWlsIHByb2ZpbGUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IlRlc3QgRmlyc3QiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0IiwiZ2l2ZW5fbmFtZSI6IlRlc3QiLCJmYW1pbHlfbmFtZSI6IkZpcnN0IiwiZW1haWwiOiJ0ZXN0QGludmVudC5jb20ifQ.gIYCFqoW9qQ-BKlOJbOslYuGmC0Fhncwu868tKwV8tk_GX06p39Xh6lf6r3_zDI7QBKmZeZZzQFIpsYWv9JvvAFzLm2js0BFOHPTHIxsx74rgHi-Q9p4S1b7P0jMoK4A3vgRtywC2djhWfs639A2kcBRM2PDIr-TWAsCs9CAML3-ilPb6_LGiCRKkO28BCZFxLQ0XEpg2h_0Z_vD93y1HQOZtEK9kxLrzxPFFNcV1t03x3JxcHrJzsNTtmHkOFqakpBcLNddbsMISusFo-HkOefs4tpaUZpaqukoIPYjcWSQf_UN1n3AVga2SSSLO77WuG8Bu6Pnc_iZqxt7aY1s_A""
    request.audience = ""training-service""
    val tokenResponse = authzClient.exchange().exchange(request)
    println(tokenResponse.token)
}
```",BKlOJbOslYuGmC0Fhncwu868tKwV8tk_GX06p39Xh6lf6r3_zDI7QBKmZeZZzQFIpsYWv9JvvAFzLm2js0BFOHPTHIxsx74rgHi-Q9p4S1b7P0jMoK4A3vgRtywC2djhWfs639A2kcBRM2PDIr-TWAsCs9CAML3-ilPb6_LGiCRKkO28BCZFxLQ0XEpg2h_0Z_vD93y1HQOZtEK9kxLrzxPFFNcV1t03x3JxcHrJzsNTtmHkOFqakpBcLNddbsMISusFo-HkOefs4tpaUZpaqukoIPYjcWSQf_UN1n3AVga2SSSLO77WuG8Bu6Pnc_iZqxt7aY1s_A,Keycloak,,1
11,7650.0,"<!---
Please read https://github.com/keycloak/keycloak/blob/master/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak
-->
Allow using Client Java for token exchanging. E.g.
```lang-kotlin
fun main() {
    val authzClient = AuthzClient.create()
    val request = TokenExchangeRequest()
    request.clientId = ""training-service""
    request.clientSecret = ""b56e9bb4-5037-32aa-b823-3f59f231e418""
    request.subjectToken = ""eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJMZ3pHN1dBOWZWNXE4Wl94TEVmOFNkRl94LWx3NWF6cnY0SUxoNjdTNEdZIn0.eyJleHAiOjE2MDY3NzE3ODksImlhdCI6MTYwNjczNTc5MCwiYXV0aF90aW1lIjoxNjA2NzM1Nzg5LCJqdGkiOiI4NDdjMTJlNi04M2Y1LTQ5MmEtYTI1My05OTVkYWM0ZDA0MWUiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0L2F1dGgvcmVhbG1zL2Jhc2tldG1hc3RlciIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI4MzgxYjYyOS01ZjEwLTQwMWMtYWU5MC1iYjM3NzY5ZTVmNzAiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZWFtcy1mcm9udGVuZCIsIm5vbmNlIjoiMmExYzRkZGItYTk2YS00YjRkLWE0ZDUtNmY4ZmVkOGIzOGI4Iiwic2Vzc2lvbl9zdGF0ZSI6IjUwMjJhYTE3LTlkZjEtNDc2My1hMmY4LWMxY2JkNGQ2ODYwMSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIGVtYWlsIHByb2ZpbGUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IlRlc3QgRmlyc3QiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0IiwiZ2l2ZW5fbmFtZSI6IlRlc3QiLCJmYW1pbHlfbmFtZSI6IkZpcnN0IiwiZW1haWwiOiJ0ZXN0QGludmVudC5jb20ifQ.gIYCFqoW9qQ-BKlOJbOslYuGmC0Fhncwu868tKwV8tk_GX06p39Xh6lf6r3_zDI7QBKmZeZZzQFIpsYWv9JvvAFzLm2js0BFOHPTHIxsx74rgHi-Q9p4S1b7P0jMoK4A3vgRtywC2djhWfs639A2kcBRM2PDIr-TWAsCs9CAML3-ilPb6_LGiCRKkO28BCZFxLQ0XEpg2h_0Z_vD93y1HQOZtEK9kxLrzxPFFNcV1t03x3JxcHrJzsNTtmHkOFqakpBcLNddbsMISusFo-HkOefs4tpaUZpaqukoIPYjcWSQf_UN1n3AVga2SSSLO77WuG8Bu6Pnc_iZqxt7aY1s_A""
    request.audience = ""training-service""
    val tokenResponse = authzClient.exchange().exchange(request)
    println(tokenResponse.token)
}
```",exchange(request,Keycloak,,1
12,7650.0,"<!---
Please read https://github.com/keycloak/keycloak/blob/master/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak
-->
Allow using Client Java for token exchanging. E.g.
```lang-kotlin
fun main() {
    val authzClient = AuthzClient.create()
    val request = TokenExchangeRequest()
    request.clientId = ""training-service""
    request.clientSecret = ""b56e9bb4-5037-32aa-b823-3f59f231e418""
    request.subjectToken = ""eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJMZ3pHN1dBOWZWNXE4Wl94TEVmOFNkRl94LWx3NWF6cnY0SUxoNjdTNEdZIn0.eyJleHAiOjE2MDY3NzE3ODksImlhdCI6MTYwNjczNTc5MCwiYXV0aF90aW1lIjoxNjA2NzM1Nzg5LCJqdGkiOiI4NDdjMTJlNi04M2Y1LTQ5MmEtYTI1My05OTVkYWM0ZDA0MWUiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0L2F1dGgvcmVhbG1zL2Jhc2tldG1hc3RlciIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI4MzgxYjYyOS01ZjEwLTQwMWMtYWU5MC1iYjM3NzY5ZTVmNzAiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZWFtcy1mcm9udGVuZCIsIm5vbmNlIjoiMmExYzRkZGItYTk2YS00YjRkLWE0ZDUtNmY4ZmVkOGIzOGI4Iiwic2Vzc2lvbl9zdGF0ZSI6IjUwMjJhYTE3LTlkZjEtNDc2My1hMmY4LWMxY2JkNGQ2ODYwMSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIGVtYWlsIHByb2ZpbGUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IlRlc3QgRmlyc3QiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0IiwiZ2l2ZW5fbmFtZSI6IlRlc3QiLCJmYW1pbHlfbmFtZSI6IkZpcnN0IiwiZW1haWwiOiJ0ZXN0QGludmVudC5jb20ifQ.gIYCFqoW9qQ-BKlOJbOslYuGmC0Fhncwu868tKwV8tk_GX06p39Xh6lf6r3_zDI7QBKmZeZZzQFIpsYWv9JvvAFzLm2js0BFOHPTHIxsx74rgHi-Q9p4S1b7P0jMoK4A3vgRtywC2djhWfs639A2kcBRM2PDIr-TWAsCs9CAML3-ilPb6_LGiCRKkO28BCZFxLQ0XEpg2h_0Z_vD93y1HQOZtEK9kxLrzxPFFNcV1t03x3JxcHrJzsNTtmHkOFqakpBcLNddbsMISusFo-HkOefs4tpaUZpaqukoIPYjcWSQf_UN1n3AVga2SSSLO77WuG8Bu6Pnc_iZqxt7aY1s_A""
    request.audience = ""training-service""
    val tokenResponse = authzClient.exchange().exchange(request)
    println(tokenResponse.token)
}
```",training-service,Keycloak,,1
13,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",literal=username,Kubernetes,,1
14,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg,Kubernetes,1,1
15,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",MTQyMzM1MTE0MzE5Ouep7a7j=client,Kubernetes,1,1
16,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",MTQyMzM1MTE0MzE5Ouep7a7j,Kubernetes,1,1
17,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU,Kubernetes,1,1
18,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",creationTimestamp,Kubernetes,,1
19,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=,Kubernetes,1,1
20,108933.0,"### What happened?

created secret with regular command but due space after password it generates different base64 string.
e.g

`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

`apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system`


`kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml`

apiVersion: v1
data:
  password: **TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajWg**
  username: c2FtaXIucGF0cnk=
kind: Secret
metadata:
  creationTimestamp: null
  name: flux-gitrepo-creds
  namespace: flux-system




NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION                CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane,master   14h   v1.21.1   172.20.0.2    <none>        Ubuntu 21.04   3.10.0-1160.59.1.el7.x86_64   containerd://1.5.2

### What did you expect to happen?

it should ignore the space after password with single quote 
echo -n 'MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5' | openssl base64
**TVRReU16TTFNVEUwTXpFNU91ZXA3YTdqL3ZYbzZDeWhEOW9iUmlUQjVmajU=**

### How can we reproduce it (as minimally and precisely as possible)?

kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml


kubectl create secret generic flux-gitrepo-creds --from-literal=username=samir.patry --from-literal=password='MTQyMzM1MTE0MzE5Ouep7a7j/vXo6CyhD9obRiTB5fj5'  -n flux-system --dry-run=client -o yaml

### Anything else we need to know?

_No response_

### Kubernetes version

<details>

```console
$ kubectl version
# paste output here
```
Client Version: version.Info{Major:""1"", Minor:""23"", GitVersion:""v1.23.4"", GitCommit:""e6c093d87ea4cbb530a7b2ae91e54c0842d8308a"", GitTreeState:""clean"", BuildDate:""2022-02-16T12:38:05Z"", GoVersion:""go1.17.7"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""21"", GitVersion:""v1.21.1"", GitCommit:""5e58841cce77d4bc13713ad2b91fa0d961e69192"", GitTreeState:""clean"", BuildDate:""2021-05-21T23:01:33Z"", GoVersion:""go1.16.4"", Compiler:""gc"", Platform:""linux/amd64""}
WARNING: version difference between client (1.23) and server (1.21) exceeds the supported minor version skew of +/-1
</details>


### Cloud provider

<details>
kind
</details>


### OS version

<details>

```console
# On Linux:
$ cat /etc/os-release
NAME=""CentOS Linux""
VERSION=""7 (Core)""
ID=""centos""
ID_LIKE=""rhel fedora""
VERSION_ID=""7""
PRETTY_NAME=""CentOS Linux 7 (Core)""
ANSI_COLOR=""0;31""
CPE_NAME=""cpe:/o:centos:centos:7""
HOME_URL=""https://www.centos.org/""
BUG_REPORT_URL=""https://bugs.centos.org/""

CENTOS_MANTISBT_PROJECT=""CentOS-7""
CENTOS_MANTISBT_PROJECT_VERSION=""7""
REDHAT_SUPPORT_PRODUCT=""centos""
REDHAT_SUPPORT_PRODUCT_VERSION=""7""
$ uname -a
Linux internalkind78 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

# On Windows:
C:\> wmic os get Caption, Version, BuildNumber, OSArchitecture
# paste output here
```

</details>


### Install tools

<details>
kind-cluster
</details>


### Container runtime (CRI) and version (if applicable)

<details>
containerd://1.5.2
</details>


### Related plugins (CNI, CSI, ...) and versions (if applicable)

<details>

</details>
",different,Kubernetes,,1
21,103978.0,"Hello all,

I'm new in this group and in the kubernets topic.
May be you can help me with the first steps. I got a error if I try to add a additional master to the cluster
For me it looks like a security-problem

It would be nice if you could help me

Let me know If I did any wrong with open of question 

----------------------------------------------------------------
""kubectl version

Client Version: version.Info{Major:""1"", Minor:""20"", GitVersion:""v1.20.1"", 

GitCommit:""c4d752765b3bbac2237bf87cf0b1c2e307844666"", GitTreeState:""clean"", BuildDate:""2020-12-18T12:09:25Z"", 

GoVersion:""go1.15.5"", Compiler:""gc"", Platform:""linux/amd64""}

Server Version: version.Info{Major:""1"", Minor:""20"", GitVersion:""v1.20.9"", 

GitCommit:""7a576bc3935a6b555e33346fd73ad77c925e9e4a"", GitTreeState:""clean"", BuildDate:""2021-07-15T20:56:38Z"", 

GoVersion:""go1.15.14"", Compiler:""gc"", Platform:""linux/amd64""}

""
----------------------------------------------------------------

Command Join a second master

[node5 ~]$ kubeadm join 192.168.0.33:6443 --token mput08.a67ftptgrmv80t7l     --discovery-token-ca-cert-hash sha256:79f87231358600410ed5f16764bd6256d58b1b833aa0e0d5cf57f4606266cc70 --control-plane --certificate-key 86fa3895828decbdbe6445c901641d8e051c3b8dccf02080bacb2fb28c51f8f1

----------------------------------------------------------------
Error
Downloading the certificates in Secret ""kubeadm-certs"" in the ""kube-system"" Namespace
error execution phase control-plane-prepare/download-certs: error downloading certs: error downloading the secret: secrets ""kubeadm-certs"" is forbidden: User ""system:bootstrap:mput08"" cannot get resource ""secrets"" in API group """" in the namespace ""kube-system""
To see the stack trace of this error execute with --v=5 or higher

----------------------------------------------------------------

Many thanks
Norman",86fa3895828decbdbe6445c901641d8e051c3b8dccf02080bacb2fb28c51f8f1,Kubernetes,1,1
22,103978.0,"Hello all,

I'm new in this group and in the kubernets topic.
May be you can help me with the first steps. I got a error if I try to add a additional master to the cluster
For me it looks like a security-problem

It would be nice if you could help me

Let me know If I did any wrong with open of question 

----------------------------------------------------------------
""kubectl version

Client Version: version.Info{Major:""1"", Minor:""20"", GitVersion:""v1.20.1"", 

GitCommit:""c4d752765b3bbac2237bf87cf0b1c2e307844666"", GitTreeState:""clean"", BuildDate:""2020-12-18T12:09:25Z"", 

GoVersion:""go1.15.5"", Compiler:""gc"", Platform:""linux/amd64""}

Server Version: version.Info{Major:""1"", Minor:""20"", GitVersion:""v1.20.9"", 

GitCommit:""7a576bc3935a6b555e33346fd73ad77c925e9e4a"", GitTreeState:""clean"", BuildDate:""2021-07-15T20:56:38Z"", 

GoVersion:""go1.15.14"", Compiler:""gc"", Platform:""linux/amd64""}

""
----------------------------------------------------------------

Command Join a second master

[node5 ~]$ kubeadm join 192.168.0.33:6443 --token mput08.a67ftptgrmv80t7l     --discovery-token-ca-cert-hash sha256:79f87231358600410ed5f16764bd6256d58b1b833aa0e0d5cf57f4606266cc70 --control-plane --certificate-key 86fa3895828decbdbe6445c901641d8e051c3b8dccf02080bacb2fb28c51f8f1

----------------------------------------------------------------
Error
Downloading the certificates in Secret ""kubeadm-certs"" in the ""kube-system"" Namespace
error execution phase control-plane-prepare/download-certs: error downloading certs: error downloading the secret: secrets ""kubeadm-certs"" is forbidden: User ""system:bootstrap:mput08"" cannot get resource ""secrets"" in API group """" in the namespace ""kube-system""
To see the stack trace of this error execute with --v=5 or higher

----------------------------------------------------------------

Many thanks
Norman",token-ca-cert-hash,Kubernetes,,1
23,103978.0,"Hello all,

I'm new in this group and in the kubernets topic.
May be you can help me with the first steps. I got a error if I try to add a additional master to the cluster
For me it looks like a security-problem

It would be nice if you could help me

Let me know If I did any wrong with open of question 

----------------------------------------------------------------
""kubectl version

Client Version: version.Info{Major:""1"", Minor:""20"", GitVersion:""v1.20.1"", 

GitCommit:""c4d752765b3bbac2237bf87cf0b1c2e307844666"", GitTreeState:""clean"", BuildDate:""2020-12-18T12:09:25Z"", 

GoVersion:""go1.15.5"", Compiler:""gc"", Platform:""linux/amd64""}

Server Version: version.Info{Major:""1"", Minor:""20"", GitVersion:""v1.20.9"", 

GitCommit:""7a576bc3935a6b555e33346fd73ad77c925e9e4a"", GitTreeState:""clean"", BuildDate:""2021-07-15T20:56:38Z"", 

GoVersion:""go1.15.14"", Compiler:""gc"", Platform:""linux/amd64""}

""
----------------------------------------------------------------

Command Join a second master

[node5 ~]$ kubeadm join 192.168.0.33:6443 --token mput08.a67ftptgrmv80t7l     --discovery-token-ca-cert-hash sha256:79f87231358600410ed5f16764bd6256d58b1b833aa0e0d5cf57f4606266cc70 --control-plane --certificate-key 86fa3895828decbdbe6445c901641d8e051c3b8dccf02080bacb2fb28c51f8f1

----------------------------------------------------------------
Error
Downloading the certificates in Secret ""kubeadm-certs"" in the ""kube-system"" Namespace
error execution phase control-plane-prepare/download-certs: error downloading certs: error downloading the secret: secrets ""kubeadm-certs"" is forbidden: User ""system:bootstrap:mput08"" cannot get resource ""secrets"" in API group """" in the namespace ""kube-system""
To see the stack trace of this error execute with --v=5 or higher

----------------------------------------------------------------

Many thanks
Norman",86fa3895828decbdbe6445c901641d8e051c3b8dccf02080ba,Kubernetes,1,1
24,93774.0,"
```release-note
NONE
```

the output will be like: 
```
kimmin-mpb:~ mbp$ curl -L -H 'Authorization: bearer 7b27df02-d21f-4420-844e-76050f1323bc' http://127.0.0.1:50100/debug/api_priority_and_fairness
{
  ""paths"": [
    ""/debug/api_priority_and_fairness/dump_priority_levels"",
    ""/debug/api_priority_and_fairness/dump_queues"",
    ""/debug/api_priority_and_fairness/dump_requests""
  ]
}
```

fixes https://github.com/kubernetes/kubernetes/issues/93361",7b27df02-d21f-4420-844e-76050f1323bc,Kubernetes,1,1
25,90044.0,"I have configured keycloak for Kubernetes RBAC. 

- user having access to get pods

```
vagrant@haproxy:~/.kube$ kubectl auth can-i get pods --user=oidc
Warning: the server doesn't have a resource type 'pods'
yes
```

```
vagrant@haproxy:~/.kube$ kubectl get pods --user=oidc
error: You must be logged in to the server (Unauthorized)
```

my kubeconfig file for the user looks like below

```yaml
users:
- name: oidc
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1beta1
      args:
      - oidc-login
      - get-token
      - --oidc-issuer-url=https://test.example.com/auth/realms/kubernetes
      - --oidc-client-id=kubernetes
      - --oidc-client-secret=e479f74d-d9fd-415b-b1db-fd7946d3ad90
      - --username=test
      - --grant-type=authcode-keyboard
      command: kubectl
```

",e479f74d-d9fd-415b-b1db-fd7946d3ad90,Kubernetes,1,1
26,90044.0,"I have configured keycloak for Kubernetes RBAC. 

- user having access to get pods

```
vagrant@haproxy:~/.kube$ kubectl auth can-i get pods --user=oidc
Warning: the server doesn't have a resource type 'pods'
yes
```

```
vagrant@haproxy:~/.kube$ kubectl get pods --user=oidc
error: You must be logged in to the server (Unauthorized)
```

my kubeconfig file for the user looks like below

```yaml
users:
- name: oidc
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1beta1
      args:
      - oidc-login
      - get-token
      - --oidc-issuer-url=https://test.example.com/auth/realms/kubernetes
      - --oidc-client-id=kubernetes
      - --oidc-client-secret=e479f74d-d9fd-415b-b1db-fd7946d3ad90
      - --username=test
      - --grant-type=authcode-keyboard
      command: kubectl
```

",oidc-client-id=kubernetes,Kubernetes,,1
27,90044.0,"I have configured keycloak for Kubernetes RBAC. 

- user having access to get pods

```
vagrant@haproxy:~/.kube$ kubectl auth can-i get pods --user=oidc
Warning: the server doesn't have a resource type 'pods'
yes
```

```
vagrant@haproxy:~/.kube$ kubectl get pods --user=oidc
error: You must be logged in to the server (Unauthorized)
```

my kubeconfig file for the user looks like below

```yaml
users:
- name: oidc
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1beta1
      args:
      - oidc-login
      - get-token
      - --oidc-issuer-url=https://test.example.com/auth/realms/kubernetes
      - --oidc-client-id=kubernetes
      - --oidc-client-secret=e479f74d-d9fd-415b-b1db-fd7946d3ad90
      - --username=test
      - --grant-type=authcode-keyboard
      command: kubectl
```

",b1db-fd7946d3ad90,Kubernetes,1,1
28,87229.0,"**What happened**:
```
[root@master01 kubernetes]# kubeadm init --config kubeadm.conf --upload-certs --certificate-key 5cf38ca270d75eb11fac6b3ef77b0e1ef7318d56a1edf3ad0687c72281c89aca
can not mix '--config' with arguments [certificate-key]
To see the stack trace of this error execute with --v=5 or higher
```
**What you expected to happen**:
i hope init success
**How to reproduce it (as minimally and precisely as possible)**:
```
kubeadm init --config kubeadm.conf --upload-certs --certificate-key 5cf38ca270d75eb11fac6b3ef77b0e1ef7318d56a1edf3ad0687c72281c89aca
```
**Anything else we need to know?**:

**Environment**:
[root@master01 kubernetes]# kubectl version --short
Client Version: v1.17.0
Unable to connect to the server: EOF
",5cf38ca270d75eb11fac6b3ef77b0e1ef7318d56a1edf3ad0687c72281c89aca,Kubernetes,1,1
29,87229.0,"**What happened**:
```
[root@master01 kubernetes]# kubeadm init --config kubeadm.conf --upload-certs --certificate-key 5cf38ca270d75eb11fac6b3ef77b0e1ef7318d56a1edf3ad0687c72281c89aca
can not mix '--config' with arguments [certificate-key]
To see the stack trace of this error execute with --v=5 or higher
```
**What you expected to happen**:
i hope init success
**How to reproduce it (as minimally and precisely as possible)**:
```
kubeadm init --config kubeadm.conf --upload-certs --certificate-key 5cf38ca270d75eb11fac6b3ef77b0e1ef7318d56a1edf3ad0687c72281c89aca
```
**Anything else we need to know?**:

**Environment**:
[root@master01 kubernetes]# kubectl version --short
Client Version: v1.17.0
Unable to connect to the server: EOF
",5cf38ca270d75eb11fac6b3ef77b0e1ef7318d56a1edf3ad06,Kubernetes,1,1
30,76010.0,"I set kubernetes cluster by kubeadm on my local ubuntu server. I tried to encrypt etcd by the same way as https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/ , then it breaks `/registry/secrets/default/default-token-xxxxx`

here is my encryption configuration file.

```yaml
    kind: EncryptionConfiguration
    apiVersion: apiserver.config.k8s.io/v1
    resources:
      - resources:
        - secrets
        providers:
        - aescbc:
            keys:
            - name: key1
              secret: F3rax7e5B/gGbAR8LLLLbPAp+R4W8KGXKjXfhTp8bb0=
            - name: key2
              secret: yuat0/ntgNh8d4NJwkWWSCdi7/WCYJ7AGfjTSU1XKHE=
```

and after created it, I configured my kube-apiserver.yaml like below.

```yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --advertise-address=xx.x.xxx.xxx
    - --allow-privileged=true
    - --authorization-mode=Node,RBAC
    - --client-ca-file=/path/to/my/ca.crt
    - --enable-admission-plugins=NodeRestriction
    - --enable-bootstrap-token-auth=true
    - --etcd-cafile=/path/to/my/etcd/ca.crt
    - --etcd-certfile=/path/to/my/apiserver-etcd-client.crt
    - --etcd-keyfile=/path/to/my/apiserver-etcd-client.key
    - --etcd-servers=https://127.0.0.1:2379
    - --encryption-provider-config=/path/to/enc/encryption_conf.yaml
    - --insecure-port=0
    - --kubelet-client-certificate=/path/to/myapiserver-kubelet-client.crt
    - --kubelet-client-key=/path/to/my/apiserver-kubelet-client.key
    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    - --proxy-client-cert-file=/path/to/my/front-proxy-client.crt
    - --proxy-client-key-file=/path/to/my/front-proxy-client.key
    - --requestheader-allowed-names=front-proxy-client
    - --requestheader-client-ca-file=/path/to/my/front-proxy-ca.crt
    - --requestheader-extra-headers-prefix=X-Remote-Extra-
    - --requestheader-group-headers=X-Remote-Group
    - --requestheader-username-headers=X-Remote-User
    - --secure-port=6443
    - --service-account-key-file=/path/to/my/sa.pub
    - --service-cluster-ip-range=10.96.0.0/12
    - --tls-cert-file=/path/to/my/apiserver.crt
    - --tls-private-key-file=/path/to/my/apiserver.key
    image: k8s.gcr.io/kube-apiserver:v1.14.0
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: xx.x.xxx.xxx
        path: /healthz
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 15
      timeoutSeconds: 15
    name: kube-apiserver
    resources:
      requests:
        cpu: 250m
    volumeMounts:
    - mountPath: /path/to/enc
      name: encryption-conf
      readOnly: true
  ...
  hostNetwork: true
  priorityClassName: system-cluster-critical
  volumes:
  - hostPath:
      path: /path/to/enc
      type: DirectoryOrCreate
    name: encryption-conf
 ...
status: {}
```

after restarting apiserver, `unable to transform key ""/registry/secrets/default/default-token-xxx"": no matching prefix found` appeared.

**environment**

- Ubuntu Server 18.04
- build cluster by using kubeadm(v1.14.0)
- `kubectl version`: v1.14.0
- cni:  Calico(v3.5)

/kind bug","types=InternalIP,ExternalIP,Hostname",Kubernetes,,1
31,76010.0,"I set kubernetes cluster by kubeadm on my local ubuntu server. I tried to encrypt etcd by the same way as https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/ , then it breaks `/registry/secrets/default/default-token-xxxxx`

here is my encryption configuration file.

```yaml
    kind: EncryptionConfiguration
    apiVersion: apiserver.config.k8s.io/v1
    resources:
      - resources:
        - secrets
        providers:
        - aescbc:
            keys:
            - name: key1
              secret: F3rax7e5B/gGbAR8LLLLbPAp+R4W8KGXKjXfhTp8bb0=
            - name: key2
              secret: yuat0/ntgNh8d4NJwkWWSCdi7/WCYJ7AGfjTSU1XKHE=
```

and after created it, I configured my kube-apiserver.yaml like below.

```yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --advertise-address=xx.x.xxx.xxx
    - --allow-privileged=true
    - --authorization-mode=Node,RBAC
    - --client-ca-file=/path/to/my/ca.crt
    - --enable-admission-plugins=NodeRestriction
    - --enable-bootstrap-token-auth=true
    - --etcd-cafile=/path/to/my/etcd/ca.crt
    - --etcd-certfile=/path/to/my/apiserver-etcd-client.crt
    - --etcd-keyfile=/path/to/my/apiserver-etcd-client.key
    - --etcd-servers=https://127.0.0.1:2379
    - --encryption-provider-config=/path/to/enc/encryption_conf.yaml
    - --insecure-port=0
    - --kubelet-client-certificate=/path/to/myapiserver-kubelet-client.crt
    - --kubelet-client-key=/path/to/my/apiserver-kubelet-client.key
    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    - --proxy-client-cert-file=/path/to/my/front-proxy-client.crt
    - --proxy-client-key-file=/path/to/my/front-proxy-client.key
    - --requestheader-allowed-names=front-proxy-client
    - --requestheader-client-ca-file=/path/to/my/front-proxy-ca.crt
    - --requestheader-extra-headers-prefix=X-Remote-Extra-
    - --requestheader-group-headers=X-Remote-Group
    - --requestheader-username-headers=X-Remote-User
    - --secure-port=6443
    - --service-account-key-file=/path/to/my/sa.pub
    - --service-cluster-ip-range=10.96.0.0/12
    - --tls-cert-file=/path/to/my/apiserver.crt
    - --tls-private-key-file=/path/to/my/apiserver.key
    image: k8s.gcr.io/kube-apiserver:v1.14.0
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: xx.x.xxx.xxx
        path: /healthz
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 15
      timeoutSeconds: 15
    name: kube-apiserver
    resources:
      requests:
        cpu: 250m
    volumeMounts:
    - mountPath: /path/to/enc
      name: encryption-conf
      readOnly: true
  ...
  hostNetwork: true
  priorityClassName: system-cluster-critical
  volumes:
  - hostPath:
      path: /path/to/enc
      type: DirectoryOrCreate
    name: encryption-conf
 ...
status: {}
```

after restarting apiserver, `unable to transform key ""/registry/secrets/default/default-token-xxx"": no matching prefix found` appeared.

**environment**

- Ubuntu Server 18.04
- build cluster by using kubeadm(v1.14.0)
- `kubectl version`: v1.14.0
- cni:  Calico(v3.5)

/kind bug",names=front-proxy-client,Kubernetes,,1
32,76010.0,"I set kubernetes cluster by kubeadm on my local ubuntu server. I tried to encrypt etcd by the same way as https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/ , then it breaks `/registry/secrets/default/default-token-xxxxx`

here is my encryption configuration file.

```yaml
    kind: EncryptionConfiguration
    apiVersion: apiserver.config.k8s.io/v1
    resources:
      - resources:
        - secrets
        providers:
        - aescbc:
            keys:
            - name: key1
              secret: F3rax7e5B/gGbAR8LLLLbPAp+R4W8KGXKjXfhTp8bb0=
            - name: key2
              secret: yuat0/ntgNh8d4NJwkWWSCdi7/WCYJ7AGfjTSU1XKHE=
```

and after created it, I configured my kube-apiserver.yaml like below.

```yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --advertise-address=xx.x.xxx.xxx
    - --allow-privileged=true
    - --authorization-mode=Node,RBAC
    - --client-ca-file=/path/to/my/ca.crt
    - --enable-admission-plugins=NodeRestriction
    - --enable-bootstrap-token-auth=true
    - --etcd-cafile=/path/to/my/etcd/ca.crt
    - --etcd-certfile=/path/to/my/apiserver-etcd-client.crt
    - --etcd-keyfile=/path/to/my/apiserver-etcd-client.key
    - --etcd-servers=https://127.0.0.1:2379
    - --encryption-provider-config=/path/to/enc/encryption_conf.yaml
    - --insecure-port=0
    - --kubelet-client-certificate=/path/to/myapiserver-kubelet-client.crt
    - --kubelet-client-key=/path/to/my/apiserver-kubelet-client.key
    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    - --proxy-client-cert-file=/path/to/my/front-proxy-client.crt
    - --proxy-client-key-file=/path/to/my/front-proxy-client.key
    - --requestheader-allowed-names=front-proxy-client
    - --requestheader-client-ca-file=/path/to/my/front-proxy-ca.crt
    - --requestheader-extra-headers-prefix=X-Remote-Extra-
    - --requestheader-group-headers=X-Remote-Group
    - --requestheader-username-headers=X-Remote-User
    - --secure-port=6443
    - --service-account-key-file=/path/to/my/sa.pub
    - --service-cluster-ip-range=10.96.0.0/12
    - --tls-cert-file=/path/to/my/apiserver.crt
    - --tls-private-key-file=/path/to/my/apiserver.key
    image: k8s.gcr.io/kube-apiserver:v1.14.0
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: xx.x.xxx.xxx
        path: /healthz
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 15
      timeoutSeconds: 15
    name: kube-apiserver
    resources:
      requests:
        cpu: 250m
    volumeMounts:
    - mountPath: /path/to/enc
      name: encryption-conf
      readOnly: true
  ...
  hostNetwork: true
  priorityClassName: system-cluster-critical
  volumes:
  - hostPath:
      path: /path/to/enc
      type: DirectoryOrCreate
    name: encryption-conf
 ...
status: {}
```

after restarting apiserver, `unable to transform key ""/registry/secrets/default/default-token-xxx"": no matching prefix found` appeared.

**environment**

- Ubuntu Server 18.04
- build cluster by using kubeadm(v1.14.0)
- `kubectl version`: v1.14.0
- cni:  Calico(v3.5)

/kind bug",encryption-provider-config,Kubernetes,,1
33,76010.0,"I set kubernetes cluster by kubeadm on my local ubuntu server. I tried to encrypt etcd by the same way as https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/ , then it breaks `/registry/secrets/default/default-token-xxxxx`

here is my encryption configuration file.

```yaml
    kind: EncryptionConfiguration
    apiVersion: apiserver.config.k8s.io/v1
    resources:
      - resources:
        - secrets
        providers:
        - aescbc:
            keys:
            - name: key1
              secret: F3rax7e5B/gGbAR8LLLLbPAp+R4W8KGXKjXfhTp8bb0=
            - name: key2
              secret: yuat0/ntgNh8d4NJwkWWSCdi7/WCYJ7AGfjTSU1XKHE=
```

and after created it, I configured my kube-apiserver.yaml like below.

```yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --advertise-address=xx.x.xxx.xxx
    - --allow-privileged=true
    - --authorization-mode=Node,RBAC
    - --client-ca-file=/path/to/my/ca.crt
    - --enable-admission-plugins=NodeRestriction
    - --enable-bootstrap-token-auth=true
    - --etcd-cafile=/path/to/my/etcd/ca.crt
    - --etcd-certfile=/path/to/my/apiserver-etcd-client.crt
    - --etcd-keyfile=/path/to/my/apiserver-etcd-client.key
    - --etcd-servers=https://127.0.0.1:2379
    - --encryption-provider-config=/path/to/enc/encryption_conf.yaml
    - --insecure-port=0
    - --kubelet-client-certificate=/path/to/myapiserver-kubelet-client.crt
    - --kubelet-client-key=/path/to/my/apiserver-kubelet-client.key
    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    - --proxy-client-cert-file=/path/to/my/front-proxy-client.crt
    - --proxy-client-key-file=/path/to/my/front-proxy-client.key
    - --requestheader-allowed-names=front-proxy-client
    - --requestheader-client-ca-file=/path/to/my/front-proxy-ca.crt
    - --requestheader-extra-headers-prefix=X-Remote-Extra-
    - --requestheader-group-headers=X-Remote-Group
    - --requestheader-username-headers=X-Remote-User
    - --secure-port=6443
    - --service-account-key-file=/path/to/my/sa.pub
    - --service-cluster-ip-range=10.96.0.0/12
    - --tls-cert-file=/path/to/my/apiserver.crt
    - --tls-private-key-file=/path/to/my/apiserver.key
    image: k8s.gcr.io/kube-apiserver:v1.14.0
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: xx.x.xxx.xxx
        path: /healthz
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 15
      timeoutSeconds: 15
    name: kube-apiserver
    resources:
      requests:
        cpu: 250m
    volumeMounts:
    - mountPath: /path/to/enc
      name: encryption-conf
      readOnly: true
  ...
  hostNetwork: true
  priorityClassName: system-cluster-critical
  volumes:
  - hostPath:
      path: /path/to/enc
      type: DirectoryOrCreate
    name: encryption-conf
 ...
status: {}
```

after restarting apiserver, `unable to transform key ""/registry/secrets/default/default-token-xxx"": no matching prefix found` appeared.

**environment**

- Ubuntu Server 18.04
- build cluster by using kubeadm(v1.14.0)
- `kubectl version`: v1.14.0
- cni:  Calico(v3.5)

/kind bug",R4W8KGXKjXfhTp8bb0,Kubernetes,1,1
34,76010.0,"I set kubernetes cluster by kubeadm on my local ubuntu server. I tried to encrypt etcd by the same way as https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/ , then it breaks `/registry/secrets/default/default-token-xxxxx`

here is my encryption configuration file.

```yaml
    kind: EncryptionConfiguration
    apiVersion: apiserver.config.k8s.io/v1
    resources:
      - resources:
        - secrets
        providers:
        - aescbc:
            keys:
            - name: key1
              secret: F3rax7e5B/gGbAR8LLLLbPAp+R4W8KGXKjXfhTp8bb0=
            - name: key2
              secret: yuat0/ntgNh8d4NJwkWWSCdi7/WCYJ7AGfjTSU1XKHE=
```

and after created it, I configured my kube-apiserver.yaml like below.

```yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --advertise-address=xx.x.xxx.xxx
    - --allow-privileged=true
    - --authorization-mode=Node,RBAC
    - --client-ca-file=/path/to/my/ca.crt
    - --enable-admission-plugins=NodeRestriction
    - --enable-bootstrap-token-auth=true
    - --etcd-cafile=/path/to/my/etcd/ca.crt
    - --etcd-certfile=/path/to/my/apiserver-etcd-client.crt
    - --etcd-keyfile=/path/to/my/apiserver-etcd-client.key
    - --etcd-servers=https://127.0.0.1:2379
    - --encryption-provider-config=/path/to/enc/encryption_conf.yaml
    - --insecure-port=0
    - --kubelet-client-certificate=/path/to/myapiserver-kubelet-client.crt
    - --kubelet-client-key=/path/to/my/apiserver-kubelet-client.key
    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    - --proxy-client-cert-file=/path/to/my/front-proxy-client.crt
    - --proxy-client-key-file=/path/to/my/front-proxy-client.key
    - --requestheader-allowed-names=front-proxy-client
    - --requestheader-client-ca-file=/path/to/my/front-proxy-ca.crt
    - --requestheader-extra-headers-prefix=X-Remote-Extra-
    - --requestheader-group-headers=X-Remote-Group
    - --requestheader-username-headers=X-Remote-User
    - --secure-port=6443
    - --service-account-key-file=/path/to/my/sa.pub
    - --service-cluster-ip-range=10.96.0.0/12
    - --tls-cert-file=/path/to/my/apiserver.crt
    - --tls-private-key-file=/path/to/my/apiserver.key
    image: k8s.gcr.io/kube-apiserver:v1.14.0
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: xx.x.xxx.xxx
        path: /healthz
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 15
      timeoutSeconds: 15
    name: kube-apiserver
    resources:
      requests:
        cpu: 250m
    volumeMounts:
    - mountPath: /path/to/enc
      name: encryption-conf
      readOnly: true
  ...
  hostNetwork: true
  priorityClassName: system-cluster-critical
  volumes:
  - hostPath:
      path: /path/to/enc
      type: DirectoryOrCreate
    name: encryption-conf
 ...
status: {}
```

after restarting apiserver, `unable to transform key ""/registry/secrets/default/default-token-xxx"": no matching prefix found` appeared.

**environment**

- Ubuntu Server 18.04
- build cluster by using kubeadm(v1.14.0)
- `kubectl version`: v1.14.0
- cni:  Calico(v3.5)

/kind bug",cluster-ip-range,Kubernetes,,1
35,69850.0,"Microsoft.AspNetCore.Session.SessionMiddleware[7]
      Error unprotecting the session cookie.
System.Security.Cryptography.CryptographicException: The key {d13b9581-1fee-45c2-ad1b-e89680402540} was not found in the key ring.
   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.UnprotectCore(Byte[] protectedData, Boolean allowOperationsOnRevokedKeys, UnprotectStatus& status)
   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.DangerousUnprotect(Byte[] protectedData, Boolean ignoreRevocationErrors, Boolean& requiresMigration, Boolean& wasRevoked)
   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.Unprotect(Byte[] protectedData)
   at Microsoft.AspNetCore.Session.CookieProtection.Unprotect(IDataProtector protector, String protectedText, ILogger logger)",d13b9581-1fee-45c2-ad1b-e89680402540,Kubernetes,,1
36,69850.0,"Microsoft.AspNetCore.Session.SessionMiddleware[7]
      Error unprotecting the session cookie.
System.Security.Cryptography.CryptographicException: The key {d13b9581-1fee-45c2-ad1b-e89680402540} was not found in the key ring.
   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.UnprotectCore(Byte[] protectedData, Boolean allowOperationsOnRevokedKeys, UnprotectStatus& status)
   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.DangerousUnprotect(Byte[] protectedData, Boolean ignoreRevocationErrors, Boolean& requiresMigration, Boolean& wasRevoked)
   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.Unprotect(Byte[] protectedData)
   at Microsoft.AspNetCore.Session.CookieProtection.Unprotect(IDataProtector protector, String protectedText, ILogger logger)",ad1b-e89680402540,Kubernetes,,1
37,63435.0,"<!-- This form is for bug reports and feature requests ONLY!

If you're looking for help check [Stack Overflow](https://stackoverflow.com/questions/tagged/kubernetes) and the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).

If this may be security issue, please disclose it privately via https://kubernetes.io/security/.
-->

**Is this a BUG REPORT or FEATURE REQUEST?**:

> Uncomment only one, leave it on its own line:
>

/kind bug

> /kind feature


**What happened**:

```
root@gyliu-ubuntu-1:~/multicluster# kubectl config set-credentials --help
Sets a user entry in kubeconfig

Specifying a name that already exists will merge new fields on top of existing values.

  Client-certificate flags:
  --client-certificate=certfile --client-key=keyfile

  Bearer token flags:
    --token=bearer_token

  Basic auth flags:
    --username=basic_user --password=basic_password

Bearer token and basic auth are mutually exclusive.

Examples:
  # Set only the ""client-key"" field on the ""cluster-admin""
  # entry, without touching other values:
  kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

  # Set basic auth for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

  # Embed client certificate data in the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

  # Enable the Google Compute Platform auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=gcp

  # Enable the OpenID Connect auth provider for the ""cluster-admin"" entry with additional args
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo
--auth-provider-arg=client-secret=bar

  # Remove the ""client-secret"" config value for the OpenID Connect auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

Options:
      --auth-provider='': Auth provider for the user entry in kubeconfig
      --auth-provider-arg=[]: 'key=value' arguments for the auth provider
      --client-certificate='': Path to client-certificate file for the user entry in kubeconfig
      --client-key='': Path to client-key file for the user entry in kubeconfig
      --embed-certs=false: Embed client cert/key for the user entry in kubeconfig
      --password='': password for the user entry in kubeconfig
      --token='': token for the user entry in kubeconfig
      --username='': username for the user entry in kubeconfig

Usage:
  kubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile]
[--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name]
[--auth-provider-arg=key=value] [options]

Use ""kubectl options"" for a list of global command-line options (applies to all commands).
```

From above, we can see I have to use file name for certificate and key.
```
--client-certificate='': Path to client-certificate file for the user entry in kubeconfig
--client-key='': Path to client-key file for the user entry in kubeconfig
```

If I want to use content string of the certificate and key, I have to update `$HOME/.kube/config` manually by changing `client-certificate` to `client-certificate-data`, and change `client-key` to `client-key-data`.

```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://9.111.255.21:8001
  name: myistio.icp
contexts:
- context:
    cluster: myistio.icp
    namespace: default
    user: admin
  name: myistio.icp-context
current-context: myistio.icp-context
kind: Config
preferences: {}
users:
- name: admin
  user:
    as-user-extra: {}
    client-certificate-data: <xxxx>
    client-key-data: <xxxx>
```

/sig security",certificate=path,Kubernetes,,1
38,63435.0,"<!-- This form is for bug reports and feature requests ONLY!

If you're looking for help check [Stack Overflow](https://stackoverflow.com/questions/tagged/kubernetes) and the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).

If this may be security issue, please disclose it privately via https://kubernetes.io/security/.
-->

**Is this a BUG REPORT or FEATURE REQUEST?**:

> Uncomment only one, leave it on its own line:
>

/kind bug

> /kind feature


**What happened**:

```
root@gyliu-ubuntu-1:~/multicluster# kubectl config set-credentials --help
Sets a user entry in kubeconfig

Specifying a name that already exists will merge new fields on top of existing values.

  Client-certificate flags:
  --client-certificate=certfile --client-key=keyfile

  Bearer token flags:
    --token=bearer_token

  Basic auth flags:
    --username=basic_user --password=basic_password

Bearer token and basic auth are mutually exclusive.

Examples:
  # Set only the ""client-key"" field on the ""cluster-admin""
  # entry, without touching other values:
  kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

  # Set basic auth for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

  # Embed client certificate data in the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

  # Enable the Google Compute Platform auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=gcp

  # Enable the OpenID Connect auth provider for the ""cluster-admin"" entry with additional args
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo
--auth-provider-arg=client-secret=bar

  # Remove the ""client-secret"" config value for the OpenID Connect auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

Options:
      --auth-provider='': Auth provider for the user entry in kubeconfig
      --auth-provider-arg=[]: 'key=value' arguments for the auth provider
      --client-certificate='': Path to client-certificate file for the user entry in kubeconfig
      --client-key='': Path to client-key file for the user entry in kubeconfig
      --embed-certs=false: Embed client cert/key for the user entry in kubeconfig
      --password='': password for the user entry in kubeconfig
      --token='': token for the user entry in kubeconfig
      --username='': username for the user entry in kubeconfig

Usage:
  kubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile]
[--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name]
[--auth-provider-arg=key=value] [options]

Use ""kubectl options"" for a list of global command-line options (applies to all commands).
```

From above, we can see I have to use file name for certificate and key.
```
--client-certificate='': Path to client-certificate file for the user entry in kubeconfig
--client-key='': Path to client-key file for the user entry in kubeconfig
```

If I want to use content string of the certificate and key, I have to update `$HOME/.kube/config` manually by changing `client-certificate` to `client-certificate-data`, and change `client-key` to `client-key-data`.

```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://9.111.255.21:8001
  name: myistio.icp
contexts:
- context:
    cluster: myistio.icp
    namespace: default
    user: admin
  name: myistio.icp-context
current-context: myistio.icp-context
kind: Config
preferences: {}
users:
- name: admin
  user:
    as-user-extra: {}
    client-certificate-data: <xxxx>
    client-key-data: <xxxx>
```

/sig security",provider=provider_name,Kubernetes,,1
39,63435.0,"<!-- This form is for bug reports and feature requests ONLY!

If you're looking for help check [Stack Overflow](https://stackoverflow.com/questions/tagged/kubernetes) and the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).

If this may be security issue, please disclose it privately via https://kubernetes.io/security/.
-->

**Is this a BUG REPORT or FEATURE REQUEST?**:

> Uncomment only one, leave it on its own line:
>

/kind bug

> /kind feature


**What happened**:

```
root@gyliu-ubuntu-1:~/multicluster# kubectl config set-credentials --help
Sets a user entry in kubeconfig

Specifying a name that already exists will merge new fields on top of existing values.

  Client-certificate flags:
  --client-certificate=certfile --client-key=keyfile

  Bearer token flags:
    --token=bearer_token

  Basic auth flags:
    --username=basic_user --password=basic_password

Bearer token and basic auth are mutually exclusive.

Examples:
  # Set only the ""client-key"" field on the ""cluster-admin""
  # entry, without touching other values:
  kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

  # Set basic auth for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

  # Embed client certificate data in the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

  # Enable the Google Compute Platform auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=gcp

  # Enable the OpenID Connect auth provider for the ""cluster-admin"" entry with additional args
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo
--auth-provider-arg=client-secret=bar

  # Remove the ""client-secret"" config value for the OpenID Connect auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

Options:
      --auth-provider='': Auth provider for the user entry in kubeconfig
      --auth-provider-arg=[]: 'key=value' arguments for the auth provider
      --client-certificate='': Path to client-certificate file for the user entry in kubeconfig
      --client-key='': Path to client-key file for the user entry in kubeconfig
      --embed-certs=false: Embed client cert/key for the user entry in kubeconfig
      --password='': password for the user entry in kubeconfig
      --token='': token for the user entry in kubeconfig
      --username='': username for the user entry in kubeconfig

Usage:
  kubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile]
[--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name]
[--auth-provider-arg=key=value] [options]

Use ""kubectl options"" for a list of global command-line options (applies to all commands).
```

From above, we can see I have to use file name for certificate and key.
```
--client-certificate='': Path to client-certificate file for the user entry in kubeconfig
--client-key='': Path to client-key file for the user entry in kubeconfig
```

If I want to use content string of the certificate and key, I have to update `$HOME/.kube/config` manually by changing `client-certificate` to `client-certificate-data`, and change `client-key` to `client-key-data`.

```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://9.111.255.21:8001
  name: myistio.icp
contexts:
- context:
    cluster: myistio.icp
    namespace: default
    user: admin
  name: myistio.icp-context
current-context: myistio.icp-context
kind: Config
preferences: {}
users:
- name: admin
  user:
    as-user-extra: {}
    client-certificate-data: <xxxx>
    client-key-data: <xxxx>
```

/sig security",token=bearer_token,Kubernetes,,1
40,63435.0,"<!-- This form is for bug reports and feature requests ONLY!

If you're looking for help check [Stack Overflow](https://stackoverflow.com/questions/tagged/kubernetes) and the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).

If this may be security issue, please disclose it privately via https://kubernetes.io/security/.
-->

**Is this a BUG REPORT or FEATURE REQUEST?**:

> Uncomment only one, leave it on its own line:
>

/kind bug

> /kind feature


**What happened**:

```
root@gyliu-ubuntu-1:~/multicluster# kubectl config set-credentials --help
Sets a user entry in kubeconfig

Specifying a name that already exists will merge new fields on top of existing values.

  Client-certificate flags:
  --client-certificate=certfile --client-key=keyfile

  Bearer token flags:
    --token=bearer_token

  Basic auth flags:
    --username=basic_user --password=basic_password

Bearer token and basic auth are mutually exclusive.

Examples:
  # Set only the ""client-key"" field on the ""cluster-admin""
  # entry, without touching other values:
  kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

  # Set basic auth for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

  # Embed client certificate data in the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

  # Enable the Google Compute Platform auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=gcp

  # Enable the OpenID Connect auth provider for the ""cluster-admin"" entry with additional args
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo
--auth-provider-arg=client-secret=bar

  # Remove the ""client-secret"" config value for the OpenID Connect auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

Options:
      --auth-provider='': Auth provider for the user entry in kubeconfig
      --auth-provider-arg=[]: 'key=value' arguments for the auth provider
      --client-certificate='': Path to client-certificate file for the user entry in kubeconfig
      --client-key='': Path to client-key file for the user entry in kubeconfig
      --embed-certs=false: Embed client cert/key for the user entry in kubeconfig
      --password='': password for the user entry in kubeconfig
      --token='': token for the user entry in kubeconfig
      --username='': username for the user entry in kubeconfig

Usage:
  kubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile]
[--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name]
[--auth-provider-arg=key=value] [options]

Use ""kubectl options"" for a list of global command-line options (applies to all commands).
```

From above, we can see I have to use file name for certificate and key.
```
--client-certificate='': Path to client-certificate file for the user entry in kubeconfig
--client-key='': Path to client-key file for the user entry in kubeconfig
```

If I want to use content string of the certificate and key, I have to update `$HOME/.kube/config` manually by changing `client-certificate` to `client-certificate-data`, and change `client-key` to `client-key-data`.

```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://9.111.255.21:8001
  name: myistio.icp
contexts:
- context:
    cluster: myistio.icp
    namespace: default
    user: admin
  name: myistio.icp-context
current-context: myistio.icp-context
kind: Config
preferences: {}
users:
- name: admin
  user:
    as-user-extra: {}
    client-certificate-data: <xxxx>
    client-key-data: <xxxx>
```

/sig security",=uXFGweU9l35qcif,Kubernetes,1,1
41,63435.0,"<!-- This form is for bug reports and feature requests ONLY!

If you're looking for help check [Stack Overflow](https://stackoverflow.com/questions/tagged/kubernetes) and the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).

If this may be security issue, please disclose it privately via https://kubernetes.io/security/.
-->

**Is this a BUG REPORT or FEATURE REQUEST?**:

> Uncomment only one, leave it on its own line:
>

/kind bug

> /kind feature


**What happened**:

```
root@gyliu-ubuntu-1:~/multicluster# kubectl config set-credentials --help
Sets a user entry in kubeconfig

Specifying a name that already exists will merge new fields on top of existing values.

  Client-certificate flags:
  --client-certificate=certfile --client-key=keyfile

  Bearer token flags:
    --token=bearer_token

  Basic auth flags:
    --username=basic_user --password=basic_password

Bearer token and basic auth are mutually exclusive.

Examples:
  # Set only the ""client-key"" field on the ""cluster-admin""
  # entry, without touching other values:
  kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

  # Set basic auth for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

  # Embed client certificate data in the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

  # Enable the Google Compute Platform auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=gcp

  # Enable the OpenID Connect auth provider for the ""cluster-admin"" entry with additional args
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo
--auth-provider-arg=client-secret=bar

  # Remove the ""client-secret"" config value for the OpenID Connect auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

Options:
      --auth-provider='': Auth provider for the user entry in kubeconfig
      --auth-provider-arg=[]: 'key=value' arguments for the auth provider
      --client-certificate='': Path to client-certificate file for the user entry in kubeconfig
      --client-key='': Path to client-key file for the user entry in kubeconfig
      --embed-certs=false: Embed client cert/key for the user entry in kubeconfig
      --password='': password for the user entry in kubeconfig
      --token='': token for the user entry in kubeconfig
      --username='': username for the user entry in kubeconfig

Usage:
  kubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile]
[--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name]
[--auth-provider-arg=key=value] [options]

Use ""kubectl options"" for a list of global command-line options (applies to all commands).
```

From above, we can see I have to use file name for certificate and key.
```
--client-certificate='': Path to client-certificate file for the user entry in kubeconfig
--client-key='': Path to client-key file for the user entry in kubeconfig
```

If I want to use content string of the certificate and key, I have to update `$HOME/.kube/config` manually by changing `client-certificate` to `client-certificate-data`, and change `client-key` to `client-key-data`.

```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://9.111.255.21:8001
  name: myistio.icp
contexts:
- context:
    cluster: myistio.icp
    namespace: default
    user: admin
  name: myistio.icp-context
current-context: myistio.icp-context
kind: Config
preferences: {}
users:
- name: admin
  user:
    as-user-extra: {}
    client-certificate-data: <xxxx>
    client-key-data: <xxxx>
```

/sig security",auth-provider=gcp,Kubernetes,,1
42,63435.0,"<!-- This form is for bug reports and feature requests ONLY!

If you're looking for help check [Stack Overflow](https://stackoverflow.com/questions/tagged/kubernetes) and the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).

If this may be security issue, please disclose it privately via https://kubernetes.io/security/.
-->

**Is this a BUG REPORT or FEATURE REQUEST?**:

> Uncomment only one, leave it on its own line:
>

/kind bug

> /kind feature


**What happened**:

```
root@gyliu-ubuntu-1:~/multicluster# kubectl config set-credentials --help
Sets a user entry in kubeconfig

Specifying a name that already exists will merge new fields on top of existing values.

  Client-certificate flags:
  --client-certificate=certfile --client-key=keyfile

  Bearer token flags:
    --token=bearer_token

  Basic auth flags:
    --username=basic_user --password=basic_password

Bearer token and basic auth are mutually exclusive.

Examples:
  # Set only the ""client-key"" field on the ""cluster-admin""
  # entry, without touching other values:
  kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

  # Set basic auth for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

  # Embed client certificate data in the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

  # Enable the Google Compute Platform auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=gcp

  # Enable the OpenID Connect auth provider for the ""cluster-admin"" entry with additional args
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo
--auth-provider-arg=client-secret=bar

  # Remove the ""client-secret"" config value for the OpenID Connect auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

Options:
      --auth-provider='': Auth provider for the user entry in kubeconfig
      --auth-provider-arg=[]: 'key=value' arguments for the auth provider
      --client-certificate='': Path to client-certificate file for the user entry in kubeconfig
      --client-key='': Path to client-key file for the user entry in kubeconfig
      --embed-certs=false: Embed client cert/key for the user entry in kubeconfig
      --password='': password for the user entry in kubeconfig
      --token='': token for the user entry in kubeconfig
      --username='': username for the user entry in kubeconfig

Usage:
  kubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile]
[--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name]
[--auth-provider-arg=key=value] [options]

Use ""kubectl options"" for a list of global command-line options (applies to all commands).
```

From above, we can see I have to use file name for certificate and key.
```
--client-certificate='': Path to client-certificate file for the user entry in kubeconfig
--client-key='': Path to client-key file for the user entry in kubeconfig
```

If I want to use content string of the certificate and key, I have to update `$HOME/.kube/config` manually by changing `client-certificate` to `client-certificate-data`, and change `client-key` to `client-key-data`.

```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://9.111.255.21:8001
  name: myistio.icp
contexts:
- context:
    cluster: myistio.icp
    namespace: default
    user: admin
  name: myistio.icp-context
current-context: myistio.icp-context
kind: Config
preferences: {}
users:
- name: admin
  user:
    as-user-extra: {}
    client-certificate-data: <xxxx>
    client-key-data: <xxxx>
```

/sig security",client-certificate,Kubernetes,,1
43,63435.0,"<!-- This form is for bug reports and feature requests ONLY!

If you're looking for help check [Stack Overflow](https://stackoverflow.com/questions/tagged/kubernetes) and the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).

If this may be security issue, please disclose it privately via https://kubernetes.io/security/.
-->

**Is this a BUG REPORT or FEATURE REQUEST?**:

> Uncomment only one, leave it on its own line:
>

/kind bug

> /kind feature


**What happened**:

```
root@gyliu-ubuntu-1:~/multicluster# kubectl config set-credentials --help
Sets a user entry in kubeconfig

Specifying a name that already exists will merge new fields on top of existing values.

  Client-certificate flags:
  --client-certificate=certfile --client-key=keyfile

  Bearer token flags:
    --token=bearer_token

  Basic auth flags:
    --username=basic_user --password=basic_password

Bearer token and basic auth are mutually exclusive.

Examples:
  # Set only the ""client-key"" field on the ""cluster-admin""
  # entry, without touching other values:
  kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

  # Set basic auth for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

  # Embed client certificate data in the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

  # Enable the Google Compute Platform auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=gcp

  # Enable the OpenID Connect auth provider for the ""cluster-admin"" entry with additional args
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo
--auth-provider-arg=client-secret=bar

  # Remove the ""client-secret"" config value for the OpenID Connect auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

Options:
      --auth-provider='': Auth provider for the user entry in kubeconfig
      --auth-provider-arg=[]: 'key=value' arguments for the auth provider
      --client-certificate='': Path to client-certificate file for the user entry in kubeconfig
      --client-key='': Path to client-key file for the user entry in kubeconfig
      --embed-certs=false: Embed client cert/key for the user entry in kubeconfig
      --password='': password for the user entry in kubeconfig
      --token='': token for the user entry in kubeconfig
      --username='': username for the user entry in kubeconfig

Usage:
  kubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile]
[--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name]
[--auth-provider-arg=key=value] [options]

Use ""kubectl options"" for a list of global command-line options (applies to all commands).
```

From above, we can see I have to use file name for certificate and key.
```
--client-certificate='': Path to client-certificate file for the user entry in kubeconfig
--client-key='': Path to client-key file for the user entry in kubeconfig
```

If I want to use content string of the certificate and key, I have to update `$HOME/.kube/config` manually by changing `client-certificate` to `client-certificate-data`, and change `client-key` to `client-key-data`.

```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://9.111.255.21:8001
  name: myistio.icp
contexts:
- context:
    cluster: myistio.icp
    namespace: default
    user: admin
  name: myistio.icp-context
current-context: myistio.icp-context
kind: Config
preferences: {}
users:
- name: admin
  user:
    as-user-extra: {}
    client-certificate-data: <xxxx>
    client-key-data: <xxxx>
```

/sig security",auth-provider=oidc,Kubernetes,,1
44,63435.0,"<!-- This form is for bug reports and feature requests ONLY!

If you're looking for help check [Stack Overflow](https://stackoverflow.com/questions/tagged/kubernetes) and the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).

If this may be security issue, please disclose it privately via https://kubernetes.io/security/.
-->

**Is this a BUG REPORT or FEATURE REQUEST?**:

> Uncomment only one, leave it on its own line:
>

/kind bug

> /kind feature


**What happened**:

```
root@gyliu-ubuntu-1:~/multicluster# kubectl config set-credentials --help
Sets a user entry in kubeconfig

Specifying a name that already exists will merge new fields on top of existing values.

  Client-certificate flags:
  --client-certificate=certfile --client-key=keyfile

  Bearer token flags:
    --token=bearer_token

  Basic auth flags:
    --username=basic_user --password=basic_password

Bearer token and basic auth are mutually exclusive.

Examples:
  # Set only the ""client-key"" field on the ""cluster-admin""
  # entry, without touching other values:
  kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

  # Set basic auth for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

  # Embed client certificate data in the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

  # Enable the Google Compute Platform auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=gcp

  # Enable the OpenID Connect auth provider for the ""cluster-admin"" entry with additional args
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo
--auth-provider-arg=client-secret=bar

  # Remove the ""client-secret"" config value for the OpenID Connect auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

Options:
      --auth-provider='': Auth provider for the user entry in kubeconfig
      --auth-provider-arg=[]: 'key=value' arguments for the auth provider
      --client-certificate='': Path to client-certificate file for the user entry in kubeconfig
      --client-key='': Path to client-key file for the user entry in kubeconfig
      --embed-certs=false: Embed client cert/key for the user entry in kubeconfig
      --password='': password for the user entry in kubeconfig
      --token='': token for the user entry in kubeconfig
      --username='': username for the user entry in kubeconfig

Usage:
  kubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile]
[--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name]
[--auth-provider-arg=key=value] [options]

Use ""kubectl options"" for a list of global command-line options (applies to all commands).
```

From above, we can see I have to use file name for certificate and key.
```
--client-certificate='': Path to client-certificate file for the user entry in kubeconfig
--client-key='': Path to client-key file for the user entry in kubeconfig
```

If I want to use content string of the certificate and key, I have to update `$HOME/.kube/config` manually by changing `client-certificate` to `client-certificate-data`, and change `client-key` to `client-key-data`.

```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://9.111.255.21:8001
  name: myistio.icp
contexts:
- context:
    cluster: myistio.icp
    namespace: default
    user: admin
  name: myistio.icp-context
current-context: myistio.icp-context
kind: Config
preferences: {}
users:
- name: admin
  user:
    as-user-extra: {}
    client-certificate-data: <xxxx>
    client-key-data: <xxxx>
```

/sig security",certificate=~=true,Kubernetes,,1
45,63435.0,"<!-- This form is for bug reports and feature requests ONLY!

If you're looking for help check [Stack Overflow](https://stackoverflow.com/questions/tagged/kubernetes) and the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).

If this may be security issue, please disclose it privately via https://kubernetes.io/security/.
-->

**Is this a BUG REPORT or FEATURE REQUEST?**:

> Uncomment only one, leave it on its own line:
>

/kind bug

> /kind feature


**What happened**:

```
root@gyliu-ubuntu-1:~/multicluster# kubectl config set-credentials --help
Sets a user entry in kubeconfig

Specifying a name that already exists will merge new fields on top of existing values.

  Client-certificate flags:
  --client-certificate=certfile --client-key=keyfile

  Bearer token flags:
    --token=bearer_token

  Basic auth flags:
    --username=basic_user --password=basic_password

Bearer token and basic auth are mutually exclusive.

Examples:
  # Set only the ""client-key"" field on the ""cluster-admin""
  # entry, without touching other values:
  kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

  # Set basic auth for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

  # Embed client certificate data in the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

  # Enable the Google Compute Platform auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=gcp

  # Enable the OpenID Connect auth provider for the ""cluster-admin"" entry with additional args
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo
--auth-provider-arg=client-secret=bar

  # Remove the ""client-secret"" config value for the OpenID Connect auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

Options:
      --auth-provider='': Auth provider for the user entry in kubeconfig
      --auth-provider-arg=[]: 'key=value' arguments for the auth provider
      --client-certificate='': Path to client-certificate file for the user entry in kubeconfig
      --client-key='': Path to client-key file for the user entry in kubeconfig
      --embed-certs=false: Embed client cert/key for the user entry in kubeconfig
      --password='': password for the user entry in kubeconfig
      --token='': token for the user entry in kubeconfig
      --username='': username for the user entry in kubeconfig

Usage:
  kubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile]
[--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name]
[--auth-provider-arg=key=value] [options]

Use ""kubectl options"" for a list of global command-line options (applies to all commands).
```

From above, we can see I have to use file name for certificate and key.
```
--client-certificate='': Path to client-certificate file for the user entry in kubeconfig
--client-key='': Path to client-key file for the user entry in kubeconfig
```

If I want to use content string of the certificate and key, I have to update `$HOME/.kube/config` manually by changing `client-certificate` to `client-certificate-data`, and change `client-key` to `client-key-data`.

```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://9.111.255.21:8001
  name: myistio.icp
contexts:
- context:
    cluster: myistio.icp
    namespace: default
    user: admin
  name: myistio.icp-context
current-context: myistio.icp-context
kind: Config
preferences: {}
users:
- name: admin
  user:
    as-user-extra: {}
    client-certificate-data: <xxxx>
    client-key-data: <xxxx>
```

/sig security",username=basic_user,Kubernetes,,1
46,63435.0,"<!-- This form is for bug reports and feature requests ONLY!

If you're looking for help check [Stack Overflow](https://stackoverflow.com/questions/tagged/kubernetes) and the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).

If this may be security issue, please disclose it privately via https://kubernetes.io/security/.
-->

**Is this a BUG REPORT or FEATURE REQUEST?**:

> Uncomment only one, leave it on its own line:
>

/kind bug

> /kind feature


**What happened**:

```
root@gyliu-ubuntu-1:~/multicluster# kubectl config set-credentials --help
Sets a user entry in kubeconfig

Specifying a name that already exists will merge new fields on top of existing values.

  Client-certificate flags:
  --client-certificate=certfile --client-key=keyfile

  Bearer token flags:
    --token=bearer_token

  Basic auth flags:
    --username=basic_user --password=basic_password

Bearer token and basic auth are mutually exclusive.

Examples:
  # Set only the ""client-key"" field on the ""cluster-admin""
  # entry, without touching other values:
  kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

  # Set basic auth for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

  # Embed client certificate data in the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

  # Enable the Google Compute Platform auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=gcp

  # Enable the OpenID Connect auth provider for the ""cluster-admin"" entry with additional args
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo
--auth-provider-arg=client-secret=bar

  # Remove the ""client-secret"" config value for the OpenID Connect auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

Options:
      --auth-provider='': Auth provider for the user entry in kubeconfig
      --auth-provider-arg=[]: 'key=value' arguments for the auth provider
      --client-certificate='': Path to client-certificate file for the user entry in kubeconfig
      --client-key='': Path to client-key file for the user entry in kubeconfig
      --embed-certs=false: Embed client cert/key for the user entry in kubeconfig
      --password='': password for the user entry in kubeconfig
      --token='': token for the user entry in kubeconfig
      --username='': username for the user entry in kubeconfig

Usage:
  kubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile]
[--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name]
[--auth-provider-arg=key=value] [options]

Use ""kubectl options"" for a list of global command-line options (applies to all commands).
```

From above, we can see I have to use file name for certificate and key.
```
--client-certificate='': Path to client-certificate file for the user entry in kubeconfig
--client-key='': Path to client-key file for the user entry in kubeconfig
```

If I want to use content string of the certificate and key, I have to update `$HOME/.kube/config` manually by changing `client-certificate` to `client-certificate-data`, and change `client-key` to `client-key-data`.

```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://9.111.255.21:8001
  name: myistio.icp
contexts:
- context:
    cluster: myistio.icp
    namespace: default
    user: admin
  name: myistio.icp-context
current-context: myistio.icp-context
kind: Config
preferences: {}
users:
- name: admin
  user:
    as-user-extra: {}
    client-certificate-data: <xxxx>
    client-key-data: <xxxx>
```

/sig security",mutually,Kubernetes,,1
47,63435.0,"<!-- This form is for bug reports and feature requests ONLY!

If you're looking for help check [Stack Overflow](https://stackoverflow.com/questions/tagged/kubernetes) and the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).

If this may be security issue, please disclose it privately via https://kubernetes.io/security/.
-->

**Is this a BUG REPORT or FEATURE REQUEST?**:

> Uncomment only one, leave it on its own line:
>

/kind bug

> /kind feature


**What happened**:

```
root@gyliu-ubuntu-1:~/multicluster# kubectl config set-credentials --help
Sets a user entry in kubeconfig

Specifying a name that already exists will merge new fields on top of existing values.

  Client-certificate flags:
  --client-certificate=certfile --client-key=keyfile

  Bearer token flags:
    --token=bearer_token

  Basic auth flags:
    --username=basic_user --password=basic_password

Bearer token and basic auth are mutually exclusive.

Examples:
  # Set only the ""client-key"" field on the ""cluster-admin""
  # entry, without touching other values:
  kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

  # Set basic auth for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

  # Embed client certificate data in the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

  # Enable the Google Compute Platform auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=gcp

  # Enable the OpenID Connect auth provider for the ""cluster-admin"" entry with additional args
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo
--auth-provider-arg=client-secret=bar

  # Remove the ""client-secret"" config value for the OpenID Connect auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

Options:
      --auth-provider='': Auth provider for the user entry in kubeconfig
      --auth-provider-arg=[]: 'key=value' arguments for the auth provider
      --client-certificate='': Path to client-certificate file for the user entry in kubeconfig
      --client-key='': Path to client-key file for the user entry in kubeconfig
      --embed-certs=false: Embed client cert/key for the user entry in kubeconfig
      --password='': password for the user entry in kubeconfig
      --token='': token for the user entry in kubeconfig
      --username='': username for the user entry in kubeconfig

Usage:
  kubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile]
[--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name]
[--auth-provider-arg=key=value] [options]

Use ""kubectl options"" for a list of global command-line options (applies to all commands).
```

From above, we can see I have to use file name for certificate and key.
```
--client-certificate='': Path to client-certificate file for the user entry in kubeconfig
--client-key='': Path to client-key file for the user entry in kubeconfig
```

If I want to use content string of the certificate and key, I have to update `$HOME/.kube/config` manually by changing `client-certificate` to `client-certificate-data`, and change `client-key` to `client-key-data`.

```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://9.111.255.21:8001
  name: myistio.icp
contexts:
- context:
    cluster: myistio.icp
    namespace: default
    user: admin
  name: myistio.icp-context
current-context: myistio.icp-context
kind: Config
preferences: {}
users:
- name: admin
  user:
    as-user-extra: {}
    client-certificate-data: <xxxx>
    client-key-data: <xxxx>
```

/sig security",provider,Kubernetes,,1
48,63435.0,"<!-- This form is for bug reports and feature requests ONLY!

If you're looking for help check [Stack Overflow](https://stackoverflow.com/questions/tagged/kubernetes) and the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).

If this may be security issue, please disclose it privately via https://kubernetes.io/security/.
-->

**Is this a BUG REPORT or FEATURE REQUEST?**:

> Uncomment only one, leave it on its own line:
>

/kind bug

> /kind feature


**What happened**:

```
root@gyliu-ubuntu-1:~/multicluster# kubectl config set-credentials --help
Sets a user entry in kubeconfig

Specifying a name that already exists will merge new fields on top of existing values.

  Client-certificate flags:
  --client-certificate=certfile --client-key=keyfile

  Bearer token flags:
    --token=bearer_token

  Basic auth flags:
    --username=basic_user --password=basic_password

Bearer token and basic auth are mutually exclusive.

Examples:
  # Set only the ""client-key"" field on the ""cluster-admin""
  # entry, without touching other values:
  kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

  # Set basic auth for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

  # Embed client certificate data in the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

  # Enable the Google Compute Platform auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=gcp

  # Enable the OpenID Connect auth provider for the ""cluster-admin"" entry with additional args
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo
--auth-provider-arg=client-secret=bar

  # Remove the ""client-secret"" config value for the OpenID Connect auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

Options:
      --auth-provider='': Auth provider for the user entry in kubeconfig
      --auth-provider-arg=[]: 'key=value' arguments for the auth provider
      --client-certificate='': Path to client-certificate file for the user entry in kubeconfig
      --client-key='': Path to client-key file for the user entry in kubeconfig
      --embed-certs=false: Embed client cert/key for the user entry in kubeconfig
      --password='': password for the user entry in kubeconfig
      --token='': token for the user entry in kubeconfig
      --username='': username for the user entry in kubeconfig

Usage:
  kubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile]
[--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name]
[--auth-provider-arg=key=value] [options]

Use ""kubectl options"" for a list of global command-line options (applies to all commands).
```

From above, we can see I have to use file name for certificate and key.
```
--client-certificate='': Path to client-certificate file for the user entry in kubeconfig
--client-key='': Path to client-key file for the user entry in kubeconfig
```

If I want to use content string of the certificate and key, I have to update `$HOME/.kube/config` manually by changing `client-certificate` to `client-certificate-data`, and change `client-key` to `client-key-data`.

```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://9.111.255.21:8001
  name: myistio.icp
contexts:
- context:
    cluster: myistio.icp
    namespace: default
    user: admin
  name: myistio.icp-context
current-context: myistio.icp-context
kind: Config
preferences: {}
users:
- name: admin
  user:
    as-user-extra: {}
    client-certificate-data: <xxxx>
    client-key-data: <xxxx>
```

/sig security",kubeconfig,Kubernetes,,1
49,63435.0,"<!-- This form is for bug reports and feature requests ONLY!

If you're looking for help check [Stack Overflow](https://stackoverflow.com/questions/tagged/kubernetes) and the [troubleshooting guide](https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/).

If this may be security issue, please disclose it privately via https://kubernetes.io/security/.
-->

**Is this a BUG REPORT or FEATURE REQUEST?**:

> Uncomment only one, leave it on its own line:
>

/kind bug

> /kind feature


**What happened**:

```
root@gyliu-ubuntu-1:~/multicluster# kubectl config set-credentials --help
Sets a user entry in kubeconfig

Specifying a name that already exists will merge new fields on top of existing values.

  Client-certificate flags:
  --client-certificate=certfile --client-key=keyfile

  Bearer token flags:
    --token=bearer_token

  Basic auth flags:
    --username=basic_user --password=basic_password

Bearer token and basic auth are mutually exclusive.

Examples:
  # Set only the ""client-key"" field on the ""cluster-admin""
  # entry, without touching other values:
  kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

  # Set basic auth for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

  # Embed client certificate data in the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

  # Enable the Google Compute Platform auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=gcp

  # Enable the OpenID Connect auth provider for the ""cluster-admin"" entry with additional args
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo
--auth-provider-arg=client-secret=bar

  # Remove the ""client-secret"" config value for the OpenID Connect auth provider for the ""cluster-admin"" entry
  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

Options:
      --auth-provider='': Auth provider for the user entry in kubeconfig
      --auth-provider-arg=[]: 'key=value' arguments for the auth provider
      --client-certificate='': Path to client-certificate file for the user entry in kubeconfig
      --client-key='': Path to client-key file for the user entry in kubeconfig
      --embed-certs=false: Embed client cert/key for the user entry in kubeconfig
      --password='': password for the user entry in kubeconfig
      --token='': token for the user entry in kubeconfig
      --username='': username for the user entry in kubeconfig

Usage:
  kubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile]
[--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name]
[--auth-provider-arg=key=value] [options]

Use ""kubectl options"" for a list of global command-line options (applies to all commands).
```

From above, we can see I have to use file name for certificate and key.
```
--client-certificate='': Path to client-certificate file for the user entry in kubeconfig
--client-key='': Path to client-key file for the user entry in kubeconfig
```

If I want to use content string of the certificate and key, I have to update `$HOME/.kube/config` manually by changing `client-certificate` to `client-certificate-data`, and change `client-key` to `client-key-data`.

```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://9.111.255.21:8001
  name: myistio.icp
contexts:
- context:
    cluster: myistio.icp
    namespace: default
    user: admin
  name: myistio.icp-context
current-context: myistio.icp-context
kind: Config
preferences: {}
users:
- name: admin
  user:
    as-user-extra: {}
    client-certificate-data: <xxxx>
    client-key-data: <xxxx>
```

/sig security",certificate,Kubernetes,,1
50,50432.0,"**Is this a BUG REPORT or FEATURE REQUEST?**: BUG REPORT


**What happened**:
I have configured oidc with kubernetes. But when i try `kubectl --user=spnzip@gmail.com get nodes` i get `error from server (Forbidden): User ""system:anonymous"" cannot list nodes at the cluster scope. (get nodes)
`

**What you expected to happen**:
The command should authenticate user and display the nodes 

**How to reproduce it (as minimally and precisely as possible)**:
1. Install single node kubernetes cluster with kubeadm
2. Obtain client secrets with the k8s-oidc-helper tool
k8s-oidc-helper -c <path where user's client id and secret is stored)
3. copy paste the code generated to ~/.kube/config file
```
- name: spnzig@gmail.com
  user:
    auth-provider:
      config:
        client-id: xxxxxxxxxx-xxxxxxx.apps.googleusercontent.com
        client-secret: xxxxxxxxxxxxxxxxxxxxxxx
        id-token: eyJhbGciOiJSUzI1NiIsImtpZCI6IjczMTdkOTM1MWQ1Y .... njZaIWlMaAFEfIrGPy-49TQ
        idp-issuer-url: https://accounts.google.com
        refresh-token: 1/3XPbQPD...g8PuNPs
      name: oidc
```

4. Set the context for the new user in ~/.kube/config file
```
- context:
    cluster: kubernetes
    user: spnzig@gmail.com
  name: spnzig@kubernetes
```

5. Switch context from admin to new user
`kubectl config use-context spnzig@kubernetes `
 
6. Run kubectl --user=spnzig@gmail.com get nodes to see the error 
`kubectl --user=spnzig@gmail.com get nodes`

**Anything else we need to know?**:
I have installed kubernetes on Ubuntu 16.04LTS.

**Environment**:
- Kubernetes version (use `kubectl version`): v1.7.3
- Cloud provider or hardware configuration**: hardware 
- OS (e.g. from /etc/os-release): Ubuntu 16.04
- Install tools: kubeadm, kubernetes, k8s-oidc-helper, go

",xxxxxxxxxxxxxxxxxxxxxxx,Kubernetes,,1
51,50432.0,"**Is this a BUG REPORT or FEATURE REQUEST?**: BUG REPORT


**What happened**:
I have configured oidc with kubernetes. But when i try `kubectl --user=spnzip@gmail.com get nodes` i get `error from server (Forbidden): User ""system:anonymous"" cannot list nodes at the cluster scope. (get nodes)
`

**What you expected to happen**:
The command should authenticate user and display the nodes 

**How to reproduce it (as minimally and precisely as possible)**:
1. Install single node kubernetes cluster with kubeadm
2. Obtain client secrets with the k8s-oidc-helper tool
k8s-oidc-helper -c <path where user's client id and secret is stored)
3. copy paste the code generated to ~/.kube/config file
```
- name: spnzig@gmail.com
  user:
    auth-provider:
      config:
        client-id: xxxxxxxxxx-xxxxxxx.apps.googleusercontent.com
        client-secret: xxxxxxxxxxxxxxxxxxxxxxx
        id-token: eyJhbGciOiJSUzI1NiIsImtpZCI6IjczMTdkOTM1MWQ1Y .... njZaIWlMaAFEfIrGPy-49TQ
        idp-issuer-url: https://accounts.google.com
        refresh-token: 1/3XPbQPD...g8PuNPs
      name: oidc
```

4. Set the context for the new user in ~/.kube/config file
```
- context:
    cluster: kubernetes
    user: spnzig@gmail.com
  name: spnzig@kubernetes
```

5. Switch context from admin to new user
`kubectl config use-context spnzig@kubernetes `
 
6. Run kubectl --user=spnzig@gmail.com get nodes to see the error 
`kubectl --user=spnzig@gmail.com get nodes`

**Anything else we need to know?**:
I have installed kubernetes on Ubuntu 16.04LTS.

**Environment**:
- Kubernetes version (use `kubectl version`): v1.7.3
- Cloud provider or hardware configuration**: hardware 
- OS (e.g. from /etc/os-release): Ubuntu 16.04
- Install tools: kubeadm, kubernetes, k8s-oidc-helper, go

",eyJhbGciOiJSUzI1NiIsImtpZCI6IjczMTdkOTM1MWQ1Y,Kubernetes,,1
52,28263.0,"This PR allows specifying non-binary data values in `Secret` objects as `""stringData"":{""key"":""string value""}`, in addition to the existing base64 []byte serializations in the `data` field.

On write, the keys and values in the `stringData` field are merged to the `data` map, overwriting any values already present in the `data` map. The move is one-way, the `stringData` field is never output when reading from the API.

A Secret can be created like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret""},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
  },
  ""stringData"":{
    ""username"": ""myuser"",
    ""password"": ""mypassword""
  }
}
```

and when read from the API would look like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret"",...},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
    ""username"": ""bXl1c2Vy"",
    ""password"": ""bXlwYXNzd29yZA==""
  }
}
```
",stringData:{key:string,Kubernetes,,1
53,28263.0,"This PR allows specifying non-binary data values in `Secret` objects as `""stringData"":{""key"":""string value""}`, in addition to the existing base64 []byte serializations in the `data` field.

On write, the keys and values in the `stringData` field are merged to the `data` map, overwriting any values already present in the `data` map. The move is one-way, the `stringData` field is never output when reading from the API.

A Secret can be created like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret""},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
  },
  ""stringData"":{
    ""username"": ""myuser"",
    ""password"": ""mypassword""
  }
}
```

and when read from the API would look like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret"",...},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
    ""username"": ""bXl1c2Vy"",
    ""password"": ""bXlwYXNzd29yZA==""
  }
}
```
",metadata:{name:mysecret,Kubernetes,,1
54,28263.0,"This PR allows specifying non-binary data values in `Secret` objects as `""stringData"":{""key"":""string value""}`, in addition to the existing base64 []byte serializations in the `data` field.

On write, the keys and values in the `stringData` field are merged to the `data` map, overwriting any values already present in the `data` map. The move is one-way, the `stringData` field is never output when reading from the API.

A Secret can be created like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret""},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
  },
  ""stringData"":{
    ""username"": ""myuser"",
    ""password"": ""mypassword""
  }
}
```

and when read from the API would look like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret"",...},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
    ""username"": ""bXl1c2Vy"",
    ""password"": ""bXlwYXNzd29yZA==""
  }
}
```
",mypassword,Kubernetes,,1
55,28263.0,"This PR allows specifying non-binary data values in `Secret` objects as `""stringData"":{""key"":""string value""}`, in addition to the existing base64 []byte serializations in the `data` field.

On write, the keys and values in the `stringData` field are merged to the `data` map, overwriting any values already present in the `data` map. The move is one-way, the `stringData` field is never output when reading from the API.

A Secret can be created like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret""},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
  },
  ""stringData"":{
    ""username"": ""myuser"",
    ""password"": ""mypassword""
  }
}
```

and when read from the API would look like this:

```
{
  ""kind"":""Secret"",
  ""apiVersion"":""v1"",
  ""metadata"":{""name"":""mysecret"",...},
  ""data"":{
    ""image"":""<base64-encoded-jpg>""
    ""username"": ""bXl1c2Vy"",
    ""password"": ""bXlwYXNzd29yZA==""
  }
}
```
",bXlwYXNzd29yZA==,Kubernetes,1,1
56,21530.0,"[https://console.cloud.google.com/m/cloudstorage/b/kubernetes-jenkins/o/pr-logs/pull/21369/kubernetes-pull-build-test-e2e-gce/29340/build-log.txt](https://console.cloud.google.com/m/cloudstorage/b/kubernetes-jenkins/o/pr-logs/pull/21369/kubernetes-pull-build-test-e2e-gce/29340/build-log.txt)

```
鈥� Failure [11.605 seconds]
ServiceAccounts
/go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/service_accounts.go:124
  should mount an API token into pods [Conformance] [It]
  /go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/service_accounts.go:123

  ""content of file \""/var/run/secrets/kubernetes.io/serviceaccount/token\"": eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJlMmUtdGVzdHMtc3ZjYWNjb3VudHMtY2pkZDIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiZGVmYXVsdC10b2tlbi1ldWE1ZiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYTQyMjI4ZjEtZDZkMi0xMWU1LWE0MmYtNDIwMTBhZjAwMDAyIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmUyZS10ZXN0cy1zdmNhY2NvdW50cy1jamRkMjpkZWZhdWx0In0.T_dLwS5K_x3rrmuC3iP-LY_lmPPiTxTnjais6tQkR-wkSR5XGzTnJW1xBCwsBXS2uGZi97Dug_l6i29cWt8TvRITMgQjLF5IT5Fi68FyRB0JfrBkCcDKRhPP8tH69rSNMWkuntpVZs3cXARlWPPuEXmxUPxUfPuhM8H1baYLg7i0hJveHVqNY5tlWEgYe7ujPUdxNvwUwTWtG3Lna-MgMtq7m5A5iEe9yh5ixeFM8URA_kHoAEQlxdKMR83XVkCfbKJxAUGuTvuA8PQ5fi8Wr6vFz1sAX8_NRTk0hstIYtCh-Y5xa5aHot75bKLkBFcGSFqgtUGX2_4beGIIOxZ3Cg"" in container output
  Expected
      <string>: content of file ""/var/run/secrets/kubernetes.io/serviceaccount/token"": eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJlMmUtdGVzdHMtc3ZjYWNjb3VudHMtY2pkZDIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiZGVmYXVsdC10b2tlbi1vMzZ5OCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYTQyMjI4ZjEtZDZkMi0xMWU1LWE0MmYtNDIwMTBhZjAwMDAyIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmUyZS10ZXN0cy1zdmNhY2NvdW50cy1jamRkMjpkZWZhdWx0In0.Wy5Iksh4SgXa32ERH5VRVbg-DsZ4SCEdfXGRdM6Nh_a5uhYRRyhCo5w6vRdi39dKeiVTFBwiHVJap2RQUQ6ivMo8_0O_lWlEsbVtFO7CC2cWKIEm-Pjx5958_3sv6kw8QW3ZM6-CWk7669idz-ApGzx-hkrlREvle0HoO2wErPAR4s_X5VIveOjDT5eW1shzazAKSWs1FjxHIw_oeVntyxcRW6i_PDMEDpXOJTC3vjIY2bTYJ9eHDEblXNgiwuIvb3lTQbTnV-1GDs0OPkhB52-jyHMOhK0PzkQp8jerGSF3fffiTu6h47riUWE5UfuCLHAU9RM0AKSZtDx5Z64xPA

  to contain substring
      <string>: content of file ""/var/run/secrets/kubernetes.io/serviceaccount/token"": eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJlMmUtdGVzdHMtc3ZjYWNjb3VudHMtY2pkZDIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiZGVmYXVsdC10b2tlbi1ldWE1ZiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYTQyMjI4ZjEtZDZkMi0xMWU1LWE0MmYtNDIwMTBhZjAwMDAyIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmUyZS10ZXN0cy1zdmNhY2NvdW50cy1jamRkMjpkZWZhdWx0In0.T_dLwS5K_x3rrmuC3iP-LY_lmPPiTxTnjais6tQkR-wkSR5XGzTnJW1xBCwsBXS2uGZi97Dug_l6i29cWt8TvRITMgQjLF5IT5Fi68FyRB0JfrBkCcDKRhPP8tH69rSNMWkuntpVZs3cXARlWPPuEXmxUPxUfPuhM8H1baYLg7i0hJveHVqNY5tlWEgYe7ujPUdxNvwUwTWtG3Lna-MgMtq7m5A5iEe9yh5ixeFM8URA_kHoAEQlxdKMR83XVkCfbKJxAUGuTvuA8PQ5fi8Wr6vFz1sAX8_NRTk0hstIYtCh-Y5xa5aHot75bKLkBFcGSFqgtUGX2_4beGIIOxZ3Cg
```
",LY_lmPPiTxTnjais6tQkR-wkSR5XGzTnJW1xBCwsBXS2uGZi97Dug_l6i29cWt8TvRITMgQjLF5IT5Fi68FyRB0JfrBkCcDKRhPP8tH69rSNMWkuntpVZs3cXARlWPPuEXmxUPxUfPuhM8H1baYLg7i0hJveHVqNY5tlWEgYe7ujPUdxNvwUwTWtG3Lna-MgMtq7m5A5iEe9yh5ixeFM8URA_kHoAEQlxdKMR83XVkCfbKJxAUGuTvuA8PQ5fi8Wr6vFz1sAX8_NRTk0hstIYtCh-Y5xa5aHot75bKLkBFcGSFqgtUGX2_4beGIIOxZ3Cg,Kubernetes,1,1
57,19255.0,"```
$ ./cluster/kubectl.sh create -f examples/extensions/deployment.yaml --v 8
I0104 15:17:42.816603    1813 loader.go:229] Config loaded from file /home/mkargaki/.kube/config
I0104 15:17:42.818053    1813 loader.go:229] Config loaded from file /home/mkargaki/.kube/config
I0104 15:17:42.947358    1813 round_trippers.go:258] GET https://10.245.1.2/api
I0104 15:17:42.947384    1813 round_trippers.go:265] Request Headers:
I0104 15:17:42.947391    1813 round_trippers.go:268]     Authorization: Basic YWRtaW46U01mdjNpUmwwbFR3Z2Z0bA==
I0104 15:17:42.982052    1813 round_trippers.go:283] Response Status: 200 OK in 34 milliseconds
I0104 15:17:42.982080    1813 round_trippers.go:286] Response Headers:
I0104 15:17:42.982087    1813 round_trippers.go:289]     Content-Type: application/json
I0104 15:17:42.982095    1813 round_trippers.go:289]     Date: Mon, 04 Jan 2016 14:17:23 GMT
I0104 15:17:42.982102    1813 round_trippers.go:289]     Content-Length: 57
I0104 15:17:42.982137    1813 request.go:841] Response Body: {
  ""kind"": ""APIVersions"",
  ""versions"": [
    ""v1""
  ]
}
I0104 15:17:42.982336    1813 round_trippers.go:258] GET https://10.245.1.2/apis
I0104 15:17:42.982350    1813 round_trippers.go:265] Request Headers:
I0104 15:17:42.982356    1813 round_trippers.go:268]     Authorization: Basic YWRtaW46U01mdjNpUmwwbFR3Z2Z0bA==
I0104 15:17:42.983192    1813 round_trippers.go:283] Response Status: 200 OK in 0 milliseconds
I0104 15:17:42.983211    1813 round_trippers.go:286] Response Headers:
I0104 15:17:42.983218    1813 round_trippers.go:289]     Content-Type: application/json
I0104 15:17:42.983224    1813 round_trippers.go:289]     Date: Mon, 04 Jan 2016 14:17:23 GMT
I0104 15:17:42.983231    1813 round_trippers.go:289]     Content-Length: 326
I0104 15:17:42.983250    1813 request.go:841] Response Body: {
  ""kind"": ""APIGroupList"",
  ""groups"": [
    {
      ""name"": ""extensions"",
      ""versions"": [
        {
          ""groupVersion"": ""extensions/v1beta1"",
          ""version"": ""v1beta1""
        }
      ],
      ""preferredVersion"": {
        ""groupVersion"": ""extensions/v1beta1"",
        ""version"": ""v1beta1""
      }
    }
  ]
}
I0104 15:17:42.984501    1813 round_trippers.go:258] GET https://10.245.1.2/version
I0104 15:17:42.984525    1813 round_trippers.go:265] Request Headers:
I0104 15:17:42.984532    1813 round_trippers.go:268]     User-Agent: kubectl/v1.2.0 (linux/amd64) kubernetes/7d3d155
I0104 15:17:42.984538    1813 round_trippers.go:268]     Authorization: Basic YWRtaW46U01mdjNpUmwwbFR3Z2Z0bA==
I0104 15:17:42.985516    1813 round_trippers.go:283] Response Status: 200 OK in 0 milliseconds
I0104 15:17:42.985530    1813 round_trippers.go:286] Response Headers:
I0104 15:17:42.985534    1813 round_trippers.go:289]     Content-Length: 180
I0104 15:17:42.985538    1813 round_trippers.go:289]     Content-Type: application/json
I0104 15:17:42.985541    1813 round_trippers.go:289]     Date: Mon, 04 Jan 2016 14:17:23 GMT
I0104 15:17:42.985561    1813 request.go:841] Response Body: {
  ""major"": ""1"",
  ""minor"": ""2+"",
  ""gitVersion"": ""v1.2.0-alpha.5.596+7d3d155a4cc916-dirty"",
  ""gitCommit"": ""7d3d155a4cc9163c1baf5a8b2b645b3c3dd3bda0"",
  ""gitTreeState"": ""dirty""
}
I0104 15:17:42.987242    1813 loader.go:229] Config loaded from file /home/mkargaki/.kube/config
I0104 15:17:42.988370    1813 loader.go:229] Config loaded from file /home/mkargaki/.kube/config
I0104 15:17:42.989589    1813 loader.go:229] Config loaded from file /home/mkargaki/.kube/config
I0104 15:17:42.991455    1813 loader.go:229] Config loaded from file /home/mkargaki/.kube/config
I0104 15:17:42.992454    1813 decoder.go:144] decoding stream as YAML
I0104 15:17:43.010982    1813 round_trippers.go:258] GET https://10.245.1.2/api
I0104 15:17:43.011017    1813 round_trippers.go:265] Request Headers:
I0104 15:17:43.011028    1813 round_trippers.go:268]     Authorization: Basic YWRtaW46U01mdjNpUmwwbFR3Z2Z0bA==
I0104 15:17:43.012070    1813 round_trippers.go:283] Response Status: 200 OK in 1 milliseconds
I0104 15:17:43.012093    1813 round_trippers.go:286] Response Headers:
I0104 15:17:43.012101    1813 round_trippers.go:289]     Content-Type: application/json
I0104 15:17:43.012108    1813 round_trippers.go:289]     Date: Mon, 04 Jan 2016 14:17:23 GMT
I0104 15:17:43.012115    1813 round_trippers.go:289]     Content-Length: 57
I0104 15:17:43.012141    1813 request.go:841] Response Body: {
  ""kind"": ""APIVersions"",
  ""versions"": [
    ""v1""
  ]
}
I0104 15:17:43.012270    1813 round_trippers.go:258] GET https://10.245.1.2/apis
I0104 15:17:43.012282    1813 round_trippers.go:265] Request Headers:
I0104 15:17:43.012289    1813 round_trippers.go:268]     Authorization: Basic YWRtaW46U01mdjNpUmwwbFR3Z2Z0bA==
I0104 15:17:43.013280    1813 round_trippers.go:283] Response Status: 200 OK in 0 milliseconds
I0104 15:17:43.013294    1813 round_trippers.go:286] Response Headers:
I0104 15:17:43.013301    1813 round_trippers.go:289]     Content-Type: application/json
I0104 15:17:43.013307    1813 round_trippers.go:289]     Date: Mon, 04 Jan 2016 14:17:23 GMT
I0104 15:17:43.013313    1813 round_trippers.go:289]     Content-Length: 326
I0104 15:17:43.013332    1813 request.go:841] Response Body: {
  ""kind"": ""APIGroupList"",
  ""groups"": [
    {
      ""name"": ""extensions"",
      ""versions"": [
        {
          ""groupVersion"": ""extensions/v1beta1"",
          ""version"": ""v1beta1""
        }
      ],
      ""preferredVersion"": {
        ""groupVersion"": ""extensions/v1beta1"",
        ""version"": ""v1beta1""
      }
    }
  ]
}
```

@deads2k @liggitt 

Found in https://github.com/kubernetes/kubernetes/pull/18901 which is based on top of https://github.com/kubernetes/kubernetes/commit/b494855ebf7801b6e92f734ca402f0dc44c37b43 (almost latest master)
",YWRtaW46U01mdjNpUmwwbFR3Z2Z0bA,Kubernetes,1,1
58,10466.0,"Hi ,

I ran below command 2 times. First time i canceled it because it failed with below error. 

can't be established.
ECDSA key fingerprint is 44:a4:6f:2e:d6:95:78:09:50:b7:5b:23:28:30:51:54.

when i run below second time i am getting below error? any help??
KUBERNETES_PROVIDER=ubuntu ./kube-up.sh

[sudo] password to copy files and start node:
cp: cannot create regular file ‘/opt/bin/etcd’: Text file busy
cp: cannot create regular file ‘/opt/bin/kube-apiserver’: Text file busy
cp: cannot create regular file ‘/opt/bin/kube-controller-manager’: Text file busy
cp: cannot create regular file ‘/opt/bin/kube-scheduler’: Text file busy
start: Job is already running: etcd
",50:b7:5b:23:28:30:51:54,Kubernetes,,1
59,10264.0,"Fixes #7648

```
cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt                        
-----BEGIN CERTIFICATE-----
MIIDXzCCAkegAwIBAgIJALCZOXppvtO1MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV
BAMUGTEzMC4yMTEuMTU1LjQzQDE0MzUwOTk3MjkwHhcNMTUwNjIzMjI0ODQ5WhcN
MjUwNjIwMjI0ODQ5WjAkMSIwIAYDVQQDFBkxMzAuMjExLjE1NS40M0AxNDM1MDk5
NzI5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5vwZGwINV2+qQtUJ
anaxlJ4qjQeKyThsdV/tT1VE9SroT7JiLMhIU2Wr1ETw76rPr8ao8yRkJordwqKo
ThVVc6XvLa1Y7SptL2Zw1ufvxuac3xfG96XMcIjm/x5BtNe3M5VUlyjMSkMYUrmy
hvM0/8sgzmQ6QBgL0+FSZkrGIdbAqG+EOcrn0rn/xngBhSlF1TSQmg6rG/qc9Kjw
eJBrJJ0TTowDl44a0i8n21qu4Vb0iAkGLi6OZI7mC4PzR2DR+0ciLQy/OTl8mC6s
Q4KwZwDd6ovQQxHB6n+VFJjT5zeOfbKbW83oJi+NAlJnk2O6nGz+ZLmvHHbRfxyf
htSltQIDAQABo4GTMIGQMB0GA1UdDgQWBBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxTBU
BgNVHSMETTBLgBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxaEopCYwJDEiMCAGA1UEAxQZ
MTMwLjIxMS4xNTUuNDNAMTQzNTA5OTcyOYIJALCZOXppvtO1MAwGA1UdEwQFMAMB
Af8wCwYDVR0PBAQDAgEGMA0GCSqGSIb3DQEBCwUAA4IBAQAMlSSZ2k+h+Y4RXPI2
mILYEuNf/L3Rnui8iZM4bQeDb8hszxe5KMVHCOF7z1R/iOrbk3KjTUZfcmlpcMNc
VSehj6h0m5vkdq9H4kM8iUPP3GS5W8l8wsd+FNCGNhlMR2i3bxrevRnaB4RbR0Hx
osGVL/+kiMCdO12Uak0Wm47qnGJsr48XFzbLQ2s1NckdWDTMO6ZteGa0oTW5NJ/Z
wpQ01HyT1WKm6r+7HtQC6VyecxGqhIYom1eBMNmPY8kg9aONUQBYRN3HJ8uQEE8D
bjmOH2F1Z2qD2ZAxrAOo2JJQqbFl1Xjp/3QbeN5W8Tj98PTo/R/aYtMZcmyAz4yY
DL/P
-----END CERTIFICATE-----
```

cc @lavalamp @erictune @thockin @roberthbailey 
",BgNVHSMETTBLgBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxaEopCYwJDEiMCAGA1UEAxQZ,Kubernetes,,1
60,10264.0,"Fixes #7648

```
cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt                        
-----BEGIN CERTIFICATE-----
MIIDXzCCAkegAwIBAgIJALCZOXppvtO1MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV
BAMUGTEzMC4yMTEuMTU1LjQzQDE0MzUwOTk3MjkwHhcNMTUwNjIzMjI0ODQ5WhcN
MjUwNjIwMjI0ODQ5WjAkMSIwIAYDVQQDFBkxMzAuMjExLjE1NS40M0AxNDM1MDk5
NzI5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5vwZGwINV2+qQtUJ
anaxlJ4qjQeKyThsdV/tT1VE9SroT7JiLMhIU2Wr1ETw76rPr8ao8yRkJordwqKo
ThVVc6XvLa1Y7SptL2Zw1ufvxuac3xfG96XMcIjm/x5BtNe3M5VUlyjMSkMYUrmy
hvM0/8sgzmQ6QBgL0+FSZkrGIdbAqG+EOcrn0rn/xngBhSlF1TSQmg6rG/qc9Kjw
eJBrJJ0TTowDl44a0i8n21qu4Vb0iAkGLi6OZI7mC4PzR2DR+0ciLQy/OTl8mC6s
Q4KwZwDd6ovQQxHB6n+VFJjT5zeOfbKbW83oJi+NAlJnk2O6nGz+ZLmvHHbRfxyf
htSltQIDAQABo4GTMIGQMB0GA1UdDgQWBBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxTBU
BgNVHSMETTBLgBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxaEopCYwJDEiMCAGA1UEAxQZ
MTMwLjIxMS4xNTUuNDNAMTQzNTA5OTcyOYIJALCZOXppvtO1MAwGA1UdEwQFMAMB
Af8wCwYDVR0PBAQDAgEGMA0GCSqGSIb3DQEBCwUAA4IBAQAMlSSZ2k+h+Y4RXPI2
mILYEuNf/L3Rnui8iZM4bQeDb8hszxe5KMVHCOF7z1R/iOrbk3KjTUZfcmlpcMNc
VSehj6h0m5vkdq9H4kM8iUPP3GS5W8l8wsd+FNCGNhlMR2i3bxrevRnaB4RbR0Hx
osGVL/+kiMCdO12Uak0Wm47qnGJsr48XFzbLQ2s1NckdWDTMO6ZteGa0oTW5NJ/Z
wpQ01HyT1WKm6r+7HtQC6VyecxGqhIYom1eBMNmPY8kg9aONUQBYRN3HJ8uQEE8D
bjmOH2F1Z2qD2ZAxrAOo2JJQqbFl1Xjp/3QbeN5W8Tj98PTo/R/aYtMZcmyAz4yY
DL/P
-----END CERTIFICATE-----
```

cc @lavalamp @erictune @thockin @roberthbailey 
",MjUwNjIwMjI0ODQ5WjAkMSIwIAYDVQQDFBkxMzAuMjExLjE1NS40M0AxNDM1MDk5,Kubernetes,,1
61,10264.0,"Fixes #7648

```
cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt                        
-----BEGIN CERTIFICATE-----
MIIDXzCCAkegAwIBAgIJALCZOXppvtO1MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV
BAMUGTEzMC4yMTEuMTU1LjQzQDE0MzUwOTk3MjkwHhcNMTUwNjIzMjI0ODQ5WhcN
MjUwNjIwMjI0ODQ5WjAkMSIwIAYDVQQDFBkxMzAuMjExLjE1NS40M0AxNDM1MDk5
NzI5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5vwZGwINV2+qQtUJ
anaxlJ4qjQeKyThsdV/tT1VE9SroT7JiLMhIU2Wr1ETw76rPr8ao8yRkJordwqKo
ThVVc6XvLa1Y7SptL2Zw1ufvxuac3xfG96XMcIjm/x5BtNe3M5VUlyjMSkMYUrmy
hvM0/8sgzmQ6QBgL0+FSZkrGIdbAqG+EOcrn0rn/xngBhSlF1TSQmg6rG/qc9Kjw
eJBrJJ0TTowDl44a0i8n21qu4Vb0iAkGLi6OZI7mC4PzR2DR+0ciLQy/OTl8mC6s
Q4KwZwDd6ovQQxHB6n+VFJjT5zeOfbKbW83oJi+NAlJnk2O6nGz+ZLmvHHbRfxyf
htSltQIDAQABo4GTMIGQMB0GA1UdDgQWBBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxTBU
BgNVHSMETTBLgBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxaEopCYwJDEiMCAGA1UEAxQZ
MTMwLjIxMS4xNTUuNDNAMTQzNTA5OTcyOYIJALCZOXppvtO1MAwGA1UdEwQFMAMB
Af8wCwYDVR0PBAQDAgEGMA0GCSqGSIb3DQEBCwUAA4IBAQAMlSSZ2k+h+Y4RXPI2
mILYEuNf/L3Rnui8iZM4bQeDb8hszxe5KMVHCOF7z1R/iOrbk3KjTUZfcmlpcMNc
VSehj6h0m5vkdq9H4kM8iUPP3GS5W8l8wsd+FNCGNhlMR2i3bxrevRnaB4RbR0Hx
osGVL/+kiMCdO12Uak0Wm47qnGJsr48XFzbLQ2s1NckdWDTMO6ZteGa0oTW5NJ/Z
wpQ01HyT1WKm6r+7HtQC6VyecxGqhIYom1eBMNmPY8kg9aONUQBYRN3HJ8uQEE8D
bjmOH2F1Z2qD2ZAxrAOo2JJQqbFl1Xjp/3QbeN5W8Tj98PTo/R/aYtMZcmyAz4yY
DL/P
-----END CERTIFICATE-----
```

cc @lavalamp @erictune @thockin @roberthbailey 
",htSltQIDAQABo4GTMIGQMB0GA1UdDgQWBBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxTBU,Kubernetes,,1
62,10264.0,"Fixes #7648

```
cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt                        
-----BEGIN CERTIFICATE-----
MIIDXzCCAkegAwIBAgIJALCZOXppvtO1MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV
BAMUGTEzMC4yMTEuMTU1LjQzQDE0MzUwOTk3MjkwHhcNMTUwNjIzMjI0ODQ5WhcN
MjUwNjIwMjI0ODQ5WjAkMSIwIAYDVQQDFBkxMzAuMjExLjE1NS40M0AxNDM1MDk5
NzI5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5vwZGwINV2+qQtUJ
anaxlJ4qjQeKyThsdV/tT1VE9SroT7JiLMhIU2Wr1ETw76rPr8ao8yRkJordwqKo
ThVVc6XvLa1Y7SptL2Zw1ufvxuac3xfG96XMcIjm/x5BtNe3M5VUlyjMSkMYUrmy
hvM0/8sgzmQ6QBgL0+FSZkrGIdbAqG+EOcrn0rn/xngBhSlF1TSQmg6rG/qc9Kjw
eJBrJJ0TTowDl44a0i8n21qu4Vb0iAkGLi6OZI7mC4PzR2DR+0ciLQy/OTl8mC6s
Q4KwZwDd6ovQQxHB6n+VFJjT5zeOfbKbW83oJi+NAlJnk2O6nGz+ZLmvHHbRfxyf
htSltQIDAQABo4GTMIGQMB0GA1UdDgQWBBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxTBU
BgNVHSMETTBLgBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxaEopCYwJDEiMCAGA1UEAxQZ
MTMwLjIxMS4xNTUuNDNAMTQzNTA5OTcyOYIJALCZOXppvtO1MAwGA1UdEwQFMAMB
Af8wCwYDVR0PBAQDAgEGMA0GCSqGSIb3DQEBCwUAA4IBAQAMlSSZ2k+h+Y4RXPI2
mILYEuNf/L3Rnui8iZM4bQeDb8hszxe5KMVHCOF7z1R/iOrbk3KjTUZfcmlpcMNc
VSehj6h0m5vkdq9H4kM8iUPP3GS5W8l8wsd+FNCGNhlMR2i3bxrevRnaB4RbR0Hx
osGVL/+kiMCdO12Uak0Wm47qnGJsr48XFzbLQ2s1NckdWDTMO6ZteGa0oTW5NJ/Z
wpQ01HyT1WKm6r+7HtQC6VyecxGqhIYom1eBMNmPY8kg9aONUQBYRN3HJ8uQEE8D
bjmOH2F1Z2qD2ZAxrAOo2JJQqbFl1Xjp/3QbeN5W8Tj98PTo/R/aYtMZcmyAz4yY
DL/P
-----END CERTIFICATE-----
```

cc @lavalamp @erictune @thockin @roberthbailey 
",MIIDXzCCAkegAwIBAgIJALCZOXppvtO1MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV,Kubernetes,,1
63,10264.0,"Fixes #7648

```
cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt                        
-----BEGIN CERTIFICATE-----
MIIDXzCCAkegAwIBAgIJALCZOXppvtO1MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV
BAMUGTEzMC4yMTEuMTU1LjQzQDE0MzUwOTk3MjkwHhcNMTUwNjIzMjI0ODQ5WhcN
MjUwNjIwMjI0ODQ5WjAkMSIwIAYDVQQDFBkxMzAuMjExLjE1NS40M0AxNDM1MDk5
NzI5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5vwZGwINV2+qQtUJ
anaxlJ4qjQeKyThsdV/tT1VE9SroT7JiLMhIU2Wr1ETw76rPr8ao8yRkJordwqKo
ThVVc6XvLa1Y7SptL2Zw1ufvxuac3xfG96XMcIjm/x5BtNe3M5VUlyjMSkMYUrmy
hvM0/8sgzmQ6QBgL0+FSZkrGIdbAqG+EOcrn0rn/xngBhSlF1TSQmg6rG/qc9Kjw
eJBrJJ0TTowDl44a0i8n21qu4Vb0iAkGLi6OZI7mC4PzR2DR+0ciLQy/OTl8mC6s
Q4KwZwDd6ovQQxHB6n+VFJjT5zeOfbKbW83oJi+NAlJnk2O6nGz+ZLmvHHbRfxyf
htSltQIDAQABo4GTMIGQMB0GA1UdDgQWBBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxTBU
BgNVHSMETTBLgBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxaEopCYwJDEiMCAGA1UEAxQZ
MTMwLjIxMS4xNTUuNDNAMTQzNTA5OTcyOYIJALCZOXppvtO1MAwGA1UdEwQFMAMB
Af8wCwYDVR0PBAQDAgEGMA0GCSqGSIb3DQEBCwUAA4IBAQAMlSSZ2k+h+Y4RXPI2
mILYEuNf/L3Rnui8iZM4bQeDb8hszxe5KMVHCOF7z1R/iOrbk3KjTUZfcmlpcMNc
VSehj6h0m5vkdq9H4kM8iUPP3GS5W8l8wsd+FNCGNhlMR2i3bxrevRnaB4RbR0Hx
osGVL/+kiMCdO12Uak0Wm47qnGJsr48XFzbLQ2s1NckdWDTMO6ZteGa0oTW5NJ/Z
wpQ01HyT1WKm6r+7HtQC6VyecxGqhIYom1eBMNmPY8kg9aONUQBYRN3HJ8uQEE8D
bjmOH2F1Z2qD2ZAxrAOo2JJQqbFl1Xjp/3QbeN5W8Tj98PTo/R/aYtMZcmyAz4yY
DL/P
-----END CERTIFICATE-----
```

cc @lavalamp @erictune @thockin @roberthbailey 
",BAMUGTEzMC4yMTEuMTU1LjQzQDE0MzUwOTk3MjkwHhcNMTUwNjIzMjI0ODQ5WhcN,Kubernetes,,1
64,10264.0,"Fixes #7648

```
cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt                        
-----BEGIN CERTIFICATE-----
MIIDXzCCAkegAwIBAgIJALCZOXppvtO1MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV
BAMUGTEzMC4yMTEuMTU1LjQzQDE0MzUwOTk3MjkwHhcNMTUwNjIzMjI0ODQ5WhcN
MjUwNjIwMjI0ODQ5WjAkMSIwIAYDVQQDFBkxMzAuMjExLjE1NS40M0AxNDM1MDk5
NzI5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5vwZGwINV2+qQtUJ
anaxlJ4qjQeKyThsdV/tT1VE9SroT7JiLMhIU2Wr1ETw76rPr8ao8yRkJordwqKo
ThVVc6XvLa1Y7SptL2Zw1ufvxuac3xfG96XMcIjm/x5BtNe3M5VUlyjMSkMYUrmy
hvM0/8sgzmQ6QBgL0+FSZkrGIdbAqG+EOcrn0rn/xngBhSlF1TSQmg6rG/qc9Kjw
eJBrJJ0TTowDl44a0i8n21qu4Vb0iAkGLi6OZI7mC4PzR2DR+0ciLQy/OTl8mC6s
Q4KwZwDd6ovQQxHB6n+VFJjT5zeOfbKbW83oJi+NAlJnk2O6nGz+ZLmvHHbRfxyf
htSltQIDAQABo4GTMIGQMB0GA1UdDgQWBBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxTBU
BgNVHSMETTBLgBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxaEopCYwJDEiMCAGA1UEAxQZ
MTMwLjIxMS4xNTUuNDNAMTQzNTA5OTcyOYIJALCZOXppvtO1MAwGA1UdEwQFMAMB
Af8wCwYDVR0PBAQDAgEGMA0GCSqGSIb3DQEBCwUAA4IBAQAMlSSZ2k+h+Y4RXPI2
mILYEuNf/L3Rnui8iZM4bQeDb8hszxe5KMVHCOF7z1R/iOrbk3KjTUZfcmlpcMNc
VSehj6h0m5vkdq9H4kM8iUPP3GS5W8l8wsd+FNCGNhlMR2i3bxrevRnaB4RbR0Hx
osGVL/+kiMCdO12Uak0Wm47qnGJsr48XFzbLQ2s1NckdWDTMO6ZteGa0oTW5NJ/Z
wpQ01HyT1WKm6r+7HtQC6VyecxGqhIYom1eBMNmPY8kg9aONUQBYRN3HJ8uQEE8D
bjmOH2F1Z2qD2ZAxrAOo2JJQqbFl1Xjp/3QbeN5W8Tj98PTo/R/aYtMZcmyAz4yY
DL/P
-----END CERTIFICATE-----
```

cc @lavalamp @erictune @thockin @roberthbailey 
",MTMwLjIxMS4xNTUuNDNAMTQzNTA5OTcyOYIJALCZOXppvtO1MAwGA1UdEwQFMAMB,Kubernetes,,1
65,10264.0,"Fixes #7648

```
cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt                        
-----BEGIN CERTIFICATE-----
MIIDXzCCAkegAwIBAgIJALCZOXppvtO1MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV
BAMUGTEzMC4yMTEuMTU1LjQzQDE0MzUwOTk3MjkwHhcNMTUwNjIzMjI0ODQ5WhcN
MjUwNjIwMjI0ODQ5WjAkMSIwIAYDVQQDFBkxMzAuMjExLjE1NS40M0AxNDM1MDk5
NzI5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5vwZGwINV2+qQtUJ
anaxlJ4qjQeKyThsdV/tT1VE9SroT7JiLMhIU2Wr1ETw76rPr8ao8yRkJordwqKo
ThVVc6XvLa1Y7SptL2Zw1ufvxuac3xfG96XMcIjm/x5BtNe3M5VUlyjMSkMYUrmy
hvM0/8sgzmQ6QBgL0+FSZkrGIdbAqG+EOcrn0rn/xngBhSlF1TSQmg6rG/qc9Kjw
eJBrJJ0TTowDl44a0i8n21qu4Vb0iAkGLi6OZI7mC4PzR2DR+0ciLQy/OTl8mC6s
Q4KwZwDd6ovQQxHB6n+VFJjT5zeOfbKbW83oJi+NAlJnk2O6nGz+ZLmvHHbRfxyf
htSltQIDAQABo4GTMIGQMB0GA1UdDgQWBBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxTBU
BgNVHSMETTBLgBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxaEopCYwJDEiMCAGA1UEAxQZ
MTMwLjIxMS4xNTUuNDNAMTQzNTA5OTcyOYIJALCZOXppvtO1MAwGA1UdEwQFMAMB
Af8wCwYDVR0PBAQDAgEGMA0GCSqGSIb3DQEBCwUAA4IBAQAMlSSZ2k+h+Y4RXPI2
mILYEuNf/L3Rnui8iZM4bQeDb8hszxe5KMVHCOF7z1R/iOrbk3KjTUZfcmlpcMNc
VSehj6h0m5vkdq9H4kM8iUPP3GS5W8l8wsd+FNCGNhlMR2i3bxrevRnaB4RbR0Hx
osGVL/+kiMCdO12Uak0Wm47qnGJsr48XFzbLQ2s1NckdWDTMO6ZteGa0oTW5NJ/Z
wpQ01HyT1WKm6r+7HtQC6VyecxGqhIYom1eBMNmPY8kg9aONUQBYRN3HJ8uQEE8D
bjmOH2F1Z2qD2ZAxrAOo2JJQqbFl1Xjp/3QbeN5W8Tj98PTo/R/aYtMZcmyAz4yY
DL/P
-----END CERTIFICATE-----
```

cc @lavalamp @erictune @thockin @roberthbailey 
",ThVVc6XvLa1Y7SptL2Zw1ufvxuac3xfG96XMcIjm,Kubernetes,,1
66,10264.0,"Fixes #7648

```
cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt                        
-----BEGIN CERTIFICATE-----
MIIDXzCCAkegAwIBAgIJALCZOXppvtO1MA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV
BAMUGTEzMC4yMTEuMTU1LjQzQDE0MzUwOTk3MjkwHhcNMTUwNjIzMjI0ODQ5WhcN
MjUwNjIwMjI0ODQ5WjAkMSIwIAYDVQQDFBkxMzAuMjExLjE1NS40M0AxNDM1MDk5
NzI5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5vwZGwINV2+qQtUJ
anaxlJ4qjQeKyThsdV/tT1VE9SroT7JiLMhIU2Wr1ETw76rPr8ao8yRkJordwqKo
ThVVc6XvLa1Y7SptL2Zw1ufvxuac3xfG96XMcIjm/x5BtNe3M5VUlyjMSkMYUrmy
hvM0/8sgzmQ6QBgL0+FSZkrGIdbAqG+EOcrn0rn/xngBhSlF1TSQmg6rG/qc9Kjw
eJBrJJ0TTowDl44a0i8n21qu4Vb0iAkGLi6OZI7mC4PzR2DR+0ciLQy/OTl8mC6s
Q4KwZwDd6ovQQxHB6n+VFJjT5zeOfbKbW83oJi+NAlJnk2O6nGz+ZLmvHHbRfxyf
htSltQIDAQABo4GTMIGQMB0GA1UdDgQWBBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxTBU
BgNVHSMETTBLgBQ3ov6S1JYJ2ZlaZ5lAO9aAozwPxaEopCYwJDEiMCAGA1UEAxQZ
MTMwLjIxMS4xNTUuNDNAMTQzNTA5OTcyOYIJALCZOXppvtO1MAwGA1UdEwQFMAMB
Af8wCwYDVR0PBAQDAgEGMA0GCSqGSIb3DQEBCwUAA4IBAQAMlSSZ2k+h+Y4RXPI2
mILYEuNf/L3Rnui8iZM4bQeDb8hszxe5KMVHCOF7z1R/iOrbk3KjTUZfcmlpcMNc
VSehj6h0m5vkdq9H4kM8iUPP3GS5W8l8wsd+FNCGNhlMR2i3bxrevRnaB4RbR0Hx
osGVL/+kiMCdO12Uak0Wm47qnGJsr48XFzbLQ2s1NckdWDTMO6ZteGa0oTW5NJ/Z
wpQ01HyT1WKm6r+7HtQC6VyecxGqhIYom1eBMNmPY8kg9aONUQBYRN3HJ8uQEE8D
bjmOH2F1Z2qD2ZAxrAOo2JJQqbFl1Xjp/3QbeN5W8Tj98PTo/R/aYtMZcmyAz4yY
DL/P
-----END CERTIFICATE-----
```

cc @lavalamp @erictune @thockin @roberthbailey 
",7HtQC6VyecxGqhIYom1eBMNmPY8kg9aONUQBYRN3HJ8uQEE8D,Kubernetes,,1
67,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy,Kubernetes,,1
68,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G,Kubernetes,,1
69,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB,Kubernetes,1,1
70,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm,Kubernetes,1,1
71,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr,Kubernetes,1,1
72,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus,Kubernetes,1,1
73,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1,Kubernetes,,1
74,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2,Kubernetes,1,1
75,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ,Kubernetes,1,1
76,9483.0,"It seems creating a secret is only allowed if it's base64 encoded?  I have a secret that's PEM encoded, e.g.

```
apiVersion: v1beta3
kind: Secret
metadata:
  name: kube-keypair
data:
  kube-registry.crt: ""-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC95VjiVBvZCZLm kvGkVwkfj+gR8NomUZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wY XYrhLEM357BxFRM1/G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ ltdI07XEPIgrGr5wvRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7 PutHNg3TIPSM4F4pmmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNb oHUT2RArHR1zJV47+NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O2 1+NM4DsjAgMBAAECggEAWNpciaJDWX2CUAMHsBbNfQgv1V02JeHaUebr4LvDJMCw tl0j/zdVwtby4ZbKcX96UdnmshTosPuZTUlPt2anmRv+0hrDX2pbUxTrUZ7U4yXc WIggQLebgP5pAS2qJOWS5Sk5K+kszJVE3PJuj3QIQ+by7ABahZPnS14usOyi2QUg eDTyQc2HPxj5H813KShT1OtQclgc19FGJ3jfYdEHVqyqL65aORasRhno2kLY6SlB d7+9eypks7NA48hJt+NZZC9ZZXvNsRHdlVTueExtM9lJPZEDgkAUsd8wTx49pIs3 T0EoVLA7wNjqewkuMW2bGoGwAROlK07jJMgAgWGVYQKBgQD4NxTg2Jtv7ylnlglr 16cwb5Q38qu01o7R5pZ6KkigRt0FlMDn92hEnipPd/zJesoSTKGSeoTu7SsGF9IC kg7y6cO7RrWNQNwbM7dwN9jIq/kJN45oxClVNW73lxEwenYy4AIx5boeALoktToz tJ2Zj36b/LvDA//kyznqBa+JEwKBgQDD2gU8B46Jika6H2g+5Hmk9mNtHj6ZZIHc ijwkDXiq5uLLRwa+RX1OhhVFnStVoJ3QrhFJAGqJbz0GHiDnTu3yfQL7iQE/Oc0K HMk415o3pjk3VIYchOENlaYx6mfr5Og6+ZXlcgXUvN4lRdwDphwyM3L4EKrfnc3v C5TYv/9XsQKBgB7UWJeEz+mbPv1KuWjXpEBz22kHjyQq8hpIFbCex96AbrteuocV R7IeIwsz0AYGZkrXkcnrxc8XThy3oLIJCipJtrHwGmStBamrRsF9bkOeeJQYfmus 0aVvuZSvAseOrlerUxp3eiJ33Kbqi4wYhuqn1AXz4i5atNHqHAthIWhZAoGAf6EQ UDJMfO0Tci8NbA7QBuRZnr5a5PNOfT3IO2ZcAGM94GKEznHSWt2d9yOZHc/xiBAn S39t7eoDxnzTzGjvP1qgGvMJUP6F09U2fEhkQ2ebWadHTkZ5srSW/WhYGK2veN81 A7Tuf9gkm/2OhwI01bIZdfbGo7refKz7btSPvcECgYEApN3h9grnhhZ9lvrGjPgj XAS6oAKmRZtLvlmvbKlZNdQceHDBDzUEn7JA4ASgGaq+WPQPimfmzdoXmRfEltUA BEm9Q3nVULfqjaGUUUW0JJ6HBvtRYzN40DUILYUQt8xa9pT5s5cwjdLSfXi1FyR2 Y9QiC6fdz+koJqq33yMwCy0= -----END PRIVATE KEY-----""
  kube-registry.key: ""-----BEGIN CERTIFICATE----- MIIDUDCCAjigAwIBAgIJAK87AEpK+g1OMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV BAMUFDEyNy4wLjAuMUAxNDMyODQwODMyMB4XDTE1MDUyODE5MjAzMloXDTI1MDUy NTE5MjAzMlowHzEdMBsGA1UEAxQUMTI3LjAuMC4xQDE0MzI4NDA4MzIwggEiMA0G CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC95VjiVBvZCZLmkvGkVwkfj+gR8Nom UZB7TDnvJnFbdDqHvea9t6l2k5hiuVlJihIX7ZJR9cnEx5wYXYrhLEM357BxFRM1 /G7gjdcyt5DzdXKd5z7cehZLgEm6g7aoHYSNQP5/mRadDGR/ltdI07XEPIgrGr5w vRzNx93dYeX74exl1Qje/lA8I3AY5MXQRLTAEC71ybtvGdj7PutHNg3TIPSM4F4p mmBh1c0Iw+9r99U6zozuMvcDdIRAPmlIjqSIDOC+Tz+GljNboHUT2RArHR1zJV47 +NqkC44Fh+B/Mx3z2FHDQ37orXaEuvrTe2Fa8ojHu0n0y3O21+NM4DsjAgMBAAGj gY4wgYswHQYDVR0OBBYEFBe5fmodCcmMKa3VU/dvLmf3AK7RME8GA1UdIwRIMEaA FBe5fmodCcmMKa3VU/dvLmf3AK7RoSOkITAfMR0wGwYDVQQDFBQxMjcuMC4wLjFA MTQzMjg0MDgzMoIJAK87AEpK+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG MA0GCSqGSIb3DQEBCwUAA4IBAQAQ2wCPmH9kTXC5JGNN/w6qOhVe4O48EnmI3ceL XNvb5aPHztZ73uP+NH5vrdJOr+86w3m6QeiAiivUlr5GmcDWutgaWhElrrwo9tY/ oJpJf3E8zzCGixONYlFQEFtDA1oUl8Nz8yvO3Eq58YJr5Gqwmbmf3CjxAuBA+GX5 YDPXr3YWu/AMekA6pcNZg92mYfDdNI8GzAkGXmGgSZfUELCXIDPpn2XIjuQvN+4J tg12xMOnDPAoFGXmqnQzwhHy68aMYzGUeHcDuGbYNUgd+AMey71uau6j76NW0JFl 9wZ2hsIRH18oZwAJFbOHPkHaRhXSvzFauKqYc6k629yUF0s+ -----END CERTIFICATE-----""
type: Opaque
```

kubectl create reports error:

```
error: unable to load file ""/tmp/secret.yaml"": unable to load ""/tmp/secret.yaml"": illegal base64 data at input byte 0
```

BTW, I'm not sure if puting certificate in secret is the right approach in k8s (or will work).  My use case is to mount certificates as secret volume, and set ssl_certificate directive in nginx to use that certificates. e.g.

```
      containers:
        - name: kube-nginx
          image: kube-nginx
          volumeMounts:
            - name: kube-keypair
              readOnly: true
              mountPath: /etc/nginx/ssl
      volumes:
        - name: kube-keypair
          secret:
            secretName: kube-keypair
```

and nginx conf

```
  ssl_certificate /etc/nginx/ssl/kube-registry.crt;
  ssl_certificate_key /etc/nginx/ssl/kube-registry.key;
```
",+g1OMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEG,Kubernetes,,1
77,6423.0,"The error message defined by ENODEV also appears for the use case where a password is attempted to be removed from a user that does not exist. This PR suggests minor changes to the error message to suggest that it may not just be that the password does not exist but also that the username does not exist.

Example Below:

```
127.0.0.1:6379> acl list
1) ""user default on nopass ~* +@all""
2) ""user kyle off #e66637277baf5cbf0199da7785b76afe9ce2adcdbb45cbdd14a438a428402517 #8b75b5b7eb1db071c9f2c7e649a5e6d07afd94f9b765f1f77a6fd4dd3a6c21a5 -@all""
127.0.0.1:6379> acl setuser IDoNotExist <fakepassword
(error) ERR Error in ACL SETUSER modifier '<fakepassword': The password you are trying to remove from the user does not exist
```",8b75b5b7eb1db071c9f2c7e649a5e6d07afd94f9b765f1f77a6fd4dd3a6c21a5,Redis,,1
78,6423.0,"The error message defined by ENODEV also appears for the use case where a password is attempted to be removed from a user that does not exist. This PR suggests minor changes to the error message to suggest that it may not just be that the password does not exist but also that the username does not exist.

Example Below:

```
127.0.0.1:6379> acl list
1) ""user default on nopass ~* +@all""
2) ""user kyle off #e66637277baf5cbf0199da7785b76afe9ce2adcdbb45cbdd14a438a428402517 #8b75b5b7eb1db071c9f2c7e649a5e6d07afd94f9b765f1f77a6fd4dd3a6c21a5 -@all""
127.0.0.1:6379> acl setuser IDoNotExist <fakepassword
(error) ERR Error in ACL SETUSER modifier '<fakepassword': The password you are trying to remove from the user does not exist
```",e66637277baf5cbf0199da7785b76afe9ce2adcdbb45cbdd14a438a428402517,Redis,,1
79,6423.0,"The error message defined by ENODEV also appears for the use case where a password is attempted to be removed from a user that does not exist. This PR suggests minor changes to the error message to suggest that it may not just be that the password does not exist but also that the username does not exist.

Example Below:

```
127.0.0.1:6379> acl list
1) ""user default on nopass ~* +@all""
2) ""user kyle off #e66637277baf5cbf0199da7785b76afe9ce2adcdbb45cbdd14a438a428402517 #8b75b5b7eb1db071c9f2c7e649a5e6d07afd94f9b765f1f77a6fd4dd3a6c21a5 -@all""
127.0.0.1:6379> acl setuser IDoNotExist <fakepassword
(error) ERR Error in ACL SETUSER modifier '<fakepassword': The password you are trying to remove from the user does not exist
```",attempted,Redis,,1
80,6423.0,"The error message defined by ENODEV also appears for the use case where a password is attempted to be removed from a user that does not exist. This PR suggests minor changes to the error message to suggest that it may not just be that the password does not exist but also that the username does not exist.

Example Below:

```
127.0.0.1:6379> acl list
1) ""user default on nopass ~* +@all""
2) ""user kyle off #e66637277baf5cbf0199da7785b76afe9ce2adcdbb45cbdd14a438a428402517 #8b75b5b7eb1db071c9f2c7e649a5e6d07afd94f9b765f1f77a6fd4dd3a6c21a5 -@all""
127.0.0.1:6379> acl setuser IDoNotExist <fakepassword
(error) ERR Error in ACL SETUSER modifier '<fakepassword': The password you are trying to remove from the user does not exist
```",modifier,Redis,,1
81,6423.0,"The error message defined by ENODEV also appears for the use case where a password is attempted to be removed from a user that does not exist. This PR suggests minor changes to the error message to suggest that it may not just be that the password does not exist but also that the username does not exist.

Example Below:

```
127.0.0.1:6379> acl list
1) ""user default on nopass ~* +@all""
2) ""user kyle off #e66637277baf5cbf0199da7785b76afe9ce2adcdbb45cbdd14a438a428402517 #8b75b5b7eb1db071c9f2c7e649a5e6d07afd94f9b765f1f77a6fd4dd3a6c21a5 -@all""
127.0.0.1:6379> acl setuser IDoNotExist <fakepassword
(error) ERR Error in ACL SETUSER modifier '<fakepassword': The password you are trying to remove from the user does not exist
```",username,Redis,,1
82,6423.0,"The error message defined by ENODEV also appears for the use case where a password is attempted to be removed from a user that does not exist. This PR suggests minor changes to the error message to suggest that it may not just be that the password does not exist but also that the username does not exist.

Example Below:

```
127.0.0.1:6379> acl list
1) ""user default on nopass ~* +@all""
2) ""user kyle off #e66637277baf5cbf0199da7785b76afe9ce2adcdbb45cbdd14a438a428402517 #8b75b5b7eb1db071c9f2c7e649a5e6d07afd94f9b765f1f77a6fd4dd3a6c21a5 -@all""
127.0.0.1:6379> acl setuser IDoNotExist <fakepassword
(error) ERR Error in ACL SETUSER modifier '<fakepassword': The password you are trying to remove from the user does not exist
```",password,Redis,,1
83,10469.0,"# Bug report

## Describe the bug
When including `emailRedirectTo` value in the `generateLink()` of type 'signup', the returned 'action_link' and 'redirect_to' values contain my site url instead of the specified `emailRedirectTo` value. Even when this url is whitelisted (listed in the Redirect URLs) in the dashboard.

## To Reproduce

Steps to reproduce the behavior, please provide code snippets or a repository:
```
  const { data, error } = await supabase.auth.admin.generateLink({
    type: ""signup"",
    email: email,
    options: {
      password: ""password"",
      data: {
        first_name: firstName,
        last_name: lastName,
      },
      emailRedirectTo: ""https://portal.my-domain.com"",
    },
  });
```

## Expected behavior

The response to use the emailRedirectTo value instead of my site url.

This is what I get:
```
generateLink data {
  properties: {
    action_link: 'https://alkdjflskdjflwemnfoijsnelfk.supabase.co/auth/v1/verify?token=c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5&type=signup&redirect_to=https://www.my-domain.com',
    email_otp: '313413584',
    hashed_token: 'c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5',
    redirect_to: 'https://www.my-domain.com',
    verification_type: 'signup'
  },
     ...
```

This is what I expect:
```
generateLink data {
  properties: {
    action_link: 'https://alkdjflskdjflwemnfoijsnelfk.supabase.co/auth/v1/verify?token=c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5&type=signup&redirect_to=https://portal.my-domain.com',
    email_otp: '313413584',
    hashed_token: 'c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5',
    redirect_to: 'https://portal.my-domain.com',
    verification_type: 'signup'
  },
     ...
```

## System information

- OS: macOS
- Version of supabase-js: ""@supabase/supabase-js"": ""^2.1.0"",
- Version of Node.js: 18.12.1

",c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5,Supabase,1,1
84,10469.0,"# Bug report

## Describe the bug
When including `emailRedirectTo` value in the `generateLink()` of type 'signup', the returned 'action_link' and 'redirect_to' values contain my site url instead of the specified `emailRedirectTo` value. Even when this url is whitelisted (listed in the Redirect URLs) in the dashboard.

## To Reproduce

Steps to reproduce the behavior, please provide code snippets or a repository:
```
  const { data, error } = await supabase.auth.admin.generateLink({
    type: ""signup"",
    email: email,
    options: {
      password: ""password"",
      data: {
        first_name: firstName,
        last_name: lastName,
      },
      emailRedirectTo: ""https://portal.my-domain.com"",
    },
  });
```

## Expected behavior

The response to use the emailRedirectTo value instead of my site url.

This is what I get:
```
generateLink data {
  properties: {
    action_link: 'https://alkdjflskdjflwemnfoijsnelfk.supabase.co/auth/v1/verify?token=c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5&type=signup&redirect_to=https://www.my-domain.com',
    email_otp: '313413584',
    hashed_token: 'c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5',
    redirect_to: 'https://www.my-domain.com',
    verification_type: 'signup'
  },
     ...
```

This is what I expect:
```
generateLink data {
  properties: {
    action_link: 'https://alkdjflskdjflwemnfoijsnelfk.supabase.co/auth/v1/verify?token=c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5&type=signup&redirect_to=https://portal.my-domain.com',
    email_otp: '313413584',
    hashed_token: 'c575asda4fa3sd54gad35f4ad35f1asd3f1a3d5f1a3sd5',
    redirect_to: 'https://portal.my-domain.com',
    verification_type: 'signup'
  },
     ...
```

## System information

- OS: macOS
- Version of supabase-js: ""@supabase/supabase-js"": ""^2.1.0"",
- Version of Node.js: 18.12.1

",password,Supabase,,1
85,341.0,"# Feature request

## Is your feature request related to a problem? Please describe.

Currently, the login method can be used to generate a magic link that is sent via email. I would like to generate a JWT access token so it can be used to login users via a magic link.

Ideally, I would like to have an API key and Secret or similar, that's generated per Team, or Account for security. So external can use it to sign the JWT and generate their own access token.

## Describe the solution you'd like

On my app I would like to generate an API key and secret, or just an API key. Then using a JWT library, sign the token with data to authenticate users.

```
var jwt = require('jsonwebtoken');

var PrivateKey = '35216f3b-9ce1-335a-955b-3a6d8f1a6504'; // from my web  app given to the user

function createToken(user) {
  var userData = {
    email: user.email,
    id: user.id,
    name: user.name,
  };
  return jwt.sign(userData, PrivateKey, {algorithm: 'HS256'});
}
```

With this I can hopefully do SSO so users can login via a magic link or silently authenticate them.

## Describe alternatives you've considered

A clear and concise description of any alternative solutions or features you've considered.

## Additional context

Add any other context or screenshots about the feature request here.
",35216f3b-9ce1-335a-955b-3a6d8f1a6504,Supabase,1,1
86,341.0,"# Feature request

## Is your feature request related to a problem? Please describe.

Currently, the login method can be used to generate a magic link that is sent via email. I would like to generate a JWT access token so it can be used to login users via a magic link.

Ideally, I would like to have an API key and Secret or similar, that's generated per Team, or Account for security. So external can use it to sign the JWT and generate their own access token.

## Describe the solution you'd like

On my app I would like to generate an API key and secret, or just an API key. Then using a JWT library, sign the token with data to authenticate users.

```
var jwt = require('jsonwebtoken');

var PrivateKey = '35216f3b-9ce1-335a-955b-3a6d8f1a6504'; // from my web  app given to the user

function createToken(user) {
  var userData = {
    email: user.email,
    id: user.id,
    name: user.name,
  };
  return jwt.sign(userData, PrivateKey, {algorithm: 'HS256'});
}
```

With this I can hopefully do SSO so users can login via a magic link or silently authenticate them.

## Describe alternatives you've considered

A clear and concise description of any alternative solutions or features you've considered.

## Additional context

Add any other context or screenshots about the feature request here.
",335a-955b-3a6d8f1a6504,Supabase,1,1
87,16350.0,"<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a 👍 [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave ""+1"" or other comments that do not add relevant new information or questions, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

### Description

<!--- Please leave a helpful description of the feature request here. --->

The aws_networkfirewall_firewall resource needs to expose the VPC endpoints created by the firewall for use in routing tables in order to actually use it.  These endpoints are exposed in the FirewallStatus structure returned by the API.

For example:
```
$ aws --region us-east-1 network-firewall describe-firewall --firewall-name dhagan-2020-11-20-002
{
    ""UpdateToken"": ""29c6147b-e772-4c46-8d78-7aa5f2b71aaf"",
    ""Firewall"": {
        ""FirewallName"": ""dhagan-2020-11-20-002"",
        ""FirewallArn"": ""arn:aws:network-firewall:us-east-1:xxx:firewall/dhagan-2020-11-20-002"",
        ""FirewallPolicyArn"": ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"",
        ""VpcId"": ""vpc-0b857b1a3686ae36d"",
        ""SubnetMappings"": [
            {
                ""SubnetId"": ""subnet-0f96d5471222feb28""
            },
            {
                ""SubnetId"": ""subnet-0f55ba6bdcc7357ca""
            },
            {
                ""SubnetId"": ""subnet-03c8e80f3c807fd2e""
            },
            {
                ""SubnetId"": ""subnet-05d7d553643f36d0e""
            },
            {
                ""SubnetId"": ""subnet-02e8df98316b27054""
            }
        ],
        ""DeleteProtection"": false,
        ""SubnetChangeProtection"": false,
        ""FirewallPolicyChangeProtection"": false,
        ""FirewallId"": ""b70bc32e-9753-4d7e-bb82-febfb362b72b"",
        ""Tags"": []
    },
    ""FirewallStatus"": {
        ""Status"": ""READY"",
        ""ConfigurationSyncStateSummary"": ""IN_SYNC"",
        ""SyncStates"": {
            ""us-east-1a"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-05d7d553643f36d0e"",
                    ""EndpointId"": ""vpce-0394425be976920e3"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1b"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-0f96d5471222feb28"",
                    ""EndpointId"": ""vpce-073e44a76dab0949e"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1c"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-0f55ba6bdcc7357ca"",
                    ""EndpointId"": ""vpce-0ae3a6d2b2c886215"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1d"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-02e8df98316b27054"",
                    ""EndpointId"": ""vpce-0006b35c0f00be77c"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1f"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-03c8e80f3c807fd2e"",
                    ""EndpointId"": ""vpce-0552034c8ae2b92ce"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            }
        }
    }
}
```


### New or Affected Resource(s)

<!--- Please list the new or affected resources and data sources. --->

* aws_networkfirewall_firewall

### Potential Terraform Configuration

<!--- Information about code formatting: https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code --->

```hcl
# Copy-paste your Terraform configurations here - for large Terraform configs,
# please use a service like Dropbox and share a link to the ZIP file. For
# security, you can also encrypt the files using our GPG public key.
```

### References

<!---
Information about referencing Github Issues: https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests

Are there any other GitHub issues (open or closed) or pull requests that should be linked here? Vendor blog posts or documentation? For example:

* https://aws.amazon.com/about-aws/whats-new/2018/04/introducing-amazon-ec2-fleet/
--->

* https://docs.aws.amazon.com/network-firewall/latest/APIReference/API_FirewallStatus.html
",FirewallPolicyChangeProtection,Aws,,1
88,16350.0,"<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a 👍 [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave ""+1"" or other comments that do not add relevant new information or questions, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

### Description

<!--- Please leave a helpful description of the feature request here. --->

The aws_networkfirewall_firewall resource needs to expose the VPC endpoints created by the firewall for use in routing tables in order to actually use it.  These endpoints are exposed in the FirewallStatus structure returned by the API.

For example:
```
$ aws --region us-east-1 network-firewall describe-firewall --firewall-name dhagan-2020-11-20-002
{
    ""UpdateToken"": ""29c6147b-e772-4c46-8d78-7aa5f2b71aaf"",
    ""Firewall"": {
        ""FirewallName"": ""dhagan-2020-11-20-002"",
        ""FirewallArn"": ""arn:aws:network-firewall:us-east-1:xxx:firewall/dhagan-2020-11-20-002"",
        ""FirewallPolicyArn"": ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"",
        ""VpcId"": ""vpc-0b857b1a3686ae36d"",
        ""SubnetMappings"": [
            {
                ""SubnetId"": ""subnet-0f96d5471222feb28""
            },
            {
                ""SubnetId"": ""subnet-0f55ba6bdcc7357ca""
            },
            {
                ""SubnetId"": ""subnet-03c8e80f3c807fd2e""
            },
            {
                ""SubnetId"": ""subnet-05d7d553643f36d0e""
            },
            {
                ""SubnetId"": ""subnet-02e8df98316b27054""
            }
        ],
        ""DeleteProtection"": false,
        ""SubnetChangeProtection"": false,
        ""FirewallPolicyChangeProtection"": false,
        ""FirewallId"": ""b70bc32e-9753-4d7e-bb82-febfb362b72b"",
        ""Tags"": []
    },
    ""FirewallStatus"": {
        ""Status"": ""READY"",
        ""ConfigurationSyncStateSummary"": ""IN_SYNC"",
        ""SyncStates"": {
            ""us-east-1a"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-05d7d553643f36d0e"",
                    ""EndpointId"": ""vpce-0394425be976920e3"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1b"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-0f96d5471222feb28"",
                    ""EndpointId"": ""vpce-073e44a76dab0949e"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1c"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-0f55ba6bdcc7357ca"",
                    ""EndpointId"": ""vpce-0ae3a6d2b2c886215"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1d"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-02e8df98316b27054"",
                    ""EndpointId"": ""vpce-0006b35c0f00be77c"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1f"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-03c8e80f3c807fd2e"",
                    ""EndpointId"": ""vpce-0552034c8ae2b92ce"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            }
        }
    }
}
```


### New or Affected Resource(s)

<!--- Please list the new or affected resources and data sources. --->

* aws_networkfirewall_firewall

### Potential Terraform Configuration

<!--- Information about code formatting: https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code --->

```hcl
# Copy-paste your Terraform configurations here - for large Terraform configs,
# please use a service like Dropbox and share a link to the ZIP file. For
# security, you can also encrypt the files using our GPG public key.
```

### References

<!---
Information about referencing Github Issues: https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests

Are there any other GitHub issues (open or closed) or pull requests that should be linked here? Vendor blog posts or documentation? For example:

* https://aws.amazon.com/about-aws/whats-new/2018/04/introducing-amazon-ec2-fleet/
--->

* https://docs.aws.amazon.com/network-firewall/latest/APIReference/API_FirewallStatus.html
",29c6147b-e772-4c46-8d78-7aa5f2b71aaf,Aws,,1
89,16350.0,"<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a 👍 [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave ""+1"" or other comments that do not add relevant new information or questions, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

### Description

<!--- Please leave a helpful description of the feature request here. --->

The aws_networkfirewall_firewall resource needs to expose the VPC endpoints created by the firewall for use in routing tables in order to actually use it.  These endpoints are exposed in the FirewallStatus structure returned by the API.

For example:
```
$ aws --region us-east-1 network-firewall describe-firewall --firewall-name dhagan-2020-11-20-002
{
    ""UpdateToken"": ""29c6147b-e772-4c46-8d78-7aa5f2b71aaf"",
    ""Firewall"": {
        ""FirewallName"": ""dhagan-2020-11-20-002"",
        ""FirewallArn"": ""arn:aws:network-firewall:us-east-1:xxx:firewall/dhagan-2020-11-20-002"",
        ""FirewallPolicyArn"": ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"",
        ""VpcId"": ""vpc-0b857b1a3686ae36d"",
        ""SubnetMappings"": [
            {
                ""SubnetId"": ""subnet-0f96d5471222feb28""
            },
            {
                ""SubnetId"": ""subnet-0f55ba6bdcc7357ca""
            },
            {
                ""SubnetId"": ""subnet-03c8e80f3c807fd2e""
            },
            {
                ""SubnetId"": ""subnet-05d7d553643f36d0e""
            },
            {
                ""SubnetId"": ""subnet-02e8df98316b27054""
            }
        ],
        ""DeleteProtection"": false,
        ""SubnetChangeProtection"": false,
        ""FirewallPolicyChangeProtection"": false,
        ""FirewallId"": ""b70bc32e-9753-4d7e-bb82-febfb362b72b"",
        ""Tags"": []
    },
    ""FirewallStatus"": {
        ""Status"": ""READY"",
        ""ConfigurationSyncStateSummary"": ""IN_SYNC"",
        ""SyncStates"": {
            ""us-east-1a"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-05d7d553643f36d0e"",
                    ""EndpointId"": ""vpce-0394425be976920e3"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1b"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-0f96d5471222feb28"",
                    ""EndpointId"": ""vpce-073e44a76dab0949e"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1c"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-0f55ba6bdcc7357ca"",
                    ""EndpointId"": ""vpce-0ae3a6d2b2c886215"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1d"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-02e8df98316b27054"",
                    ""EndpointId"": ""vpce-0006b35c0f00be77c"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            },
            ""us-east-1f"": {
                ""Attachment"": {
                    ""SubnetId"": ""subnet-03c8e80f3c807fd2e"",
                    ""EndpointId"": ""vpce-0552034c8ae2b92ce"",
                    ""Status"": ""READY""
                },
                ""Config"": {
                    ""arn:aws:network-firewall:us-east-1:xxxxx:firewall-policy/example-inspection-vpc-policy"": {
                        ""SyncStatus"": ""IN_SYNC""
                    }
                }
            }
        }
    }
}
```


### New or Affected Resource(s)

<!--- Please list the new or affected resources and data sources. --->

* aws_networkfirewall_firewall

### Potential Terraform Configuration

<!--- Information about code formatting: https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code --->

```hcl
# Copy-paste your Terraform configurations here - for large Terraform configs,
# please use a service like Dropbox and share a link to the ZIP file. For
# security, you can also encrypt the files using our GPG public key.
```

### References

<!---
Information about referencing Github Issues: https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests

Are there any other GitHub issues (open or closed) or pull requests that should be linked here? Vendor blog posts or documentation? For example:

* https://aws.amazon.com/about-aws/whats-new/2018/04/introducing-amazon-ec2-fleet/
--->

* https://docs.aws.amazon.com/network-firewall/latest/APIReference/API_FirewallStatus.html
",8d78-7aa5f2b71aaf,Aws,,1
90,765.0,"_From @captDaylight on August 8, 2017 14:6_

setting a secret with:

`now secrets add email_pass ""u5wV@#om$cLwAZC&mmlB3*2ly&Mm8bkv@54JOZ4N""`

is getting the secret passed to my app as:

`u5wV@#om&mmlB3*2ly&Mm8bkv@54JOZ4N`

I'll put them one on top of each other to inspect them easier, first the original and then the output.

```
u5wV@#om$cLwAZC&mmlB3*2ly&Mm8bkv@54JOZ4N
u5wV@#om&mmlB3*2ly&Mm8bkv@54JOZ4N
```

I fixed this by changing the value to only numbers and letters, but I imagine this is unexpected behavior.

_Copied from original issue: zeit/now#45_",u5wV@#om$cLwAZC&mmlB3*2ly&Mm8bkv@54JOZ4N,vercel,1,1
91,765.0,"_From @captDaylight on August 8, 2017 14:6_

setting a secret with:

`now secrets add email_pass ""u5wV@#om$cLwAZC&mmlB3*2ly&Mm8bkv@54JOZ4N""`

is getting the secret passed to my app as:

`u5wV@#om&mmlB3*2ly&Mm8bkv@54JOZ4N`

I'll put them one on top of each other to inspect them easier, first the original and then the output.

```
u5wV@#om$cLwAZC&mmlB3*2ly&Mm8bkv@54JOZ4N
u5wV@#om&mmlB3*2ly&Mm8bkv@54JOZ4N
```

I fixed this by changing the value to only numbers and letters, but I imagine this is unexpected behavior.

_Copied from original issue: zeit/now#45_",*2ly&Mm8bkv@54JOZ4N,vercel,1,1
92,178.0,"As far as I can tell, trying to add a now secret with a name length > 28 characters will fail.

```
now secrets add abcdefghijklmnopqrstuvwxyz01 value
> Success! Secret abcdefghijklmnopqrstuvwxyz01 (sec_eJi9BAO0uYGumSCgIHh7Gxuv) added [899ms]
now secrets add abcdefghijklmnopqrstuvwxyz012 value
> Error! Unexpected error. Please try later. (An unexpected internal error occurred)
```",sec_eJi9BAO0uYGumSCgIHh7Gxuv,vercel,1,1
93,178.0,"As far as I can tell, trying to add a now secret with a name length > 28 characters will fail.

```
now secrets add abcdefghijklmnopqrstuvwxyz01 value
> Success! Secret abcdefghijklmnopqrstuvwxyz01 (sec_eJi9BAO0uYGumSCgIHh7Gxuv) added [899ms]
now secrets add abcdefghijklmnopqrstuvwxyz012 value
> Error! Unexpected error. Please try later. (An unexpected internal error occurred)
```",abcdefghijklmnopqrstuvwxyz012,vercel,,1
94,178.0,"As far as I can tell, trying to add a now secret with a name length > 28 characters will fail.

```
now secrets add abcdefghijklmnopqrstuvwxyz01 value
> Success! Secret abcdefghijklmnopqrstuvwxyz01 (sec_eJi9BAO0uYGumSCgIHh7Gxuv) added [899ms]
now secrets add abcdefghijklmnopqrstuvwxyz012 value
> Error! Unexpected error. Please try later. (An unexpected internal error occurred)
```",abcdefghijklmnopqrstuvwxyz01,vercel,,1
